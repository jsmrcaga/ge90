-- phpMyAdmin SQL Dump
-- version 4.2.12deb2+deb8u1
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Jun 20, 2016 at 09:03 PM
-- Server version: 5.5.47-0+deb8u1
-- PHP Version: 5.6.17-0+deb8u1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `ge90`
--

-- --------------------------------------------------------

--
-- Table structure for table `university`
--

CREATE TABLE IF NOT EXISTS `university` (
`U_id` int(6) NOT NULL,
  `U_country` varchar(25) NOT NULL,
  `U_name` varchar(50) NOT NULL,
  `U_url` varchar(1024) DEFAULT NULL,
  `U_done` tinyint(1) NOT NULL DEFAULT '0'
) ENGINE=InnoDB AUTO_INCREMENT=102 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `university`
--

INSERT INTO `university` (`U_id`, `U_country`, `U_name`, `U_url`, `U_done`) VALUES
(1, 'USA', 'Université Stanford', NULL, 1),
(2, 'USA', 'Institut de Technologie du Massachusetts ', 'http://student.mit.edu/catalog/m6a.html', 1),
(3, 'USA', 'Université de California à Berkeley', 'http://guide.berkeley.edu/courses/compsci/', 1),
(4, 'USA', 'Université d''Harvard ', 'https://courses.harvard.edu/search?fq_dept_area_category=dept_area_category%3A%22Computer%20Science%22&q=&sort=course_title%20asc&start=0&rows=200', 1),
(5, 'USA', 'Université de Princeton ', 'https://registrar.princeton.edu/course-offerings/search_results.xml?term=1164&coursetitle=&instructor=&distr_area=&level=&cat_number=&subject=COS&sort=SYN_PS_PU_ROXEN_SOC_VW.SUBJECT%2C+SYN_PS_PU_ROXEN_SOC_VW.CATALOG_NBR%2CSYN_PS_PU_ROXEN_SOC_VW.CLASS_SECTION%2CSYN_PS_PU_ROXEN_SOC_VW.CLASS_MTG_NBR&submit=Search', 1),
(6, 'USA', 'Université Carnegie-Mellon', 'https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/search', 1),
(7, 'USA', 'Université du Texas à Austin', 'IDS', 0),
(8, 'USA', 'Université Cornell', 'http://courses.cornell.edu/content.php?filter%5B27%5D=-1&filter%5B29%5D=&filter%5Bcourse_type%5D=7661&filter%5Bkeyword%5D=&filter%5B32%5D=1&filter%5Bcpage%5D=1&cur_cat_oid=26&expand=&navoid=6782&search_database=Filter#acalog_template_course_filter', 1),
(9, 'USA', 'Université de California à Los Angeles', 'http://ecatalog.calstatela.edu/content.php?filter%5B27%5D=CS&filter%5B29%5D=&filter%5Bcourse_type%5D=-1&filter%5Bkeyword%5D=&filter%5B32%5D=1&filter%5Bcpage%5D=1&cur_cat_oid=4&expand=&navoid=129&search_database=Filter#acalog_template_course_filter', 1),
(10, 'USA', 'Université de Californie du Sud', NULL, 1),
(11, 'USA', 'Institut de technologie de Californie', 'http://www.cms.caltech.edu/academics/course_desc', 0),
(12, 'Canada', 'Université de Toronto', NULL, 0),
(13, 'USA', 'University d''Illinois à Urbana-Champaign', NULL, 0),
(14, 'USA', 'Université de California à San Diego', NULL, 0),
(15, 'USA', 'Université de Michigan à Ann Arbor', NULL, 0),
(16, 'USA', 'Université de Maryland au Collège parc ', NULL, 1),
(17, 'Switzerland', 'École polytechnique fédérale de Zurich', NULL, 1),
(18, 'Israel', 'Institut israélien de technologie', NULL, 1),
(19, 'USA', 'Université de l''État d''Ohio à Columbus', NULL, 1),
(20, 'Israel', 'Université de Tel Aviv', NULL, 0),
(21, 'USA', 'Université  Purdue à West Lafayette ', NULL, 0),
(22, 'USA', 'Institut de technologie de Georgia', NULL, 0),
(23, 'UK', 'Université de Cambridge', NULL, 0),
(24, 'China-tw', 'Université Nationale de Taiwan', NULL, 0),
(25, 'China', 'Université de Tsinghua', NULL, 0),
(26, 'UK', 'Collège Impérial de Sciences Technique et de Médec', NULL, 0),
(27, 'SaudiArabia', 'Université du roi Abdulaziz', NULL, 0),
(28, 'Germany', 'Université technique de Munich', NULL, 0),
(29, 'USA', 'Université de California à Irvine', NULL, 0),
(30, 'USA', 'Université de la California à Davis', NULL, 0),
(31, 'USA', 'Université Columbia ', NULL, 0),
(32, 'USA', 'Université d''état de l''Arizona ', NULL, 0),
(33, 'Singapore', 'Université technologique Nanyang ', NULL, 0),
(34, 'UK', 'Université système de réseau d''information d''Oxfor', NULL, 0),
(35, 'USA', 'Université Northwestern', NULL, 0),
(36, 'Switzerland', 'École polytechnique fédérale de Lausanne', NULL, 0),
(37, 'USA', 'Université de New York', NULL, 0),
(38, 'China-hk', 'Université chinoise de Hong Kong', NULL, 0),
(39, 'China-hk', 'Université des Sciences et Technologies de Hong Ko', NULL, 0),
(40, 'USA', 'Université de Carolina du Nord à Chapel Hill', NULL, 0),
(41, 'USA', 'Université du Minnesota Twin Cities', NULL, 0),
(42, 'Spain', 'Université de Grenade', NULL, 0),
(43, 'China', 'Université du Zhejiang', NULL, 0),
(44, 'UK', 'University College de Londres', NULL, 0),
(45, 'China-hk', 'Université municipale de Hong Kong', NULL, 0),
(46, 'Canada', 'Université de la Colombie-Britannique', NULL, 0),
(47, 'USA', 'Université de Notre Dame', NULL, 0),
(48, 'Singapore', 'Université nationale de Singapour', NULL, 0),
(49, 'China', 'Université Jiaotong de Shanghai', NULL, 0),
(50, 'USA', 'Université de Yale', NULL, 0),
(51, 'USA', 'Université Duke', NULL, 0),
(52, 'Netherlands', 'Université technique d''Eindhoven', NULL, 0),
(53, 'China', 'Institut de technologie de Harbin', NULL, 0),
(54, 'China', 'Université Huazhong des sciences et technologies ', NULL, 0),
(55, 'SaudiArabia', 'Université des sciences et technologies du Roi Abd', NULL, 0),
(56, 'Belgium', ' Katholieke Universiteit Leuven', NULL, 0),
(57, 'USA', 'Université de l''État du Michigan', NULL, 0),
(58, 'China-tw', 'Université Nationale Chiao Tung', NULL, 0),
(59, 'China', 'Université de Pékin', NULL, 0),
(60, 'USA', 'Université de l''Etat de Pennsylvanie (Parc univers', NULL, 0),
(61, 'USA', 'Université Rice', NULL, 0),
(62, 'USA', 'Université Rutgers (Campus du Nouveau-Brunswick)', NULL, 0),
(63, 'Canada', 'Université Simon Fraster', NULL, 0),
(64, 'USA', 'Université A&M du Texas ', NULL, 0),
(65, 'China-hk', 'Université polytechnique de Hong Kong ', NULL, 0),
(66, 'UK', 'Université de Manchester', NULL, 0),
(67, 'USA', 'Université de California à Santa Barbara', NULL, 0),
(68, 'USA', 'Université du Colorado à Boulder', NULL, 0),
(69, 'Denmark', 'Copenhague', NULL, 0),
(70, 'USA', 'Université de Delaware', NULL, 0),
(71, 'Spain', 'Université de Jaen', NULL, 0),
(72, 'USA', 'Université d''Utah', NULL, 0),
(73, 'USA', 'Université de Washington', NULL, 0),
(74, 'China', 'Université Jiaotong de Xi''an ', NULL, 0),
(75, 'China', 'Université des sciences et des technologies électr', NULL, 0),
(76, 'USA', 'Université Brown', NULL, 0),
(77, 'China', 'Université de Technologie de Dalian', NULL, 0),
(78, 'Belgium', 'Université de Gand', NULL, 0),
(79, 'USA', 'Université Johns Hopkins', NULL, 0),
(80, 'SouthKorea', 'Institut supérieur coréen des sciences et technolo', NULL, 0),
(81, 'Canada', 'Univeristé McGill', NULL, 0),
(82, 'USA', 'Institut de technologie de New Jersey', NULL, 0),
(83, 'Italy', 'Université La Sapienza de Rome', NULL, 0),
(84, 'Denmark', 'Université technique du Danemark', NULL, 0),
(85, 'Israel', 'Université hébraïque de Jérusalem', NULL, 0),
(86, 'UK', 'Université d''Édimbourg', NULL, 0),
(87, 'China-hk', 'Université de Hong Kong', NULL, 0),
(88, 'Australia', 'L''Université de Nouvelle-Galles du Sud', NULL, 0),
(89, 'Canada', 'Université de l''Alberta', NULL, 0),
(90, 'UK', 'Université de Bristol', NULL, 0),
(91, 'USA', 'Université de Florida', NULL, 0),
(92, 'USA', 'Université d''Houston', NULL, 0),
(93, 'USA', 'Université d''Illinois à Chicago', NULL, 0),
(94, 'USA', 'Université de Pennsylvania', NULL, 0),
(95, 'China', 'Université des Sciences et Technologies de Chine', NULL, 0),
(96, 'UK', 'Université de Southampton', NULL, 0),
(97, 'Canada', 'Université de Waterloo', NULL, 0),
(98, 'USA', 'Université de Wisconsin - Madison', NULL, 0),
(99, 'Israel', 'Institut Weizmann', NULL, 0),
(100, 'China', 'Université de Wuhan', NULL, 0),
(101, 'France', 'Université de Technologie de Compiègne', NULL, 0);

-- --------------------------------------------------------

--
-- Table structure for table `uvs`
--

CREATE TABLE IF NOT EXISTS `uvs` (
  `UV_university` int(6) NOT NULL,
  `UV_code` varchar(50) NOT NULL,
  `UV_name` varchar(255) DEFAULT NULL,
  `UV_description` text,
  `UV_section` varchar(50) DEFAULT NULL,
  `UV_tech` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `uvs`
--

INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(1, 'CS 101', 'Introduction to Computing Principles', 'Introduces the essential ideas of computing: data representation, algorithms, programming "code", computer hardware, networking, security, and social issues. Students learn how computers work and what they can do through hands-on exercises. In particular, students will see the capabilities and weaknesses of computer systems so they are not mysterious or intimidating. Course features many small programming exercises, although no prior programming experience is assumed or required. CS101 is not a complete programming course such as \nCS106A. CS101 is effectively an alternative to \nCS105. A laptop computer is recommended for the in-class exercises.', 'Networking', NULL),
(1, 'CS 102', 'Big Data: Tools and Techniques, Discoveries and Pitfalls', 'Aimed primarily at students who may not major in CS but want to learn about big data and apply that knowledge in their areas of study. Many of the world''s biggest discoveries and decisions in science, technology, business, medicine, politics, and society as a whole, are now being made on the basis of analyzing massive data sets, but it is surprisingly easy to come to false conclusions from data analysis alone, and privacy of data connected to individuals can be a major concern. This course provides a broad introduction to big data: historical context and case studies; privacy issues; data analysis techniques including databases, data mining, and machine learning; sampling and statistical significance; data analysis tools including spreadsheets, SQL, Python, R; data visualization techniques and tools. Tools and techniques are hands-on but at a cursory level, providing a basis for future exploration and application. Prerequisites: high school AP computer science, \nCS106A, or other equivalent programming experience; comfort with statistics and spreadsheets helpful but not required.', 'Graphs', NULL),
(1, 'CS 103', 'Mathematical Foundations of Computing', 'Mathematical foundations required for computer science, including propositional predicate logic, induction, sets, functions, and relations. Formal language theory, including regular expressions, grammars, finite automata, Turing machines, and NP-completeness. Mathematical rigor, proof techniques, and applications. Prerequisite: 106A or equivalent.', 'CS', NULL),
(1, 'CS 103A', 'Mathematical Problem-solving Strategies', 'Problem solving strategies and techniques in discrete mathematics and computer science. Additional problem solving practice for \nCS103. In-class participation required. Prerequisite: consent of instructor. Co-requisite: \nCS103.', 'CS', NULL),
(1, 'CS 105', 'Introduction to Computers', 'For non-technical majors. What computers are and how they work. Practical experience in programming. Construction of computer programs and basic design techniques. A survey of Internet technology and the basics of computer hardware. Students in technical fields and students looking to acquire programming skills should take 106A or 106X. Students with prior computer science experience at the level of 106 or above require consent of instructor. Prerequisite: minimal math skills.', 'CS', NULL),
(1, 'CS 106A', 'Programming Methodology (ENGR 70A)', 'Introduction to the engineering of computer applications emphasizing modern software engineering principles: object-oriented design, decomposition, encapsulation, abstraction, and testing. Uses the Java programming language. Emphasis is on good programming style and the built-in facilities of the Java language. No prior programming experience required. Summer quarter enrollment is limited. Priority given to Stanford students.', NULL, NULL),
(1, 'CS 106B', 'Programming Abstractions (ENGR 70B)', 'Abstraction and its relation to programming. Software engineering principles of data abstraction and modularity. Object-oriented programming, fundamental data structures (such as stacks, queues, sets) and data-directed design. Recursion and recursive data structures (linked lists, trees, graphs). Introduction to time and space complexity analysis. Uses the programming language C++ covering its basic facilities. Prerequisite: 106A or equivalent. Summer quarter enrollment is limited. Priority given to Stanford students.', 'Graphs', NULL),
(1, 'CS 106L', 'Standard C++ Programming Laboratory', 'Supplemental lab to 106B and 106X. Additional features of standard C++ programming practice. Possible topics include advanced C++ language features, standard libraries, STL containers and algorithms, object memory management, operator overloading, and inheritance. Prerequisite: consent of instructor. Corequisite: 106B or 106X.', NULL, 'c'),
(1, 'CS 106X', 'Programming Abstractions (Accelerated) (ENGR 70X)', 'Intensive version of 106B for students with a strong programming background interested in a rigorous treatment of the topics at an accelerated pace. Additional advanced material and more challenging projects. Prerequisite: excellence in 106A or equivalent, or consent of instructor.', NULL, NULL),
(1, 'CS 107', 'Computer Organization and Systems', 'Introduction to the fundamental concepts of computer systems. Explores how computer systems execute programs and manipulate data, working from the C programming language down to the microprocessor. Topics covered include: the C programming language, data representation, machine-level code, computer arithmetic, elements of code compilation, memory organization and management, and performance evaluation and optimization. Prerequisites: 106B or X, or consent of instructor.', 'Optimization', NULL),
(1, 'CS 107E', 'Computer Systems from the Ground Up', 'Introduction to the fundamental concepts of computer systems through bare metal programming on the Raspberry Pi. Explores how five concepts come together in computer systems: hardware, architecture, assembly code, the C language, and software development tools. Students do all programming with a Raspberry Pi kit and several add-ons (LEDs, buttons). Topics covered include: the C programming language, data representation, machine-level code, computer arithmetic, compilation, memory organization and management, debugging, hardware, and I/O. Prerequisite: 106B or X, and consent of instructor.', NULL, NULL),
(1, 'CS 108', 'Object-Oriented Systems Design', 'Software design and construction in the context of large OOP libraries. Taught in Java. Topics: OOP design, design patterns, testing, graphical user interface (GUI) OOP libraries, software engineering strategies, approaches to programming in teams. Prerequisite: 107.', 'Graphs', NULL),
(1, 'CS 109', 'Introduction to Probability for Computer Scientists', 'Topics include: counting and combinatorics, random variables, conditional probability, independence, distributions, expectation, point estimation, and limit theorems. Applications of probability in computer science including machine learning and the use of probability in the analysis of algorithms. Prerequisites: 103, 106B or X, multivariate calculus at the level of \nMATH 51 or \nCME 100 or equivalent.', 'Machine Learning', NULL),
(1, 'CS 109L', 'Statistical Computing with R Laboratory', 'Supplemental lab to \nCS109. Introduces the R programming language for statistical computing. Topics include basic facilities of R including mathematical, graphical, and probability functions, building simulations, introductory data fitting and machine learning. Provides exposure to the functional programming paradigm. Corequisite: \nCS109.', 'Graphs', NULL),
(1, 'CS 10SC', 'Great Ideas in Computer Science', 'Computers have come to permeate many aspects of our lives, from how we communicate with each other to how we produce and consume information. And while it is all too easy to think of computing in terms of the products and applications we see emerging from technology companies, the intellectual foundations of computer science go much deeper. Indeed, beneath the surface of the tools we use, the social networks we engage in, and the web of information we search, lays a field rich with fascinating, intellectually exciting, and sometimes unexpectedly surprising ideas.nnIn this seminar, we will explore several of the great ideas in computer science, looking at both challenging problems and their impact on real applications. From understanding how search engines on the Web work to looking at mathematical theories underlying social networks, from questioning whether a computer can be intelligent to analyzing the notion of what is even possible to compute, this seminar will take us on a series of intellectual excursions that will change the way you look at computers.nnNo prior experience with computer science or programming is required, but a high school mathematics background, an interest in problem-solving, and a healthy curiosity will go a long way toward ensuring an enjoyable and enlightening experience. Students will work in small groups to research topics in computer science they find most intriguing. The course will also take advantage of Stanford''s location in the heart of Silicon Valley by conducting field trips to a local company and the Computer History Museum. Sophomore College Course: Application required, due noon, April 7, 2015. Apply at \nhttp://soco.stanford.edu', 'Networking', NULL),
(1, 'CS 110', 'Principles of Computer Systems', 'Principles and practice of engineering of computer software and hardware systems. Topics include: techniques for controlling complexity; strong modularity using client-server design, virtual memory, and threads; networks; atomicity and coordination of parallel activities; security, and encryption; and performance optimizations. Prerequisite: 107.', 'Cryptology', NULL),
(1, 'CS 123', 'Programming Your Personal Robot', 'An introduction to the programming of a sensor-rich personal robot. This course extends programming from the virtual environment into the physical world, which presents unique challenges. Focus is on three areas of intellectual discourse that are fundamental to the programming of physical devices: communication with the devices; programming of event driven behaviors; and reasoning with uncertainty. The concepts introduced will be put into practical use through a series of class projects centered around programming your personal robot. This course also serves as a good introduction to Experimental Robotics by exposing students to basic concepts and techniques that are relevant for real world robot programming. Prerequisite: Basic knowledge of computer programming (as covered in \nCS 106). Knowledge of Python is recommended.', NULL, NULL),
(1, 'CS 124', 'From Languages to Information (LINGUIST 180, LINGUIST 280)', 'Extracting meaning, information, and structure from human language text, speech, web pages, genome sequences, social networks. Methods include: string algorithms, edit distance, language modeling, the noisy channel, naive Bayes, inverted indices, collaborative filtering, PageRank. Applications such as question answering, sentiment analysis, information retrieval, text classification, social network models, machine translation, genomic sequence alignment, spell checking, speech processing, recommender systems. Prerequisite: \nCS103, \nCS107, \nCS109.', 'Networking', NULL),
(1, 'CS 131', 'Computer Vision: Foundations and Applications', 'Robots that can navigate space and perform duties, search engines that can index billions of images and videos, algorithms that can diagnose medical images for diseases, or smart cars that can see and drive safely: Lying in the heart of these modern AI applications are computer vision technologies that can perceive, understand and reconstruct the complex visual world. This course is designed for students who are interested in learning about the fundamental principles and important applications of computer vision. Course will introduce a number of fundamental concepts in computer vision and expose students to a number of real-world applications, plus guide students through a series of well designed projects such that they will get to implement cutting-edge computer vision algorithms. Prerequisites: Students should be familiar with Matlab (i.e. have programmed in Matlab before) and Linux; plus Calculus & Linear Algebra.', 'Embedded Systems', NULL),
(1, 'CS 140', 'Operating Systems and Systems Programming', 'Operating systems design and implementation. Basic structure; synchronization and communication mechanisms; implementation of processes, process management, scheduling, and protection; memory organization and management, including virtual memory; I/O device management, secondary storage, and file systems. Prerequisite: \nCS 110.', 'Operating Systems', NULL),
(1, 'CS 142', 'Web Applications', 'Concepts and techniques used in constructing interactive web applications. Browser-side web facilities such as HTML, cascading stylesheets, javascript, and the document object model. Server-side technologies such as sessions, templates, relational databases, and object-relational mapping. Issues in web security and application scalability. New models of web application deployment. Prerequisites: \nCS 107 and \nCS 108.', 'Embedded Systems', NULL),
(1, 'CS 143', 'Compilers', 'Principles and practices for design and implementation of compilers and interpreters. Topics: lexical analysis; parsing theory; symbol tables; type systems; scope; semantic analysis; intermediate representations; runtime environments; code generation; and basic program analysis and optimization. Students construct a compiler for a simple object-oriented language during course programming projects. Prerequisites: 103 or 103B, and 107.', 'Optimization', NULL),
(1, 'CS 144', 'Introduction to Computer Networking', 'Principles and practice. Structure and components of computer networks, packet switching, layered architectures. Applications: web/http, voice-over-IP, p2p file sharing and socket programming. Reliable transport: TCP/IP, reliable transfer, flow control, and congestion control. The network layer: names and addresses, routing. Local area networks: ethernet and switches. Wireless networks and network security. Prerequisite: \nCS 110.', 'Networking', NULL),
(1, 'CS 145', 'Introduction to Databases', 'The course covers database design and the use of database management systems for applications. It includes extensive coverage of the relational model, relational algebra, and SQL.The course includes database design and relational design principles based on dependencies and normal forms. Many additional key database topics from the design and application-building perspective are also covered: indexes, views, transactions, authorization, integrity constraints, triggers, on-line analytical processing (OLAP), JSON, and emerging NoSQL systems. Class time will include guest speakers from industry and additional advanced topics as time and class interest permits. Prerequisites: 103 and 107 (or equivalent).', 'Databases', NULL),
(1, 'CS 147', 'Introduction to Human-Computer Interaction Design', 'Introduces fundamental methods and principles for designing, implementing, and evaluating user interfaces. Topics: user-centered design, rapid prototyping, experimentation, direct manipulation, cognitive principles, visual design, social software, software tools. Learn by doing: work with a team on a quarter-long design project, supported by lectures, readings, and studios. Prerequisite: 106B or X or equivalent programming experience.', NULL, NULL),
(1, 'CS 148', 'Introduction to Computer Graphics and Imaging', 'Introductory prerequisite course in the computer graphics sequence introducing students to the technical concepts behind creating synthetic computer generated images. Focuses on using OpenGL to create visual imagery, as well as an understanding of the underlying mathematical concepts including triangles, normals, interpolation, texture mapping, bump mapping, etc. Course will cover fundamental understanding of light and color, as well as how it impacts computer displays and printers. Class will discuss more thoroughly how light interacts with the environment, constructing engineering models such as the BRDF, plus various simplifications into more basic lighting and shading models. Also covers ray tracing technology for creating virtual images, while drawing parallels between ray tracers and real world cameras to illustrate various concepts. Anti-aliasing and acceleration structures are also discussed. The final class mini-project consists of building out a ray tracer to create visually compelling images. Starter codes and code bits will be provided to aid in development, but this class focuses on what you can do with the code as opposed to what the code itself looks like. Therefore grading is weighted toward in person "demos" of the code in action - creativity and the production of impressive visual imagery are highly encouraged. Prerequisites: \nCS 107, \nMATH 51.', 'Graphs', NULL),
(1, 'CS 154', 'Introduction to Automata and Complexity Theory', 'This course provides a mathematical introduction to the following questions: What is computation? Given a computational model, what problems can we hope to solve in principle with this model? Besides those solvable in principle, what problems can we hope to efficiently solve? In many cases we can give completely rigorous answers; in other cases, these questions have become major open problems in computer science and mathematics. By the end of this course, students will be able to classify computational problems in terms of their computational complexity (Is the problem regular? Not regular? Decidable? Recognizable? Neither? Solvable in P? NP-complete? PSPACE-complete?, etc.). Students will gain a deeper appreciation for some of the fundamental issues in computing that are independent of trends of technology, such as the Church-Turing Thesis and the P versus NP problem. Prerequisites: \nCS 103 or 103B.', 'CS', NULL),
(1, 'CS 155', 'Computer and Network Security', 'For seniors and first-year graduate students. Principles of computer systems security. Attack techniques and how to defend against them. Topics include: network attacks and defenses, operating system security, application security (web, apps, databases), malware, privacy, and security for mobile devices. Course projects focus on building reliable code. Prerequisite: 110. Recommended: basic Unix.', 'Security', NULL),
(1, 'CS 157', 'Logic and Automated Reasoning', 'An elementary exposition from a computational point of view of propositional and predicate logic, axiomatic theories, and theories with equality and induction. Interpretations, models, validity, proof, strategies, and applications. Automated deduction: polarity, skolemization, unification, resolution, equality. Prerequisite: 103 or 103B.', NULL, NULL),
(1, 'CS 161', 'Design and Analysis of Algorithms', 'Worst and average case analysis. Recurrences and asymptotics. Efficient algorithms for sorting, searching, and selection. Data structures: binary search trees, heaps, hash tables. Algorithm design techniques: divide-and-conquer, dynamic programming, greedy algorithms, amortized analysis, randomization. Algorithms for fundamental graph problems: minimum-cost spanning tree, connected components, topological sort, and shortest paths. Possible additional topics: network flow, string searching. Prerequisite: 103 or 103B; 109 or \nSTATS 116.', 'Graphs', NULL),
(1, 'CS 166', 'Data Structures', 'Techniques in the design, analysis, and implementation of data structures. Isometries between data structures (including red/black trees and 2-3-4 trees), amortized analysis (including Fibonacci heaps and splay trees), and randomization (including count-min sketches and dynamic perfect hash tables). Data structures for integers and strings (including van Emde Boas trees and suffix trees). Possible additional topics include functional data structures, concurrent data structures, and spatial data structures. Prerequisites: CS107 and \nCS161.', NULL, NULL),
(1, 'CS 167', 'Readings in Algorithms', 'Recent research in the design and analysis of algorithms. Readings cover both classical and emerging topics, such as: computational models for massive data sets; data privacy; dimensionality reduction; exact and approximate algorithms for NP-hard problems; graph algorithms; hashing; online learning; search trees; streaming and sketching. Students are expected to respond to research papers, deliver an oral presentation, and complete a reading or programming project. Limited enrollment; preference given to undergraduates. Prerequisites: \nCS161.', 'Graphs', NULL),
(1, 'CS 168', 'The Modern Algorithmic Toolbox', 'This course will provide a rigorous and hands-on introduction to the central ideas and algorithms that constitute the core of the modern algorithms toolkit. Emphasis will be on understanding the high-level theoretical intuitions and principles underlying the algorithms we discuss, as well as developing a concrete understanding of when and how to implement and apply the algorithms. The course will be structured as a sequence of one-week investigations; each week will introduce one algorithmic idea, and discuss the motivation, theoretical underpinning, and practical applications of that algorithmic idea. Each topic will be accompanied by a mini-project in which students will be guided through a practical application of the ideas of the week. Topics include hashing, dimension reduction and LSH, boosting, linear programming, gradient descent, sampling and estimation, and an introduction to spectral techniques. Prerequisites: CS107 and \nCS161, or permission from the instructor.', NULL, NULL),
(1, 'CS 170', 'Stanford Laptop Orchestra: Composition, Coding, and Performance (MUSIC 128)', 'Classroom instantiation of the Stanford Laptop Orchestra (SLOrk) which includes public performances. An ensemble of more than 20 humans, laptops, controllers, and special speaker arrays designed to provide each computer-mediated instrument with its sonic identity and presence. Topics and activities include issues of composing for laptop orchestras, instrument design, sound synthesis, programming, and live performance. May be repeated four times for credit.', NULL, NULL),
(1, 'CS 173', 'A Computational Tour of the Human Genome', '(Only one of 173 or 273A counts toward any CS degree program.) Introduction to computational biology through an informatic exploration of the human genome. Topics include: genome sequencing; functional landscape of the human genome (genes, gene regulation, repeats, RNA genes, epigenetics); genome evolution (comparative genomics, ultraconservation, co-option). Additional topics may include population genetics, personalized genomics, and ancient DNA. Course includes primers on molecular biology, the UCSC Genome Browser, and text processing languages. Guest lectures on current genomic research topics. Class will be similar in spirit to \nCS273A, which will not be offered this year. Prerequisites: CS107 or equivalent background in programming.', 'Research', NULL),
(1, 'CS 181', 'Computers, Ethics, and Public Policy', '(Formerly 201.) Primarily for majors entering computer-related fields. Ethical and social issues related to the development and use of computer technology. Ethical theory, and social, political, and legal considerations. Scenarios in problem areas: privacy, reliability and risks of complex systems, and responsibility of professionals for applications and consequences of their work. Prerequisite: 106B or X.', NULL, NULL),
(1, 'CS 181W', 'Computers, Ethics, and Public Policy (WIM)', 'Writing-intensive version of \nCS181. Satisfies the WIM requirement for Computer Science, Engineering Physics, STS, and Math/Comp Sci undergraduates.', 'CS', NULL),
(1, 'CS 183C', 'Technology-enabled Blitzscaling', 'We are all familiar with the power of technological innovation to reshape markets and daily lives. But what many overlook is how technology enables a far more rapid scaling of organizations and businesses. This rapid scaling, or ''blitzscaling'', confers massive competitive advantage, but requires massive adjustments at every stage of growth. ''Technology-enabled Blitzscaling'' examines how technology enables this hyper growth and how technology can help entrepreneurs and organizations manage that growth.', NULL, NULL),
(1, 'CS 183E', 'Effective Leadership in High-Tech', 'You will undoubtedly leave Stanford with the technical skills to excel in your first few jobs. But non-technical skills are just as critical to making a difference. This seminar is taught by two industry veterans in engineering leadership and product management. In a small group setting, we will explore how you can be a great individual contributor (communicating with clarity, getting traction for your ideas, resolving conflict, and delivering your best work) and how you can transition into leadership roles (finding leadership opportunities, creating a great team culture, hiring and onboarding new team members). We will end by turning back to your career (picking your first job and negotiating your offer, managing your career changes, building a great network, and succeeding with mentors). Prerequisites: Preference given to seniors and co-terms in Computer Science and related majors.', 'CS', NULL),
(1, 'CS 190', 'Software Design Studio', 'This course will teach the art of software design: how to decompose large complex systems into classes that can be implemented and maintained easily. Topics include information hiding, thick classes, API design, managing complexity, and how to write in-code documentation. The class will involve significant system software implementation and will use an iterative approach consisting of implementation, review, and revision. The course will be taught in a studio format with in-class discussions and code reviews in addition to lectures. Prerequisites: \nCS 140.', NULL, NULL),
(1, 'CS 191', 'Senior Project', 'Restricted to Computer Science and Computer Systems Engineering students. Group or individual projects under faculty direction. Register using instructor''s section number. A project can be either a significant software application or publishable research. Software application projects include substantial programming and modern user-interface technologies and are comparable in scale to shareware programs or commercial applications. Research projects may result in a paper publishable in an academic journal or presentable at a conference. Required public presentation of final application or research results. Prerequisite: Completion of at least 135 units.', 'Research', NULL),
(1, 'CS 191W', 'Writing Intensive Senior Project (WIM)', 'Restricted to Computer Science and Computer Systems Engineering students. Writing-intensive version of \nCS191. Register using the section number of an Academic Council member. Prerequisite: Completion of at least 135 units.', 'CS', NULL),
(1, 'CS 192', 'Programming Service Project', 'Restricted to Computer Science students. Appropriate academic credit (without financial support) is given for volunteer computer programming work of public benefit and educational value.', 'CS', NULL),
(1, 'CS 193A', 'Android Programming', 'Introduction to building applications for Android platform. Examines key concepts of Android programming: tool chain, application life-cycle, views, controls, intents, designing mobile UIs, networking, threading, and more. Features ten weekly lectures and a series of small programming projects. Phone not required, but a phone makes the projects more engaging. Prerequisites: 106B or Java experience at 106B level. Winter quarter enrollment limited and application required: http://goo.gl/forms/HCV1mRQpa0', 'Networking', NULL),
(1, 'CS 193C', 'Client-Side Internet Technologies', 'Client-side technologies used to create web sites such as sophisticated Web 2.0 interfaces similar to Google maps. XHTML, CSS, JavaScript, document object model (DOM), AJAX, and Flash. Prerequisite: programming experience at the level of 106A.', NULL, NULL),
(1, 'CS 193P', 'iPhone and iPad Application Programming', 'Tools and APIs required to build applications for the iPhone and iPad platforms using the iOS SDK. User interface design for mobile devices and unique user interactions using multi-touch technologies. Object-oriented design using model-view-controller paradigm, memory management, Swift programming language. Other topics include: object-oriented database API, animation, mobile device power management, multi-threading, networking and performance considerations. Prerequisites: C language and object-oriented programming experience exceeding 106B or X level. Previous completion of any one of the following is required: \nCS 107, 108 (preferred) or 110. Recommended: UNIX, graphics, databases.', 'Graphs', NULL),
(1, 'CS 193W', 'Apple Watch & TV Programming', 'The technologies behind building Apple Watch and Apple TV applications. Students must have access to a Macintosh computer. iPhone, Apple Watch, and Apple TV are not required, but recommended. Prerequisite: \nCS193P', NULL, NULL),
(1, 'CS 194', 'Software Project', 'Design, specification, coding, and testing of a significant team programming project under faculty supervision. Documentation includes a detailed proposal. Public demonstration of the project at the end of the quarter. Preference given to seniors. May be repeat for credit. Prerequisites: \nCS 110 and \nCS 161.', NULL, NULL),
(1, 'CS 194H', 'User Interface Design Project', 'Advanced methods for designing, prototyping, and evaluating user interfaces to computing applications. Novel interface technology, advanced interface design methods, and prototyping tools. Substantial, quarter-long course project that will be presented in a public presentation. Prerequisites: \nCS 147, or permission of instructor.', NULL, NULL),
(1, 'CS 194W', 'Software Project (WIM)', 'Restricted to Computer Science and Electrical Engineering undergraduates. Writing-intensive version of \nCS194. Preference given to seniors.', 'CS', NULL),
(1, 'CS 196', 'Computer Consulting', 'Focus is on Macintosh and Windows operating system maintenance and troubleshooting through hardware and software foundation and concepts. Topics include operating systems, networking, security, troubleshooting methodology with emphasis on Stanford''s computing environment. Not a programming course. Prerequisite: 1C or equivalent.', 'Networking', NULL),
(1, 'CS 198', 'Teaching Computer Science', 'Students lead a discussion section of 106A while learning how to teach a programming language at the introductory level. Focus is on teaching skills, techniques, and course specifics. Application and interview required; see \nhttp://cs198.stanford.edu.', 'CS', NULL),
(1, 'CS 198B', 'Additional Topics in Teaching Computer Science', 'Students build on the teaching skills developed in \nCS198. Focus is on techniques used to teach topics covered in \nCS106B. Prerequisite: successful completion of \nCS198.', 'CS', NULL),
(1, 'CS 199', 'Independent Work', 'Special study under faculty direction, usually leading to a written report. Letter grade; if not appropriate, enroll in 199P.', NULL, NULL),
(1, 'CS 199P', 'Independent Work', '(Staff)', NULL, NULL),
(1, 'CS 1C', 'Introduction to Computing at Stanford', 'For those with limited experience with computers or who want to learn more about Stanford''s computing environment. Topics include: computer maintenance and security, computing resources, Internet privacy, and copyright law. One-hour lecture/demonstration in dormitory clusters prepared and administered weekly by the Resident Computer Consultant (RCC). Final project. Not a programming course.', 'Security', NULL),
(1, 'CS 1U', 'Practical Unix', 'A practical introduction to using the Unix operating system with a focus on Linux command line skills. Class will consist of video tutorials and weekly hands-on lab sections. The time listed on AXESS is for the first week''s logistical meeting only. Topics include: grep and regular expressions, ZSH, Vim and Emacs, basic and advanced GDB features, permissions, working with the file system, revision control, Unix utilities, environment customization, and using Python for shell scripts. Topics may be added, given sufficient interest. Course website: \nhttp://cs1u.stanford.edu', NULL, NULL),
(1, 'CS 202', 'Law for Computer Science Professionals', 'Intellectual property law as it relates to computer science including copyright registration, patents, and trade secrets; contract issues such as non-disclosure/non-compete agreements, license agreements, and works-made-for-hire; dispute resolution; and principles of business formation and ownership. Emphasis is on topics of current interest such as open source and the free software movement, peer-to-peer sharing, encryption, data mining, and spam.', 'Cryptology', NULL),
(1, 'CS 204', 'Legal Informatics', 'Legal informatics based on representation of regulations in computable form. Encoding regulations facilitate creation of legal information systems with significant practical value. Convergence of technological trends, growth of the Internet, advent of semantic web technology, and progress in computational logic make computational law prospects better. Topics: current state of computational law, prospects and problems, philosophical and legal implications. This course is *Cross* listed with \nLAW 729. Prerequisite: basic concepts of programming.', NULL, NULL),
(1, 'CS 205A', 'Mathematical Methods for Robotics, Vision, and Graphics', 'Continuous mathematics background necessary for research in robotics, vision, and graphics. Possible topics: linear algebra; the conjugate gradient method; ordinary and partial differential equations; vector and tensor calculus. Prerequisites: 106B or X; \nMATH 51; or equivalents.', 'Graphs', NULL),
(1, 'CS 205B', 'Mathematical Methods for Fluids, Solids, and Interfaces', 'Numerical methods for simulation of problems involving solid mechanics and fluid dynamics. Focus is on practical tools needed for simulation, and continuous mathematics involving nonlinear hyperbolic partial differential equations. Possible topics: finite element method, highly deformable elastic bodies, plasticity, fracture, level set method, Burgers'' equation, compressible and incompressible Navier-Stokes equations, smoke, water, fire, and solid-fluid coupling. Prerequisite: 205A or equivalent.', NULL, NULL),
(1, 'CS 210A', 'Software Project Experience with Corporate Partners', 'Two-quarter project course. Focus is on real-world software development. Corporate partners seed projects with loosely defined challenges from their R&D labs; students innovate to build their own compelling software solutions. Student teams are treated as start-up companies with a budget and a technical advisory board comprised of instructional staff and corporate liaisons. Teams will typically travel to the corporate headquarters of their collaborating partner, meaning some teams will travel internationally. Open loft classroom format such as found in Silicon Valley software companies. Exposure to: current practices in software engineering; techniques for stimulating innovation; significant development experience with creative freedoms; working in groups; real-world software engineering challenges; public presentation of technical work; creating written descriptions of technical work. Prerequisites: \nCS 109 and 110.', NULL, NULL),
(1, 'CS 210B', 'Software Project Experience with Corporate Partners', 'Continuation of \nCS210A. Focus is on real-world software development. Corporate partners seed projects with loosely defined challenges from their R&D labs; students innovate to build their own compelling software solutions. Student teams are treated as start-up companies with a budget and a technical advisory board comprised of the instructional staff and corporate liaisons. Teams will typically travel to the corporate headquarters of their collaborating partner, meaning some teams will travel internationally. Open loft classroom format such as found in Silicon Valley software companies. Exposure to: current practices in software engineering; techniques for stimulating innovation; significant development experience with creative freedoms; working in groups; real world software engineering challenges; public presentation of technical work; creating written descriptions of technical work. Prerequisites: \nCS 210A', NULL, NULL),
(1, 'CS 210L', 'Introducing Software through Video Stories', 'In this one-unit lab where coding meets film, software development teams from CS210 are paired with film students. This resulting cross-disciplinary group will create a short video that tells an engaging and creative story about the software developed by the team in CS210. The class will introduce students to principles of short form narrative storytelling and the visual language of film, as well as cover the technical principles of DSLR cinematography and non-linear editing. This course will offer students the experience of creating a film in partnership with a producing team.', 'Graphs', NULL),
(1, 'CS 211', 'Content Creation in Virtual Reality', 'Students are immersed in a cutting edge virtual reality development environment consisting of both hardware and software elements. Studentsnwill progress from configuring a comprehensive development environment to designing and implementing networked content in VR. The deep development focus is overlaid with a discussion series with leaders in the VR space to provide both breadth and depth to a student¿s understanding of the VR space. Prerequisites: \nCS 107 or equivalent. A strong software development background is required that includes comfort with C++. Design experience a plus.', NULL, NULL),
(1, 'CS 221', 'Artificial Intelligence: Principles and Techniques', 'Artificial intelligence (AI) has had a huge impact in many areas, including medical diagnosis, speech recognition, robotics, web search, advertising, and scheduling. This course focuses on the foundational concepts that drive these applications. In short, AI is the mathematics of making good decisions given incomplete information (hence the need for probability) and limited computation (hence the need for algorithms). Specific topics include search, constraint satisfaction, game playing, Markov decision processes, graphical models, machine learning, and logic. Prerequisites: \nCS 103 or \nCS 103B/X, \nCS 106B or \nCS 106X, \nCS 107, and \nCS 109 (algorithms, probability, and programming experience).', 'Game Design', NULL),
(1, 'CS 223A', 'Introduction to Robotics (ME 320)', 'Robotics foundations in modeling, design, planning, and control. Class covers relevant results from geometry, kinematics, statics, dynamics, motion planning, and control, providing the basic methodologies and tools in robotics research and applications. Concepts and models are illustrated through physical robot platforms, interactive robot simulations, and video segments relevant to historical research developments or to emerging application areas in the field. Recommended: matrix algebra.', 'Research', NULL),
(1, 'CS 224M', 'Multi-Agent Systems', 'For advanced undergraduates, and M.S. and beginning Ph.D. students. The course serves primarily as an introduction to game theory, including computational aspects. Topics: basic game representations and solution concepts, social choice and mechanism design, multi-agent learning, communication. Applications discussed as appropriate; emphasis is on conceptual matters and theoretical foundations. Prerequisites: very basic probability theory and optimization.', 'Game Design', NULL),
(1, 'CS 224N', 'Natural Language Processing (LINGUIST 284)', 'Methods for processing human language information and the underlying computational properties of natural languages. Syntactic and semantic processing from linguistic and algorithmic perspectives. Focus is on modern quantitative techniques in NLP: using large corpora, statistical models for acquisition, translation, and interpretation; and representative systems. Prerequisites: CS124 or \nCS121/221.', 'Natural Language Processing', NULL),
(1, 'CS 224S', 'Spoken Language Processing', 'Introduction to spoken language technology with an emphasis on dialogue and conversational systems. Automatic speech recognition, extraction of affect and social meaning from speech, speech synthesis, dialogue management, and applications to digital assistants, search, and recommender systems. Prerequisites: \nCS 124, 221, 224N, or 229.', NULL, NULL),
(1, 'CS 224U', 'Natural Language Understanding (LINGUIST 188, LINGUIST 288)', 'Project-oriented class focused on developing systems and algorithms for robust machine understanding of human language. Draws on theoretical concepts from linguistics, natural language processing, and machine learning. Topics include lexical semantics, distributed representations of meaning, relation extraction, semantic parsing, sentiment analysis, and dialogue agents, with special lectures on developing projects, presenting research results, and making connections with industry. Prerequisites: one of \nLINGUIST 180, \nCS 124, \nCS 224N, \nCS224S, or \nCS221; and logical/semantics such as \nLINGUIST 130A or B, \nCS 157, or \nPHIL150', 'Natural Language Processing', NULL),
(1, 'CS 224W', 'Social Information and Network Analysis', '(Formerly 322) How do diseases spread? Who are the influencers? How can we predict friends and enemies in a social network? How information flows and mutates as it is passed through networks? Behind each of these questions there is an intricate wiring diagram, a network, that defines the interactions between the components. And we will never understand these questions unless we understand the networks behind them. The course will cover recent research on the structure and analysis of such large social and information networks and on models and algorithms that abstract their basic properties. Class will explore how to practically analyze large-scale network data and how to reason about it through models for network structure and evolution. Topics include methods for link analysis and network community detection, diffusion and information propagation on the web, virus outbreak detection in networks, and connections with work in the social sciences and economics.', 'Networking', NULL),
(1, 'CS 225A', 'Experimental Robotics', 'Hands-on laboratory course experience in robotic manipulation. Topics include robot kinematics, dynamics, control, compliance, sensor-based collision avoidance, and human-robot interfaces. Second half of class is devoted to final projects using various robotic platforms to build and demonstrate new robot task capabilities. Previous projects include the development of autonomous robot behaviors of drawing, painting, playing air hocket, yoyo, basketball, ping-pong or xylophone. Prerequisites: 223A or equivalent.', NULL, NULL),
(1, 'CS 225B', 'Robot Programming Laboratory', 'For robotics and non-robotics students. Students program mobile robots to exhibit increasingly complex behavior (simple dead reckoning and reactivity, goal-directed motion, localization, complex tasks). Topics: motor control and sensor characteristics; sensor fusion, model construction, and robust estimation; control regimes (subsumption, potential fields); probabalistic methods, including Markov localization and particle filters. Student programmed robot contest. Programming is in C++ on Unix machines, done in teams. Prerequisite: programming at the level of 106B, 106X, 205, or equivalent.', NULL, NULL),
(1, 'CS 227B', 'General Game Playing', 'A general game playing system accepts a formal description of a game to play it without human intervention or algorithms designed for specific games. Hands-on introduction to these systems and artificial intelligence techniques such as knowledge representation, reasoning, learning, and rational behavior. Students create GGP systems to compete with each other and in external competitions. Prerequisite: programming experience. Recommended: 103 or equivalent.', 'Game Design', NULL),
(1, 'CS 228', 'Probabilistic Graphical Models: Principles and Techniques', 'Probabilistic graphical modeling languages for representing complex domains, algorithms for reasoning using these representations, and learning these representations from data. Topics include: Bayesian and Markov networks, extensions to temporal modeling such as hidden Markov models and dynamic Bayesian networks, exact and approximate probabilistic inference algorithms, and methods for learning models from data. Also included are sample applications to various domains including speech recognition, biological modeling and discovery, medical diagnosis, message encoding, vision, and robot motion planning. Prerequisites: basic probability theory and algorithm design and analysis.', 'Graphs', NULL),
(1, 'CS 229', 'Machine Learning (STATS 229)', 'Topics: statistical pattern recognition, linear and non-linear regression, non-parametric methods, exponential family, GLMs, support vector machines, kernel methods, model/feature selection, learning theory, VC dimension, clustering, density estimation, EM, dimensionality reduction, ICA, PCA, reinforcement learning and adaptive control, Markov decision processes, approximate dynamic programming, and policy search. Prerequisites: linear algebra, and basic probability and statistics.', 'Machine Learning', NULL),
(1, 'CS 229T', 'Statistical Learning Theory (STATS 231)', '(Same as \nSTATS 231) How do we formalize what it means for an algorithm to learn from data? This course focuses on developing mathematical tools for answering this question. We will present various common learning algorithms and prove theoretical guarantees about them. Topics include online learning, kernel methods, generalization bounds (uniform convergence), and spectral methods. Prerequisites: A solid background in linear algebra and probability theory, statistics and machine learning (\nSTATS 315A or \nCS 229). Convex optimization (\nEE 364a) is helpful but not required.', 'Machine Learning', NULL),
(1, 'CS 22A', 'The Social & Economic Impact of Artificial Intelligence', 'Recent advances in computing may place us at the threshold of a unique turning point in human history. Soon we are likely to entrust management of our environment, economy, security, infrastructure, food production, healthcare, and to a large degree even our personal activities, to artificially intelligent computer systems. The prospect of "turning over the keys" to increasingly autonomous systems raises many complex and troubling questions. How will society respond as versatile robots and machine-learning systems displace an ever-expanding spectrum of blue- and white-collar workers? Will the benefits of this technological revolution be broadly distributed or accrue to a lucky few? How can we ensure that these systems respect our ethical principles when they make decisions at speeds and for rationales that exceed our ability to comprehend? What, if any, legal rights and responsibilities should we grant them? And should we regard them merely as sophisticated tools or as a newly emerging form of life? The goal of CS22 is to equip students with the intellectual tools, ethical foundation, and psychological framework to successfully navigate the coming age of intelligent machines.', 'Artificial Intelligence', NULL),
(1, 'CS 231A', 'Computer Vision: From 3D Reconstruction to Recognition', '(Formerly 223B) An introduction to the concepts and applications in computer vision. Topics include: cameras and projection models, low-level image processing methods such as filtering and edge detection; mid-level vision topics such as segmentation and clustering; shape reconstruction from stereo, as well as high-level vision tasks such as object recognition, scene recognition, face detection and human motion categorization. Prerequisites: linear algebra, basic probability and statistics.', 'Statistics', NULL),
(1, 'CS 231B', 'The Cutting Edge of Computer Vision', '(Formerly 223C) More than one-third of the brain is engaged in visual processing, the most sophisticated human sensory system. Yet visual recognition technology has fundamentally influenced our lives on the same scale and scope as text-based technology has, thanks to Google, Twitter, Facebook, etc. This course is designed for those students who are interested in cutting edge computer vision research, and/or are aspiring to be an entrepreneur using vision technology. Course will guide students through the design and implementation of three core vision technologies: segmentation, detection and classification on three highly practical, real-world problems. Course will focus on teaching the fundamental theory, detailed algorithms, practical engineering insights, and guide them to develop state-of-the-art systems evaluated based on the most modern and standard benchmark datasets. Prerequisites: CS2223B or equivalent and a good machine learning background (i.e. \nCS221, \nCS228, \nCS229). Fluency in Matlab and C/C++.', 'Machine Learning', NULL);
INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(1, 'CS 231N', 'Convolutional Neural Networks for Visual Recognition', 'Computer Vision has become ubiquitous in our society, with applications innsearch, image understanding, apps, mapping, medicine, drones, andnself-driving cars. Core to many of these applications are the tasks of image classification, localization and detection. This course is a deep dive into details of neural network architectures with a focus on learning end-to-end models for these tasks, particularly image classification. During the 10-week course, students will learn to implement, train and debug their own neural networks and gain a detailed understanding of cutting-edge research in computer vision. The final assignment will involve training a multi-million parameter convolutional neural network and applying it on the largest image classification dataset (ImageNet). We will focus on teaching how to set up the problem of image recognition, the learning algorithms (e.g. backpropagation), practical engineering tricks for training and fine-tuning the networks and guide the students through hands-on assignments and a final course project. Much of the background and materials of this course will be drawn from the ImageNet Challenge: \nhttp://image-net.org/challenges/LSVRC/2014/index. Prerequisites: Proficiency in Python; familiarity with C/C++; \nCS 131 and \nCS 229 or equivalents; \nMath 21 or equivalent, linear algebra.', 'Neural Algorithms', NULL),
(1, 'CS 232', 'Digital Image Processing (EE 368)', 'Image sampling and quantization color, point operations, segmentation, morphological image processing, linear image filtering and correlation, image transforms, eigenimages, multiresolution image processing, noise reduction and restoration, feature extraction and recognition tasks, image registration. Emphasis is on the general principles of image processing. Students learn to apply material by implementing and investigating image processing algorithms in Matlab and optionally on Android mobile devices. Term project. Recommended: \nEE261, \nEE278.', NULL, NULL),
(1, 'CS 233', 'The Shape of Data: Geometric and Topological Data Analysis (CME 251)', 'Mathematical computational tools for the analysis of data with geometric content, such images, videos, 3D scans, GPS traces -- as well as for other data embedded into geometric spaces. Global and local geometry descriptors allowing for various kinds of invariances. The rudiments of computational topology and persistent homology on sampled spaces. Clustering and other unsupervised techniques. Spectral methods for geometric data analysis. Non-linear dimensionality reduction. Alignment, matching, and map computation between geometric data sets. Function spaces and functional maps.Networks of data sets and joint analysis for segmentation and labeling. The emergence of abstractions or concepts from data. Prerequisites: discrete algorithms at the level of 161; linear algebra at the level of CM103.', 'Embedded Systems', NULL),
(1, 'CS 238', 'Decision Making under Uncertainty (AA 228)', 'This course is designed to increase awareness and appreciation for why uncertainty matters, particularly for aerospace applications. Introduces decision making under uncertainty from a computational perspective and provides an overview of the necessary tools for building autonomous and decision-support systems. Following an introduction to probabilistic models and decision theory, the course will cover computational methods for solving decision problems with stochastic dynamics, model uncertainty, and imperfect state information. Topics include: Bayesian networks, influence diagrams, dynamic programming, reinforcement learning, and partially observable Markov decision processes. Applications cover: air traffic control, aviation surveillance systems, autonomous vehicles, and robotic planetary exploration. Prerequisites: basic probability and fluency in a high-level programming language.', 'Networking', NULL),
(1, 'CS 239', 'Advanced Topics in Sequential Decision Making (AA 229)', 'Survey of recent research advances in intelligent decision making for dynamic environments from a computational perspective. Efficient algorithms for single and multiagent planning in situations where a model of the environment may or may not be known. Partially observable Markov decision processes, approximate dynamic programming, and reinforcement learning. New approaches for overcoming challenges in generalization from experience, exploration of the environment, and model representation so that these methods can scale to real problems in a variety of domains including aerospace, air traffic control, and robotics. Students are expected to produce an original research paper on a relevant topic. Prerequisites: \nAA 228/\nCS 238 or \nCS 221.', 'Research', NULL),
(1, 'CS 240', 'Advanced Topics in Operating Systems', 'Recent research. Classic and new papers. Topics: virtual memory management, synchronization and communication, file systems, protection and security, operating system extension techniques, fault tolerance, and the history and experience of systems programming. Prerequisite: 140 or equivalent.', 'Security', NULL),
(1, 'CS 240H', 'Functional Systems in Haskell', 'Covers an array of practical issues and techniques that arise when building real-world systems in the Haskell programming language. Topics include the basics of Haskell, laziness, monads, parsers, testing and debugging, performance tuning, interfacing to native code, concurrency and I/O paradigms, language extensions, meta-programming, and applications to the web and security. Concepts will be reinforced through a few individual programming assignments followed by a larger team project. Prior familiarity with Haskell may be helpful but is not required. Prerequisites: CS106B or 106X.', 'Security', NULL),
(1, 'CS 241', 'Embedded Systems Workshop', 'Project-centric building hardware and software for embedded computing systems. Students work on an existing project of their own or join one of these projects. Syllabus topics will be determined by the needs of the enrolled students and projects. Examples of topics include: interrupts and concurrent programming, deterministic timing and synchronization, state-based programming models, filters, frequency response, and high-frequency signals, low power operation, system and PCB design, security, and networked communication. Prerequisite: \nCS107 (or equivalent).', 'Embedded Systems', NULL),
(1, 'CS 242', 'Programming Languages', 'Central concepts in modern programming languages, impact on software development, language design trade-offs, and implementation considerations. Functional, imperative, and object-oriented paradigms. Formal semantic methods and program analysis. Modern type systems, higher order functions and closures, exceptions and continuations. Modularity, object-oriented languages, and concurrency. Runtime support for language features, interoperability, and security issues. Prerequisite: 107, or experience with Lisp, C, and an object-oriented language.', 'Security', NULL),
(1, 'CS 243', 'Program Analysis and Optimizations', 'Program analysis techniques used in compilers and software development tools to improve productivity, reliability, and security. The methodology of applying mathematical abstractions such as graphs, fixpoint computations, binary decision diagrams in writing complex software, using compilers as an example. Topics include data flow analysis, instruction scheduling, register allocation, parallelism, data locality, interprocedural analysis, and garbage collection. Prerequisites: 103 or 103B, and 107.', 'Graphs', NULL),
(1, 'CS 244', 'Advanced Topics in Networking', 'Classic papers, new ideas, and research papers in networking. Architectural principles: naming, addressing, routing; congestion control, traffic management, QoS; wireless and mobility; overlay networks and virtualization; network security; switching and routing; content distribution; and proposals for future Internet structures. Prerequisite: 144 or equivalent.', 'Networking', NULL),
(1, 'CS 244B', 'Distributed Systems', 'Distributed operating systems and applications issues, emphasizing high-level protocols and distributed state sharing as the key technologies. Topics: distributed shared memory, object-oriented distributed system design, distributed directory services, atomic transactions and time synchronization, application-sufficient consistency, file access, process scheduling, process migration, and storage/communication abstractions on distribution, scale, robustness in the face of failure, and security. Prerequisites: \nCS 144 and \nCS 249A.', 'Distributed Applications', NULL),
(1, 'CS 244C', 'Readings and Projects in Distributed Systems', 'Companion project option for 244B. Corequisite: 244B.', 'Distributed Applications', NULL),
(1, 'CS 245', 'Database Systems Principles', 'File organization and access, buffer management, performance analysis, and storage management. Database system architecture, query optimization, transaction management, recovery, concurrency control. Reliability, protection, and integrity. Design and management issues. Prerequisites: 145, 161.', 'Databases', NULL),
(1, 'CS 246', 'Mining Massive Data Sets', 'The course will discuss data mining and machine learning algorithms for analyzing very large amounts of data. The emphasis will be on Map Reduce as a tool for creating parallel algorithms that can process very large amounts of data. Topics include: Frequent itemsets and Association rules, Near Neighbor Search in High Dimensional Data, Locality Sensitive Hashing (LSH), Dimensionality reduction, Recommender Systems, Clustering, Link Analysis, Large-scale machine learning, Data streams, Analysis of Social-network Graphs, and Web Advertising. Prerequisites: At lease one of CS107 or \nCS145; At least one of CS109 or STAT116, or equivalent.', 'Graphs', NULL),
(1, 'CS 246H', 'Mining Massive Data Sets Hadoop Lab', 'Supplement to \nCS 246 providing additional material on Hadoop. Students will learn how to implement data mining algorithms using Hadoop, how to implement and debug complex MapReduce jobs in Hadoop, and how to use some of the tools in the Hadoop ecosystem for data mining and machine learning. Topics: Hadoop, MapReduce, HDFS, combiners, secondary sort, distributed cache, SQL on Hadoop, Hive, Cloudera ML/Oryx, Mahout, Hadoop streaming, implementing Hadoop jobs, debugging Hadoop jobs, TF-IDF, Pig, Sqoop, Oozie, HBase, Impala. Prerequisite: \nCS 107 or equivalent.', 'Machine Learning', NULL),
(1, 'CS 247', 'Human-Computer Interaction Design Studio', 'Project-based focus on interaction design process, especially early-stage design and rapid prototyping. Methods used in interaction design including needs analysis, user observation, sketching, concept generation, scenario building, and evaluation. Prerequisites: 147 or equivalent background in design thinking; 106B or equivalent background in programming. Recommended: \nCS 142 or equivalent background in web programming', NULL, NULL),
(1, 'CS 247L', 'Human Computer Interaction Technology Laboratory', 'Hands-on introduction to contemporary HCI technologies. Interaction design with Adobe Flash, mobile development, physical computing, and web applications. Corequisite: 247.', NULL, NULL),
(1, 'CS 248', 'Interactive Computer Graphics', 'This is the second course in the computer graphics sequence, and as such it assumes a strong familiarity with rendering and image creation. The course has a strong focus on computational geometry, animation, and simulation. Topics include splines, implicit surfaces, geometric modeling, collision detection, animation curves, particle systems and crowds, character animation, articulation, skinning, motion capture and editing, rigid and deformable bodies, and fluid simulation. As a final project, students implement an interactive video game utilizing various concepts covered in the class. Games may be designed on mobile devices, in a client/server/browser environment, or on a standard personal computer. Prerequisite: \nCS148.', 'Game Design', NULL),
(1, 'CS 249A', 'Object-Oriented Programming from a Modeling and Simulation Perspective', 'Topics: large-scale software development approaches for complex applications, class libraries and frameworks; encapsulation, use of inheritance and dynamic dispatch, design of interfaces and interface/implementation separation, exception handling, smart pointers and reference management, minimalizing dependencies and value-oriented programming. Inheritance: when and why multiple inheritance naming, directories, manager, and disciplined use of design patterns including functors, event notification and iterators. Prerequisites: C, C++, and programming methodology as developed in 106B or X, and 107 (107 may be taken concurrently). Recommended: 193D.', NULL, NULL),
(1, 'CS 249B', 'Large-scale Software Development', 'Software engineering of high quality large-scale complex software with a focus on evolvability, performance and cost. Software development processes, people and practice; audit: integrating invariant checks with production software; concurrency with modular object-oriented programming; collection implementation; generic programming and templates; design of value types; named descriptions for large value types; memory management; controlling placement, locality and consumption; run-time vs. static type checking and identification.', NULL, NULL),
(1, 'CS 251', 'Bitcoin and Crypto Currencies', 'For advanced undergraduates and for graduate students. The potential applications for Bitcoin-like technologies is enormous. The course will cover the technical aspects of crypto-currencies, blockchain technologies, and distributed consensus. Students will learn how these systems work and how to engineer secure software that interacts with the Bitcoin network and other crypto currencies. Prerequisite: \nCS110. Recommended: \nCS255.', 'Cryptology', NULL),
(1, 'CS 251P', 'Bitcoin & Crypto Currencies Lab', 'Bitcoin has the potential to change how payments are done on the Internet and beyond. In this class, you will build Bitcoin-powered versions of many of the most popular internet services. For example, you will build a search engine that takes in a small amount of bitcoin for each query, a social network that allows individuals to buy internet celebrity endorsements for bitcoin, and a content site that charges a small amount of bitcoin for each page view. In each case, we will show how Bitcoin micropayments can supplant or complement the traditional ad-supported model. The course is based on a weekly hackathon; each Monday you will receive some stub code illustrating the basic mechanics of a Bitcoin-powered internet service, and you will improve this as best you can as an individual or in a small group by the end of Sunday on that week. Winners of each week''s hackathon will be recognized. Prerequisites: No previous Bitcoin knowledge is required. Students who have taken CS251 or CS251P will have more context, but this course is all new material. Recommended: Intensive programming experience at the level of CS107 or above.', 'Cryptology', NULL),
(1, 'CS 255', 'Introduction to Cryptography', 'For advanced undergraduates and graduate students. Theory and practice of cryptographic techniques used in computer security. Topics: encryption (symmetric and public key), digital signatures, data integrity, authentication, key management, PKI, zero-knowledge protocols, and real-world applications. Prerequisite: basic probability theory.', 'Graphs', NULL),
(1, 'CS 261', 'Optimization and Algorithmic Paradigms', 'Algorithms for network optimization: max-flow, min-cost flow, matching, assignment, and min-cut problems. Introduction to linear programming. Use of LP duality for design and analysis of algorithms. Approximation algorithms for NP-complete problems such as Steiner Trees, Traveling Salesman, and scheduling problems. Randomized algorithms. Introduction to online algorithms. Prerequisite: 161 or equivalent.', 'Optimization', NULL),
(1, 'CS 262', 'Computational Genomics (BIOMEDIN 262)', 'Applications of computer science to genomics, and concepts in genomics from a computer science point of view. Topics: dynamic programming, sequence alignments, hidden Markov models, Gibbs sampling, and probabilistic context-free grammars. Applications of these tools to sequence analysis: comparative genomics, DNA sequencing and assembly, genomic annotation of repeats, genes, and regulatory sequences, microarrays and gene expression, phylogeny and molecular evolution, and RNA structure. Prerequisites: 161 or familiarity with basic algorithmic concepts. Recommended: basic knowledge of genetics.', 'CS', NULL),
(1, 'CS 263', 'Algorithms for Modern Data Models (MS&E 317)', 'We traditionally think of algorithms as running on data available in a single location, typically main memory. In many modern applications including web analytics, search and data mining, computational biology, finance, and scientific computing, the data is often too large to reside in a single location, is arriving incrementally over time, is noisy/uncertain, or all of the above. Paradigms such as map-reduce, streaming, sketching, Distributed Hash Tables, Bulk Synchronous Processing, and random walks have proved useful for these applications. This course will provide an introduction to the design and analysis of algorithms for these modern data models. Prerequisite: Algorithms at the level of \nCS 261.', NULL, NULL),
(1, 'CS 265', 'Randomized Algorithms and Probabilistic Analysis (CME 309)', 'Randomness pervades the natural processes around us, from the formation of networks, to genetic recombination, to quantum physics. Randomness is also a powerful tool that can be leveraged to create algorithms and data structures which, in many cases, are more efficient and simpler than their deterministic counterparts. This course covers the key tools of probabilistic analysis, and application of these tools to understand the behaviors of random processes and algorithms. Emphasis is on theoretical foundations, though we will apply this theory broadly, discussing applications in machine learning and data analysis, networking, and systems. Topics include tail bounds, the probabilistic method, Markov chains, and martingales, with applications to analyzing random graphs, metric embeddings, random walks, and a host of powerful and elegant randomized algorithms. Prerequisites: \nCS 161 and STAT 116, or equivalents and instructor consent.', 'Graphs', NULL),
(1, 'CS 267', 'Graph Algorithms', 'An introduction to advanced topics in graph algorithms. Focusing on a variety of graph problems, the course will explore topics such as small space graph data structures, approximation algorithms, dynamic algorithms, and algorithms for special graph classes. Topics include: approximation algorithms for shortest paths and graph matching, distance oracles, graph spanners, cliques and graph patterns, dynamic algorithms, graph coloring, algorithms for planar graphs. Prerequisites: 161 or the equivalent mathematical maturity.', 'Graphs', NULL),
(1, 'CS 27', 'Literature and Social Online Learning (COMPLIT 239B, ENGLISH 239B)', 'Study, develop, and test new digital methods, games, apps, interactive social media uses to innovate how the humanities can engage and educate students and the public today. Exploring well-known literary texts, digital storytelling forms and literary communities online, students work individually and in interdisciplinary teams to develop innovative projects aimed at bringing literature to life. Tasks include literary role-plays on Twitter; researching existing digital pedagogy and literary projects, games, and apps; reading and coding challenges; collaborative social events mediated by new technology. Minimal prerequisites which vary for students in CS and the humanities; please check with instructors.', 'Game Design', NULL),
(1, 'CS 270', 'Modeling Biomedical Systems: Ontology, Terminology, Problem Solving (BIOMEDIN 210)', 'Methods for modeling biomedical systems and for making those models explicit in the context of building software systems. Emphasis is on intelligent systems for decision support and Semantic Web applications. Topics: knowledge representation, controlled terminologies, ontologies, reusable problem solvers, and knowledge acquisition. Recommended: exposure to object-oriented systems, basic biology.', NULL, NULL),
(1, 'CS 272', 'Introduction to Biomedical Informatics Research Methodology (BIOE 212, BIOMEDIN 212, GENE 212)', 'Hands-on software building. Student teams conceive, design, specify, implement, evaluate, and report on a software project in the domain of biomedicine. Creating written proposals, peer review, providing status reports, and preparing final reports. Guest lectures from professional biomedical informatics systems builders on issues related to the process of project management. Software engineering basics. Because the team projects start in the first week of class, attendance that week is strongly recommended. Prerequisites: \nBIOMEDIN 210 or 211 or 214 or 217 or consent of instructor.', 'Research', NULL),
(1, 'CS 273A', 'A Computational Tour of the Human Genome (BIOMEDIN 273A, DBIO 273A)', 'Introduction to computational biology through an informatic exploration of the human genome. Topics include: genome sequencing (technologies, assembly, personalized sequencing); functional landscape (genes, gene regulation, repeats, RNA genes, epigenetics); genome evolution (comparative genomics, ultraconservation, co-option). Additional topics may include population genetics, personalized genomics, and ancient DNA. Course includes primers on molecular biology, the UCSC Genome Browser, and text processing languages. Guest lectures from genomic researchers. No prerequisites. See \nhttp://cs273a.stanford.edu/.', 'Databases', NULL),
(1, 'CS 274', 'Representations and Algorithms for Computational Molecular Biology (BIOE 214, BIOMEDIN 214, GENE 214)', 'Topics: introduction to bioinformatics and computational biology, algorithms for alignment of biological sequences and structures, computing with strings, phylogenetic tree construction, hidden Markov models, Gibbs Sampling, basic structural computations on proteins, protein structure prediction, protein threading techniques, homology modeling, molecular dynamics and energy minimization, statistical analysis of 3D biological data, integration of data sources, knowledge representation and controlled terminologies for molecular biology, microarray analysis, machine learning (clustering and classification), and natural language text processing. Prerequisites: programming skills; consent of instructor for 3 units.', 'Machine Learning', NULL),
(1, 'CS 275', 'Translational Bioinformatics (BIOMEDIN 217)', 'Analytic, storage, and interpretive methods to optimize the transformation of genetic, genomic, and biological data into diagnostics and therapeutics for medicine. Topics: access and utility of publicly available data sources; types of genome-scale measurements in molecular biology and genomic medicine; analysis of microarray data; analysis of polymorphisms, proteomics, and protein interactions; linking genome-scale data to clinical data and phenotypes; and new questions in biomedicine using bioinformatics. Case studies. Prerequisites: programming ability at the level of \nCS 106A and familiarity with statistics and biology.', 'Statistics', NULL),
(1, 'CS 275A', 'Symbolic Musical Information (MUSIC 253)', 'Focus on symbolic data for music applications including advanced notation systems, optical music recognition, musical data conversion, and internal structure of MIDI files.', NULL, NULL),
(1, 'CS 275B', 'Music Query, Analysis, and Style Simulation (MUSIC 254)', 'Leveraging off three synchronized sets of symbolic data resources for notation and analysis, the lab portion introduces students to the open-source Humdrum Toolkit for music representation and analysis. Issues of data content and quality as well as methods of information retrieval, visualization, and summarization are considered in class. Grading based primarily on student projects. Prerequisite: 253 or consent of instructor.', NULL, NULL),
(1, 'CS 276', 'Information Retrieval and Web Search (LINGUIST 286)', 'Text information retrieval systems; efficient text indexing; Boolean, vector space, and probabilistic retrieval models; ranking and rank aggregation; evaluating IR systems. Text clustering and classification: classification algorithms, latent semantic indexing, taxonomy induction; Web search engines including crawling and indexing, link-based algorithms, and web metadata. Prerequisites: \nCS 107, \nCS 109, \nCS 161.', NULL, NULL),
(1, 'CS 277', 'Experimental Haptics', 'Computer haptics is the discipline of synthesizing touch feedback in simulated or virtual environments. Course objective is to study and develop computational methods for generating force feedback through haptic interfaces. Theoretical topics: haptic rendering in 3-D virtual environments, simulation of haptic interaction with rigid and deformable objects, haptic interfaces, psychophysics of touch. Applied topics: CHAI3D haptic library, implementation of algorithms for haptic rendering, collision detection, and deformable body simulation. Guest speakers; Lab/programming exercises; open-ended final project. Enrollment limited to 20. Prerequisite: experience with C++. Recommended: 148 or 248, 223A.', NULL, NULL),
(1, 'CS 279', 'Computational Biology: Structure and Organization of Biomolecules and Cells (BIOMEDIN 279, BIOPHYS 279, CME 279)', 'Computational approaches to understanding the three-dimensional spatial organization of biological systems and how that organization evolves over time. The course will cover cutting-edge research in both physics-based simulations and computational analysis of experimental data, at scales ranging from individual molecules to multiple cells. Prerequisites: elementary programming background (106A or equivalent) and an introductory course in biology or biochemistry.', 'Research', NULL),
(1, 'CS 294A', 'Research Project in Artificial Intelligence', 'Student teams under faculty supervision work on research and implementation of a large project in AI. State-of-the-art methods related to the problem domain. Prerequisites: AI course from 220 series, and consent of instructor.', 'Artificial Intelligence', NULL),
(1, 'CS 294H', 'Research Project in Human-Computer Interaction', 'Student teams under faculty supervision work on research and implementationnof a large project in HCI. State-of-the-art methods related to the problemndomain. Prerequisites \nCS 377, 147, 247, or permission from instructor.', 'Research', NULL),
(1, 'CS 294S', 'Research Project in Software Systems and Security', 'Topics vary. Focus is on emerging research themes such as programmable open mobile Internet that spans multiple system topics such as human-computer interaction, programming systems, operating systems, networking, and security. May be repeated for credit. Prerequisites: \nCS 103 and 107.', 'Networking', NULL),
(1, 'CS 294W', 'Writing Intensive Research Project in Computer Science', 'Restricted to Computer Science and Computer Systems Engineering undergraduates. Students enroll in the \nCS 294W section attached to the \nCS 294 project they have chosen.', 'Research', NULL),
(1, 'CS 295', 'Software Engineering', 'Software specification, testing, and verification. Emphasis is on current best practices and technology for developing reliable software at reasonable cost. Assignments focus on applying these techniques to realistic software systems. Prerequisites: 108. Recommended a project course such as 140, 143, or 145.', NULL, NULL),
(1, 'CS 29N', 'Computational Decision Making', 'Although we make decisions every day, many people base their decisions on initial reactions or ""gut"" feelings. There are, however, powerful frameworks for making decisions more effectively based on computationally analyzing the choices available and their possible outcomes. In this course we give an introduction to some of these frameworks, including utility theory, decision analysis, and game theory. We also discuss why people sometimes make seemingly reasonable, yet irrational, decisions. We begin the class by presenting some of the basics of probability theory, which serves as the main mathematical foundation for the decision making frameworks we will subsequently present. Although we provide a mathematical/computational basis for the decision making frameworks we examine, we also seek to give intuitive (and sometimes counterintuitive) explanations for actual decision making behavior through in-class demonstrations. No prior experience with probability theory is needed (we''ll cover what you need to know in class), but students should be comfortable with mathematical manipulation at the level of \nMath 20 or \nMath 41.', 'Game Design', NULL),
(1, 'CS 2C', 'Introduction to Media Production', 'Sound, image and video editing techniques and applications, best practices and information regarding Stanford media support. Technical topics will cover Photoshop, iMovie and Garageband. Weekly pre-class online tutorials followed by weekly group work and peer critiques. Not a programming course, but will use computer multimedia applications heavily for editing.', NULL, NULL),
(1, 'CS 300', 'Departmental Lecture Series', 'Priority given to first-year Computer Science Ph.D. students. CS Masters students admitted if space is available. Presentations by members of the department faculty, each describing informally his or her current research interests and views of computer science as a whole.', 'Research', NULL),
(1, 'CS 309', 'Industrial Lectureships in Computer Science', 'Guest computer scientist. By arrangement. May be repeated for credit.', 'CS', NULL),
(1, 'CS 309A', 'Cloud Computing', 'For science, engineering, business, medicine, and law students. Cloud computing is bringing information systems out of the back office and making it core to the entire economy. This class is intended for all students who want to begin to understand the implications of this shift in technology. Guest industry experts are public company CEOs who are delivering application, software development, operations management, compute, storage & data center, and network cloud services.', NULL, NULL),
(1, 'CS 315A', 'Parallel Computer Architecture and Programming', 'The principles and tradeoffs in the design of parallel architectures. Emphasis is on naming, latency, bandwidth, and synchronization in parallel machines. Case studies on shared memory, message passing, data flow, and data parallel machines illustrate techniques. Architectural studies and lectures on techniques for programming parallel computers. Programming assignments on one or more commercial multiprocessors. Prerequisites: \nEE 282, and reasonable programming experience.', 'Computer Architecture', NULL),
(1, 'CS 315B', 'Parallel Computing Research Project', 'Advanced topics and new paradigms in parallel computing including parallel algorithms, programming languages, runtime environments, library debugging/tuning tools, and scalable architectures. Research project. Prerequisite: consent of instructor.', 'Research', NULL),
(1, 'CS 316', 'Advanced Multi-Core Systems', 'In-depth coverage of the architectural techniques used in modern, multi-core chips for mobile and server systems. Advanced processor design techniques (superscalar cores, VLIW cores, multi-threaded cores, energy-efficient cores), cache coherence, memory consistency, vector processors, graphics processors, heterogeneous processors, and hardware support for security and parallel programming. Students will become familiar with complex trade-offs between performance-power-complexity and hardware-software interactions. A central part of CS316 is a project on an open research question on multi-core technologies. Prerequisites: \nEE 180 (formerly 108B). Recommended: \nCS 149, \nEE 282.', 'Graphs', NULL),
(1, 'CS 319', 'Topics in Digital Systems', 'Advanced material is often taught for the first time as a topics course, perhaps by a faculty member visiting from another institution. May be repeated for credit.', NULL, NULL),
(1, 'CS 325', 'Topics in Computational Sustainability', 'Computational Sustainability focuses on developing computational models, methods and tools for sustainable development. In this course, we will study recent computational approaches that have contributed to addressing sustainability topics related to biodiversity, climate, environment, urban design, transportation, buildings and others. Computational themes include machine learning, optimization, statistical modeling, and data mining.', 'Machine Learning', NULL),
(1, 'CS 327A', 'Advanced Robotic Manipulation', 'Advanced control methodologies and novel design techniques for complex human-like robotic and bio mechanical systems. Class covers the fundamentals in operational space dynamics and control, elastic planning, human motion synthesis. Topics include redundancy, inertial properties, haptics, simulation, robot cooperation, mobile manipulation, human-friendly robot design, humanoids and whole-body control. Additional topcs in emerging areas are presented by groups of students at the end-of-quarter mini-symposium. Prerequisites: 223A or equivalent.', 'Object Oriented Programming', NULL),
(1, 'CS 328', 'Topics in Computer Vision', 'Fundamental issues of, and mathematical models for, computer vision. Sample topics: camera calibration, texture, stereo, motion, shape representation, image retrieval, experimental techniques. May be repeated for credit. Prerequisites: 205, 223B, or equivalents.', NULL, NULL),
(1, 'CS 329', 'Topics in Artificial Intelligence', 'Advanced material is often taught for the first time as a topics course, perhaps by a faculty member visiting from another institution. May be repeated for credit.', 'Artificial Intelligence', NULL),
(1, 'CS 331A', 'Advanced Reading in Computer Vision', '(Formerly \nCS323) The field of computer vision has seen an explosive growth in past decade. Much of recent effort in vision research is towards developing algorithms that can perform high-level visual recognization tasks on real-world images and videos. With development of Internet, this task becomes particularly challenging and interesting given the heterogeneous data on the web. Course will focus on reading recent research papers that are focused on solving high-level visual recognition problems, such as object recognition and categorization, scene understanding, human motion understanding, etc. Project required. Prerequisite: some experience in research with one of the following fields: computer vision, image processing, computer graphics, machine learning.', 'Graphs', NULL),
(1, 'CS 331B', '3D Representation and Recognition', 'The course surveys recent developments in high level and 3D computer vision and will focus on reading recent research papers on topics related to 3D object recognition and representation, spatial inference, activity understanding, human vision and 3D perception. The course is inspired by a famous series of workshops (called 3d-RR) which have been offered during the International Conference in Computer Vision (ICCV) since 2007. Prerequisites - Some experience in research with one of the following fields: computer vision, image processing, computer graphics, machine learning.', 'Graphs', NULL),
(1, 'CS 334A', 'Convex Optimization I (CME 364A, EE 364A)', 'Convex sets, functions, and optimization problems. The basics of convex analysis and theory of convex programming: optimality conditions, duality theory, theorems of alternative, and applications. Least-squares, linear and quadratic programs, semidefinite programming, and geometric programming. Numerical algorithms for smooth and equality constrained problems; interior-point methods for inequality constrained problems. Applications to signal processing, communications, control, analog and digital circuit design, computational geometry, statistics, machine learning, and mechanical engineering. Prerequisite: linear algebra such as \nEE263, basic probability.', 'Machine Learning', NULL),
(1, 'CS 340', 'Topics in Computer Systems', 'Topics vary every quarter, and may include advanced material being taught for the first time. May be repeated for credit.', NULL, NULL),
(1, 'CS 341', 'Project in Mining Massive Data Sets', 'Team project in data-mining of very large-scale data, including the problem statement and implementation and evaluation of a solution. Teams consist of three students each, and they will meet regularly with a "coach" chosen from participating staff. Early lectures will cover the use of Amazon EC2 and certain systems like Hadoop and Hive. Occasional lectures thereafter will feature outside speakers, special topics of interest, and progress reports by the teams.', 'Object Oriented Programming', NULL),
(1, 'CS 344', 'Topics in Computer Networks', 'High-performance embedded system design. Student teams of two software engineers (C experience required) and one hardward engineer (Verilog experience required) build a fully functioning Internet router Work in teams of three. How router interoperates with others in class. Open-ended design challenge judged by panel of industry experts. Prerequisites: \nCS 144, 244, or network programming experience.', 'Embedded Systems', NULL),
(1, 'CS 344E', 'Advanced Wireless Networks', 'Networking research in wireless systems. Topics include: multi-channel/multi-radio systems, routing, coding, physical layer hints, low power, mesh networking, interference cancellation, technological trends, and protocol design. Students implement and test research ideas on SWAN, a WiFi testbed.', 'Networking', NULL),
(1, 'CS 344G', 'Network Application Studio', 'Graduate project class on computer networking, emphasizing end-to-end applications and protocols. Students will propose and execute an original project in teams of 2-3, culminating in a final writeup and presentation/demonstration. Each week, students will read, present, and lead a discussion about a seminal paper or system. Prerequisites: programming experience.', 'Networking', NULL),
(1, 'CS 346', 'Database System Implementation', 'A major database system implementation project realizes the principles and techniques covered in earlier courses. Students independently build a complete database management system, from file structures through query processing, with a personally designed feature or extension. Lectures on project details and advanced techniques in database system implementation, focusing on query processing and optimization. Guest speakers from industry on commercial DBMS implementation techniques. Prerequisites: 145, 245, programming experience in C++.', 'Databases', NULL),
(1, 'CS 347', 'Parallel and Distributed Data Management', 'The principles and system organization of distributed and parallel databases. Data fragmentation and distribution, distributed database design, query processing and optimization, distributed concurrency control, reliability and commit protocols, and replicated data management. Data management in peer-to-peer systems. Data management in the "cloud" using map-reduce and other massive parallelism techniques.', 'Distributed Applications', NULL),
(1, 'CS 348A', 'Computer Graphics: Geometric Modeling', 'The mathematical tools needed for the geometrical aspects of computer graphics and especially for modeling smooth shapes. Fundamentals: homogeneous coordinates, transformations, and perspective. Theory of parametric and implicit curve and surface models: polar forms, Bézier arcs and de Casteljau subdivision, continuity constraints, B-splines, tensor product, and triangular patch surfaces. Subdivision surfaces and multi-resolution representations of geometry. Representations of solids and conversions among them. Surface reconstruction from scattered data points. Geometry processing on meshes, including simplification and parameterization. Prerequisite: linear algebra. Recommended: 248.', 'Graphs', NULL),
(1, 'CS 348B', 'Computer Graphics: Image Synthesis Techniques', 'Intermediate level, emphasizing high-quality image synthesis algorithms and systems issues in rendering. Topics include: Reyes and advanced rasterization, including motion blur and depth of field; ray tracing and physically based rendering; Monte Carlo algorithms for rendering, including direct illumination and global illumination; path tracing and photon mapping; surface reflection and light source models; volume rendering and subsurface scattering; SIMD and multi-core parallelism for rendering. Written assignments and programming projects. Prerequisite: 248 or equivalent. Recommended: Fourier analysis or digital signal processing.', 'Graphs', NULL),
(1, 'CS 349', 'Topics in Programming Systems', 'Advanced material is often taught for the first time as a topics course, perhaps by a faculty member visiting from another institution. May be repeated for credit.', NULL, NULL),
(1, 'CS 349C', 'Topics in Programming Systems: Readings in Distributed Systems', 'Discussion of research publications that are of current interest in distributed systems. Students are expected to read all papers, and sign up for presentation of one paper. The course itself is 1 unit. Those interested in working on a project along with the readings should enroll for 3 units.', 'Distributed Applications', NULL),
(1, 'CS 354', 'Topics in Circuit Complexity', 'An overview of circuit complexity, focusing on limitations of solving computational problems with circuits. Classical methods: diagonalization; the gate elimination method and circuit size lower bounds; the method of random restrictions and formula size lower bounds; approximating circuits with polynomials and depth-restricted lower bounds. Connections between circuit-analysis algorithms and circuit complexity: learning circuits via queries; pseudorandomness and derandomization; satisfiability algorithms. Prerequisite: CS254 or the equivalent mathematical maturity.', NULL, NULL),
(1, 'CS 357', 'Advanced Topics in Formal Methods', 'Topics vary annually. Recent offerings have covered the foundations of static analysis, including decision procedures for important theories (SAT, linear integer constraints, SMT solvers), model checking, abstract interpretation, and constraint-based analysis. May be repeated for credit. Prerequisite: 256.', NULL, NULL),
(1, 'CS 358', 'Topics in Programming Language Theory', 'Topics of current research interest in the mathematical analysis of programming languages, structured operational semantics, domain theory, semantics of concurrency, rich type disciplines, problems of representation independence, and full abstraction. See Time Schedule or Axess for current topics. May be repeated for credit. Prerequisites: 154, 157, 258, or equivalents. (Staff)', 'Research', NULL),
(1, 'CS 359', 'Topics in the Theory of Computation', 'Advanced material is often taught for the first time as a topics course, perhaps by a faculty member visiting from another institution. May be repeated for credit.', NULL, NULL),
(1, 'CS 364A', 'Algorithmic Game Theory', 'Topics at the interface of computer science and game theory such as: algorithmic mechanism design; combinatorial auctions; computation of Nash equilibria and relevant complexity theory; congestion and potential games; cost sharing; game theory and the Internet; matching markets; network formation; online learning algorithms; price of anarchy; prior-free auctions; selfish routing; sponsored search. Prerequisites: 154N and 161, or equivalents.', 'Game Design', NULL),
(1, 'CS 367', 'Algebraic Graph Algorithms', 'Due to the surprisingly fast algorithms for the problem, matrix multiplication is routinely used as a basic building block for algorithms beating the brute-force approach. This course explores matrix multiplication algorithms and a variety of problems, mostly within graph algorithms, that can be solved faster using a fast matrix multiplication algorithm. Topics include: Fast Matrix Multiplication, algebraic algorithms for Graph Transitive Closure, All Pairs Shortest Paths and variants of the problem, Perfect Matching and Minimum Cycle, and a variety of equivalences between problems involving matrix multiplication. Prerequisites: \nCS154, \nCS161, or the equivalent mathematical maturity.', 'Graphs', NULL),
(1, 'CS 369', 'Topics in Analysis of Algorithms', 'Advanced material is often taught for the first time as a topics course, perhaps by a faculty member visiting from another institution. May be repeated for credit.', NULL, NULL),
(1, 'CS 369A', 'Topics in Analysis of Algorithms: Advanced Approximation Algorithms', 'Optimization problems are ubiquitous, yet most are NP-hard to solve exactly. One popular approach to circumvent this intractability is to design approximation algorithms, i.e. efficient algorithms that produce solutions with value close to the optimum. This course will cover major advances in the field of approximation algorithms in the past decade or so. Prerequisites: Students will be expected to have a strong background in algorithms and probability. Familiarity with basic approximation algorithms (or permission of instructor).', 'Optimization', NULL),
(1, 'CS 369L', 'Theoretical Perspective on Machine Learning', 'Many problems in machine learning are intractable in the worst case, and pose a challenge for the design of algorithms with provable guarantees. In this course, we will discuss several success stories at the intersection of algorithm design and machine learning, focusing on devising appropriate models and mathematical tools to facilitate rigorous analysis. Prerequisites: A strong background in algorithms, probability and linear algebra.', 'Machine Learning', NULL),
(1, 'CS 371', 'Computational Biology in Four Dimensions (BIOMEDIN 371, BIOPHYS 371, CME 371)', 'Computational approaches to understanding the three-dimensional spatial organization of biological systems and how that organization evolves over time. The course will cover cutting-edge research in both physics-based simulation and computational analysis of experimental data, at scales ranging from individual molecules to entire cells. Prerequisite: \nCS 106A or equivalent, and an introductory course in biology or biochemistry. Recommended: some experience in mathematical modeling (does not need to be a formal course).', 'Research', NULL),
(1, 'CS 373', 'Statistical and Machine Learning Methods for Genomics (BIO 268, BIOMEDIN 245, GENE 245, STATS 345)', 'Introduction to statistical and computational methods for genomics. Sample topics include: expectation maximization, hidden Markov model, Markov chain Monte Carlo, ensemble learning, probabilistic graphical models, kernel methods and other modern machine learning paradigms. Rationales and techniques illustrated with existing implementations used in population genetics, disease association, and functional regulatory genomics studies. Instruction includes lectures and discussion of readings from primary literature. Homework and projects require implementing some of the algorithms and using existing toolkits for analysis of genomic datasets.', 'Graphs', NULL),
(1, 'CS 374', 'Algorithms in Biology (BIOMEDIN 374)', 'Algorithms and computational models applied to molecular biology and genetics. Topics vary annually. Possible topics include biological sequence comparison, annotation of genes and other functional elements, molecular evolution, genome rearrangements, microarrays and gene regulation, protein folding and classification, molecular docking, RNA secondary structure, DNA computing, and self-assembly. May be repeated for credit. Prerequisites: 161, 262 or 274, or BIOCHEM 218, or equivalents.', NULL, NULL),
(1, 'CS 376', 'Human-Computer Interaction Research', 'Prepares students to conduct original HCI research by reading and discussing seminal and cutting-edge research papers. Main topics are ubiquitous computing, social computing, and design and creation; breadth topics include HCI methods, programming, visualization, and user modeling. Student pairs perform a quarter-long research project. Prerequisites: For CS and Symbolic Systems undergraduates/masters students, \nCS 147 or \nCS 247.No prerequisite for PhD students or students outside of CS and Symbolic Systems.', 'Research', NULL),
(1, 'CS 377', 'Topics in Human-Computer Interaction', 'Contents change each quarter. May be repeated for credit. See \nhttp://hci.stanford.edu/academics for offerings.', NULL, NULL),
(1, 'CS 377D', 'Topics in Learning and Technology: d.compress - Designing Calm (EDUC 328A)', 'Contents of the course change each year. The course can be repeated. Stress silently but steadily damages physical and emotional well-being, relationships, productivity, and our ability to learn and remember. This highly experiential and project-oriented class will focus on designing interactive technologies to enable calm states of cognition, emotion, and physiology for better human health, learning, creativity and productivity.', NULL, NULL);
INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(1, 'CS 377E', 'Designing Solutions to Global Grand Challenges', 'In this course we will creatively apply information technologies to collectively attack Global Grand Challenges (e.g., global warming, rising healthcare costs and declining access, and ensuring quality education for all). Interdisciplinary student teams will carry out needfinding within a target domain, followed by brainstorming to propose a quarter long project. Teams will spend the rest of the quarter applying user-centered design methods to rapidly iterate through design, prototyping, and testing of their solutions. This course will interleave a weekly lecture with a weekly studio session where students apply the techniques hands-on in a small-scale, supportive environment.', NULL, NULL),
(1, 'CS 377U', 'Understanding Users', 'This project-based class focuses on understanding the use of technology in the world. Students will learn generative and evaluative research methods to explore how systems are appropriated into everyday life in a quarter-long project where they design, implement and evaluate a novel mobile application. Quantitative (e.g. A/B testing, instrumentation, analytics, surveys) and qualitative (e.g. diary studies, contextual inquiry, ethnography) methods and their combination will be covered along with practical experience applying these methods in their project. Prerequisites: \nCS 147, 193A/193P (or equivalent mobile programming experience).', 'Graphs', NULL),
(1, 'CS 377W', 'HCI Issues in Wearable Computing', 'With devices like Pebble and Google Glass moving from labs to consumer use, Wearable Computing represents the forefront of HCI innovation. In this course, students will engage with a broad range of issues around the design and development of wearable devices and systems and develop their own wearable interaction. The course begins with use, analysis, and redesign of an existing wearable, followed by a larger group project integrating concepts from the course to prototype a novel wearable interaction. Students work in project teams, prototyping their wearable concept and communicating their progress through demonstration, final report, and presentation. Google Glass will be available for students interested in experimenting with this platform. Prerequisites: One of the following: \nCS 147 or \nCS 247.', NULL, NULL),
(1, 'CS 379', 'Interdisciplinary Topics', 'Advanced material is often taught for the first time as a topics course, perhaps by a faculty member visiting from another institution. May be repeated for credit.', NULL, NULL),
(1, 'CS 390A', 'Curricular Practical Training', 'Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in internship work and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. 390 A, B, and C may each be taken once.', 'Research', NULL),
(1, 'CS 390B', 'Curricular Practical Training', 'Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in internship work and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. 390A,B,C may each be taken once.', 'Research', NULL),
(1, 'CS 390C', 'Curricular Practical Training', 'Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in internship work and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. 390A,B,C may each be taken once.', 'Research', NULL),
(1, 'CS 390P', 'Part-time Curricular Practical Training', 'For qualified computer science PhD students only. Permission number required for enrollment; see the CS PhD program administrator in Gates room 196. May be taken just once; not repeatable. Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in research and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. Students on F1 visas should be aware that completing 12 or more months of full-time CPT will make them ineligible for Optional Practical Training (OPT).', 'Research', NULL),
(1, 'CS 390Q', 'Part-Time Curricular Practical Training', 'For qualified computer science PhD students only. Permission number required for enrollment; see the CS PhD program administrator in Gates room 196. May be taken just once; not repeatable. Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in research and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. Students on F1 visas should be aware that completing 12 or more months of full-time CPT will make them ineligible for Optional Practical Training (OPT).', 'Research', NULL),
(1, 'CS 390R', 'Part-Time Curricular Practical Training', 'For qualified computer science PhD students only. Permission number required for enrollment; see the CS PhD program administrator in Gates room 196. May be taken just once; not repeatable. Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in research and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. Students on F1 visas should be aware that completing 12 or more months of full-time CPT will make them ineligible for Optional Practical Training (OPT).', 'Research', NULL),
(1, 'CS 390S', 'Part-Time CPT', 'For qualified computer science PhD students only. Permission number required for enrollment; see the CS PhD program administrator in Gates room 196. May be taken just once; not repeatable. Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in research and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. Students on F1 visas should be aware that completing 12 or more months of full-time CPT will make them ineligible for Optional Practical Training (OPT).', 'Research', NULL),
(1, 'CS 390T', 'Part-Time CPT', 'For qualified computer science PhD students only. Permission number required for enrollment; see the CS PhD program administrator in Gates room 196. May be taken just once; not repeatable. Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in research and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. Students on F1 visas should be aware that completing 12 or more months of full-time CPT will make them ineligible for Optional Practical Training (OPT).', 'Research', NULL),
(1, 'CS 393', 'Computer Laboratory', 'For CS graduate students. A substantial computer program is designed and implemented; written report required. Recommended as a preparation for dissertation research. Register using the section number associated with the instructor. Prerequisite: consent of instructor.', 'Research', NULL),
(1, 'CS 395', 'Independent Database Project', 'For graduate students in Computer Science. Use of database management or file systems for a substantial application or implementation of components of database management system. Written analysis and evaluation required. Register using the section number associated with the instructor. Prerequisite: consent of instructor.', 'Databases', NULL),
(1, 'CS 399', 'Independent Project', 'Letter grade only.', NULL, NULL),
(1, 'CS 399P', 'Independent Project', 'Graded satisfactory/no credit.', NULL, NULL),
(1, 'CS 402', 'Beyond Bits and Atoms: Designing Technological Tools (EDUC 236)', 'Practicum in designing and building technology-enabled curricula and hands-on learning environments. Students use software toolkits and state-of-the-art fabrication machines to design educational software, educational toolkits, and tangible user interfaces. The course will focus on designing low-cost technologies, particularly for urban school in the US and abroad. We will explore theoretical and design frameworks from the constructionist learning perspective, critical pedagogy, interaction design for children.', NULL, NULL),
(1, 'CS 402L', 'Beyond Bits and Atoms - Lab (EDUC 211)', 'This course is a hands-on lab in the prototyping and fabrication of tangible technologies, with a special focus in learning and education. We will learn how to use state-of-the-art fabrication machines (3D printers, 3D scanners, laser cutters, routers) to design educational toolkits, educational toys, science kits, and tangible user interfaces. A special focus of the course will be to design low-cost technologies, particularly for urban school in the US and abroad.', NULL, NULL),
(1, 'CS 42', 'Callback Me Maybe: Contemporary Javascript', 'Introduction to the JavaScript programming language with a focus on building contemporary applications. Course consists of in-class activities and programming assignments that challenge students to create functional web apps (e.g. Yelp, Piazza, Instagram). Topics include syntax/semantics, event-based programming, document object model (DOM), application programming interfaces (APIs), asynchronous JavaScript and XML (AJAX), jQuery, Node.js, and MongoDB. Prerequisite: \nCS 107.', NULL, 'javascript'),
(1, 'CS 424M', 'Learning Analytics and Computational Modeling in Social Science (EDUC 390)', 'Computational modeling and data-mining are dramatically changing the physical sciences, and more recently also the social and behavioral sciences. Traditional analysis techniques are insufficient to investigate complex dynamic social phenomena as social networks, online gaming, diffusion of innovation, opinion dynamics, classroom behavior, and other complex adaptive systems. In this course, we will learn about how modeling, network theory, and basic data-mining can support research in cognitive, and social sciences, in particular around issues of learning, cognitive development, and educational policy.', 'Networking', NULL),
(1, 'CS 431', 'High-Level Vision: Object Representation (PSYCH 250)', '(Formerly CS423 High-Level Vision: Behaviors, Neurons, and Computational Models) Interdisciplinary seminar focusing on understanding how computations in the brain enable rapid and efficient object perception. Covers topics from multiple perspectives drawing on recent research in Psychology, Neuroscience, Computer Science and Applied Statistics. Emphasis on discussing recent empirical findings, methods and theoretical debates in the field. Topics include: theories of object perception, neural computations underlying invariant object perception, how visual exemplars and categories are represented in the brain, what information is present in distributed activations across neural populations and how it relates to object perception, what modern statistical and analytical tools there are for multi-variate analysis of brain activations.', 'Statistics', NULL),
(1, 'CS 448', 'Topics in Computer Graphics', 'Topic changes each quarter. Recent topics: computational photography, datannvisualization, character animation, virtual worlds, graphics architectures, advanced rendering. See \nhttp://graphics.stanford.edu/courses for offererings and prerequisites. May be repeated for credit.', 'Graphs', NULL),
(1, 'CS 448B', 'Data Visualization', 'Techniques and algorithms for creating effective visualizations based on principles from graphic design, visual art, perceptual psychology, and cognitive science. Topics: graphical perception, data and image models, visual encoding, graph and tree layout, color, animation, interaction techniques, automated design. Lectures, reading, and project. Prerequisite: one of 147, 148, or equivalent.', 'Graphs', NULL),
(1, 'CS 448H', 'Topics in Computer Graphics: Domain-Specific Languages for Graphics, Imaging, and Beyond', 'Topic changes each quarter. Recent topics: computational photography, data visualization, character animation, virtual worlds, graphics architectures, advanced rendering. See \nhttp://graphics.stanford.edu/courses for offerings and prerequisites. May be repeated for credit.', 'Graphs', NULL),
(1, 'CS 448I', 'Computational Imaging and Display (EE 367)', 'Spawned by rapid advances in optical fabrication and digital processing power, a new generation of imaging technology is emerging: computational cameras at the convergence of applied mathematics, optics, and high-performance computing. Similar trends are observed for modern displays pushing the boundaries of resolution, contrast, 3D capabilities, and immersive experiences through the co-design of optics, electronics, and computation. This course serves as an introduction to the emerging field of computational imaging and displays. Students will learn to master bits and photons.', NULL, NULL),
(1, 'CS 448J', 'Concepts and Algorithms of Scientific and Visual Computing', 'This course covers a selection of fundamental concepts and algorithms for scientific and visual computing. Based on prior knowledge in basis calculus, linear algebra, numerical interpolation and optimization, this course introduces the concept of the phase space, variational principles, methods for ordinary and partial differential equations, Fourier analysis, and multi- scale modeling. The lecture is algorithmically oriented, aiming to enable the students to develop efficient solutions for practically relevant problems, based on solid theoretical foundations and mathematically precise modeling. It covers practical applications, like the simulation of rigid and deformable objects, fibers, fluids, molecular dynamics, signal/image analysis and processing, as well as wavelet-based modeling on different scales. Prerequisites: Basic knowledge such as taught in \nMATH 41, \nMATH 42, \nCS 103, or \nCS 205A.', 'Optimization', NULL),
(1, 'CS 448Z', 'Physically Based Animation and Sound', 'Intermediate level, emphasizing physically based simulation techniques for computer animation and synchronized sound synthesis. Topics vary from year to year, but include integrated approaches to visual and auditory simulation of rigid bodies, deformable solids, collision detection and contact resolution, fracture, fluids and gases, and virtual characters. Written assignments and programming projects. Prerequisite: None. Recommended: Computer graphics (\nCS 148 and \nCS 248), and/or scientific computing (\nCS 205).', 'Graphs', NULL),
(1, 'CS 44N', 'Computational Thinking and Systems in the Real-World', 'Computing in the real-world is too often viewed as working away concocting some computer incantations hidden inside some high technology company. However, computing and computer communication has infiltrated and in many cases revolutionized several ¿systems¿ in the real world, including financial systems, inventory management, advertising systems, supply chain management, transportation systems, defense systems and so on. Moreover, the discipline of thinking that has developed to build these systems, computational thinking, has powerful applicability to real-world problems and situations outside of computer programming. This course provides an introduction and exposure to some of these dramatic trends, opportunities and risks. Also included is an introduction to some basic ideas in ¿computational thinking¿. The course will include guest speakers. No programming competence is assumed but exposure to programming would be useful. Interest in the real world and interest is not being run-over by this trend is essential.', NULL, NULL),
(1, 'CS 45N', 'Computers and Photography: From Capture to Sharing', 'Preference to freshmen with experience in photography and use of computers. Elements of photography, such as lighting, focus, depth of field, aperture, and composition. How a photographer makes photos available for computer viewing, reliably stores them, organizes them, tags them, searches them, and distributes them online. No programming experience required. Digital SLRs and editing software will be provided to those students who do not wish to use their own.', 'Graphs', NULL),
(1, 'CS 46N', 'Big Data, Big Discoveries, Big Fallacies', 'A sea change has occurred in science, technology, medicine, politics, and society as a whole: many of the world''s biggest discoveries and decisions are now being made on the basis of analyzing massive data sets, referred to as "big data". Everyday examples include social-network friend recommendations, and weather predictions far more accurate than a decade ago; both use vast collections of data to model the past and predict the future. But it is surprisingly easy to come to false conclusions from data analysis alone. For example, we might conclude that acne medicine prevents heart attacks and strokes, if we forget to factor in the age of the patients. Privacy is a major concern: Target stores analyzed buying patterns to predict with remarkable accuracy which of their shoppers had just become pregnant, but trouble arose when they sent baby ads to the homes of pregnant teens whose parents weren''t yet in the know. We will start by surveying the history of data-driven activities, leading up to the recent Big Data explosion. A variety of data analysis techniques will be covered, leading students to appreciate that even simple techniques can go a long way when the data set is large enough. Common stumbling blocks leading to false conclusions will be discussed, and students will be asked to debate the many issues surrounding privacy. In one project, students will see whose analysis techniques can best predict user movie ratings based on past rating behavior. A second project will be individually designed in an area of the student''s choosing. The seminar will include a mix of assigned readings, small-scale investigations and assignments, classroom discussions, and two projects. No computer programming or special math skills are required; students will learn the basic techniques and tools they need to complete the data analysis assignments and projects.', NULL, NULL),
(1, 'CS 476A', 'Music, Computing, Design I: Art of Design for Computer Music (MUSIC 256A)', 'Creative design for computer music software. Programming, audiovisual design, as well as software design for musical tools, instruments, toys, and games. Provides paradigms and strategies for designing and building music software, with emphases on interactive systems, aesthetics, and artful product design. Course work includes several programming assignments and a "design+implement" final project. Prerequisite: experience in C/C++ and/or Java.', 'Game Design', NULL),
(1, 'CS 476B', 'Music, Computing, Design II: Virtual and Augmented Reality for Music (MUSIC 256B)', 'Aesthetics, design, and exploration of creative musical applications of virtual reality (VR) and augmented reality (AR), centered around VR and mobile technologies. Comparison between AR, VR, and traditional software design paradigms for music. Topics include embodiment, interaction design, novel instruments, social experience, software design + prototyping. Prerequisite: \nMUSIC 256A / \nCS 476A.', NULL, NULL),
(1, 'CS 499', 'Advanced Reading and Research', 'Letter grade only. Advanced reading and research for CS graduate students. Register using the section number associated with the instructor. Prerequisite: consent of instructor.', 'Research', NULL),
(1, 'CS 499P', 'Advanced Reading and Research', 'Graded satisfactory/no credit. Advanced reading and research for CS graduate students. Register using the section number associated with the instructor. Prerequisite: consent of instructor.', 'Research', NULL),
(1, 'CS 546', 'Seminar on Liberation Technologies', 'This one-unit seminar will present speakers relevant in a variety ofnways to how various forms of information technology are being used tondefend human rights, improve governance, deepen democracy, empower thenpoor, promote economic development, protect the environment, enhancenpublic health, and pursue a variety of other social goods.', NULL, NULL),
(1, 'CS 54N', 'Great Ideas in Computer Science', 'Stanford Introductory Seminar. Preference to freshmen. Covers the intellectual tradition of computer science emphasizing ideas that reflect the most important milestones in the history of the discipline. No prior experience with programming is assumed. Topics include programming and problem solving; implementing computation in hardware; algorithmic efficiency; the theoretical limits of computation; cryptography and security; and the philosophy behind artificial intelligence.', 'Graphs', NULL),
(1, 'CS 74N', 'Digital Dilemmas', 'Preference to freshmen. Issues where policy decision making requires understanding computer and communications technology. Technology basics taught in non-technology terms. Topics include consumer privacy, government surveillance, file sharing and intellectual property, and electronic voting.', NULL, NULL),
(1, 'CS 75N', 'Cell Phones, Sensors, and You', 'Focuses on the role of cell phones as the first prevalent wearable sensors that gather information about you that can be both useful and potentially harmful. Topics include the state of technology, sociological and privacy implications, potential governmental regulation, etc. Addresses omniscient "big brother" technology including radar guns and the recording devices that led to the Watergate scandal. Students will gather and compile information on topics and come to class ready to discuss and debate with formulated opinions.', NULL, NULL),
(1, 'CS 9', 'Problem-Solving for the CS Technical Interview', 'This course will prepare students to interview for software engineering and related internships and full-time positions in industry. Drawing on multiple sources of actual interview questions, students will learn key problem-solving strategies specific to the technical/coding interview. Students will be encouraged to synthesize information they have learned across different courses in the major. Emphasis will be on the oral and combination written-oral modes of communication common in coding interviews, but which are unfamiliar settings for problem solving for many students. Prerequisites: \nCS 106B or X.', NULL, NULL),
(1, 'CS 90SI', 'CS + Social Good: Using Web Technologies to Change the World', 'Learn web technologies by working on real world projects focused on creating positive social impact. The class will cover basic topics related to web development and provide resources for more advanced learning. Students will work on small teams to implement high-impact projects for partner organizations. The aim of the class is to empower students to leverage technology for social good by inspiring action, facilitating collaboration, and forging pathways toward change. No web application experience required. Prerequisite: 106B. Application required; apply online at http://bit.ly/90siApp. Applications accepted until midnight on September 14th.', NULL, NULL),
(1, 'CS 91SI', 'Digital Canvas: Intro to Visual Design on the Web', 'Introduction to visual design in the web context. Course consists of two components: lectures and critiques. Lectures will focus on design principles and examples from print and web, with some guest speakers. Critiques will give students the opportunity to practice both giving and receiving feedback. Topics include layout, composition, color,typography, and interaction design. Students will create designs to be showcased in a final presentation. Application required, see \nhttp://cs91si.stanford.edu.', 'Graphs', NULL),
(1, 'CS 92SI', 'Hap.py Coder: The Python Programming Language', 'The fundamentals and contemporary usage of the Python programming language. Primary focus on developing best practices in writing Python and exploring the extensible and unique parts of Python that make it such a powerful scripting language. Topics include: data structures (e.g. lists and dictionaries), and characteristic pythonic conventions like anonymous functions, iterables, and powerful built-ins (e.g. map, filter, zip). Time permitting, we will also cover object-oriented design, modules, (e.g. request, itertools), and modern Python-based web frameworks. Prerequisite: 106A. Application required.', NULL, 'python'),
(2, '6.0001', 'Introduction to Computer Science Programming in Python\n ', NULL, 'CS', 'python'),
(2, '6.0002', 'Introduction to Computational Thinking and Data Science\n ', NULL, NULL, NULL),
(2, '6.002', 'Circuits and Electronics\n ', NULL, NULL, NULL),
(2, '6.003', 'Signals and Systems\n ', NULL, NULL, NULL),
(2, '6.004', 'Computation Structures\n ', NULL, NULL, NULL),
(2, '6.005', 'Elements of Software Construction\n ', NULL, NULL, NULL),
(2, '6.006', 'Introduction to Algorithms\n ', NULL, NULL, NULL),
(2, '6.007', 'Electromagnetic Energy: From Motors to Solar Cells\n ', NULL, NULL, NULL),
(2, '6.008', 'Introduction to Inference\n ', NULL, NULL, NULL),
(2, '6.01', 'Introduction to EECS I\n ', NULL, NULL, NULL),
(2, '6.011', 'Signals, Systems, and Inference\n ', NULL, NULL, NULL),
(2, '6.012', 'Microelectronic Devices and Circuits\n ', NULL, NULL, NULL),
(2, '6.013', 'Electromagnetics and Applications\n ', NULL, 'Embedded Systems', NULL),
(2, '6.02', 'Introduction to EECS II\n ', NULL, NULL, NULL),
(2, '6.021[J]', 'Cellular Biophysics and Neurophysiology\n ', NULL, NULL, NULL),
(2, '6.022[J]', 'Quantitative Systems Physiology\n ', NULL, NULL, NULL),
(2, '6.023[J]', 'Fields, Forces and Flows in Biological Systems\n ', NULL, NULL, NULL),
(2, '6.024[J]', 'Molecular, Cellular, and Tissue Biomechanics\n ', NULL, NULL, NULL),
(2, '6.025[J]', 'Medical Device Design\n ', NULL, NULL, NULL),
(2, '6.027[J]', 'Biomolecular Feedback Systems\n(New)\n ', NULL, 'Databases', NULL),
(2, '6.03', 'Introduction to EECS II from a Medical Technology Perspective\n(6.S03)\n ', NULL, NULL, NULL),
(2, '6.033', 'Computer System Engineering\n ', NULL, NULL, NULL),
(2, '6.034', 'Artificial Intelligence\n ', NULL, 'Artificial Intelligence', NULL),
(2, '6.035', 'Computer Language Engineering\n ', NULL, NULL, NULL),
(2, '6.036', 'Introduction to Machine Learning\n ', NULL, 'Machine Learning', NULL),
(2, '6.037', 'Structure and Interpretation of Computer Programs\n ', NULL, NULL, NULL),
(2, '6.041', 'Probabilistic Systems Analysis\n ', NULL, NULL, NULL),
(2, '6.042[J]', 'Mathematics for Computer Science\n ', NULL, 'CS', NULL),
(2, '6.045[J]', 'Automata, Computability, and Complexity\n ', NULL, NULL, NULL),
(2, '6.046[J]', 'Design and Analysis of Algorithms\n ', NULL, NULL, NULL),
(2, '6.047', 'Computational Biology: Genomes, Networks, Evolution\n ', NULL, NULL, NULL),
(2, '6.049[J]', 'Evolutionary Biology:  Concepts, Models and Computation\n ', NULL, NULL, NULL),
(2, '6.050[J]', 'Information, Entropy, and Computation\n ', NULL, NULL, NULL),
(2, '6.057', 'Introduction to MATLAB\n ', NULL, NULL, 'matlab'),
(2, '6.058', 'Preview of Signals and Systems\n ', NULL, NULL, NULL),
(2, '6.061', 'Introduction to Electric Power Systems\n ', NULL, NULL, NULL),
(2, '6.070[J]', 'Electronics Project Laboratory\n ', NULL, NULL, NULL),
(2, '6.071[J]', 'Electronics, Signals, and Measurement\n ', NULL, NULL, NULL),
(2, '6.072[J]', 'Introduction to Digital Electronics\n ', NULL, NULL, NULL),
(2, '6.073[J]', 'Creating Video Games\n ', NULL, 'Game Design', NULL),
(2, '6.07[J]', 'Projects in Microscale Engineering for the Life Sciences\n ', NULL, NULL, NULL),
(2, '6.100', 'Electrical Engineering and Computer Science Project\n ', NULL, 'CS', NULL),
(2, '6.101', 'Introductory Analog Electronics Laboratory\n ', NULL, NULL, NULL),
(2, '6.111', 'Introductory Digital Systems Laboratory\n ', NULL, NULL, NULL),
(2, '6.115', 'Microcomputer Project Laboratory\n ', NULL, NULL, NULL),
(2, '6.117', 'Introduction to Electrical Engineering Lab Skills\n ', NULL, NULL, NULL),
(2, '6.123[J]', 'Bioinstrumentation Project Lab\n ', NULL, NULL, NULL),
(2, '6.129[J]', 'Biological Circuit Engineering Laboratory\n ', NULL, NULL, NULL),
(2, '6.131', 'Power Electronics Laboratory\n ', NULL, NULL, NULL),
(2, '6.141[J]', 'Robotics: Science and Systems I\n ', NULL, NULL, NULL),
(2, '6.142[J]', 'Robotics: Science and Systems II\n ', NULL, NULL, NULL),
(2, '6.146', 'Mobile Autonomous Systems Laboratory: MASLAB\n ', NULL, NULL, NULL),
(2, '6.147', 'The BattleCode Programming Competition\n ', NULL, NULL, NULL),
(2, '6.148', 'Web Programming Competition\n ', NULL, NULL, NULL),
(2, '6.149', 'Introduction to Programming Using Python\n ', NULL, NULL, 'python'),
(2, '6.150', 'Mobile Applications Competition\n ', NULL, 'Embedded Systems', NULL),
(2, '6.151', 'iOS Game Design and Development Competition\n ', NULL, 'Game Design', NULL),
(2, '6.152[J]', 'Micro/Nano Processing Technology\n ', NULL, NULL, NULL),
(2, '6.161', 'Modern Optics Project Laboratory\n ', NULL, NULL, NULL),
(2, '6.163', 'Strobe Project Laboratory\n ', NULL, NULL, NULL),
(2, '6.169', 'Theory and Application of Circuits and Electronics\n ', NULL, NULL, NULL),
(2, '6.170', 'Software Studio\n ', NULL, NULL, NULL),
(2, '6.172', 'Performance Engineering of Software Systems\n ', NULL, NULL, NULL),
(2, '6.175', 'Constructive Computer Architecture\n ', NULL, 'Computer Architecture', NULL),
(2, '6.176', 'Pokerbots Competition\n ', NULL, NULL, NULL),
(2, '6.177', 'Building Programming Experience in Python\n ', NULL, NULL, 'python'),
(2, '6.178', 'Introduction to Software Engineering in Java\n ', NULL, NULL, 'java'),
(2, '6.179', 'Introduction to C and C++\n ', NULL, NULL, 'c'),
(2, '6.182', 'Psychoacoustics Project Laboratory\n ', NULL, NULL, NULL),
(2, '6.207[J]', 'Networks\n ', NULL, NULL, NULL),
(2, '6.231', 'Dynamic Programming and Stochastic Control\n ', NULL, NULL, NULL),
(2, '6.241[J]', 'Dynamic Systems and Control\n ', NULL, NULL, NULL),
(2, '6.242', 'Advanced Linear Control Systems\n ', NULL, NULL, NULL),
(2, '6.243', 'Dynamics of Nonlinear Systems\n ', NULL, NULL, NULL),
(2, '6.245', 'Multivariable Control Systems\n ', NULL, NULL, NULL),
(2, '6.246,', '6.247 Advanced Topics in Control\n ', NULL, NULL, NULL),
(2, '6.248,', '6.249 Advanced Topics in Numerical Methods\n ', NULL, NULL, NULL),
(2, '6.251[J]', 'Introduction to Mathematical Programming\n ', NULL, NULL, NULL),
(2, '6.252[J]', 'Nonlinear Optimization\n ', NULL, 'Optimization', NULL),
(2, '6.253', 'Convex Analysis and Optimization\n ', NULL, 'Optimization', NULL),
(2, '6.254', 'Game Theory with Engineering Applications\n ', NULL, 'Embedded Systems', NULL),
(2, '6.255[J]', 'Optimization Methods\n ', NULL, 'Optimization', NULL),
(2, '6.256', 'Algebraic Techniques and Semidefinite Optimization\n ', NULL, 'Optimization', NULL),
(2, '6.260,', '6.261 Advanced Topics in Communications\n ', NULL, NULL, NULL),
(2, '6.262', 'Discrete Stochastic Processes\n ', NULL, NULL, NULL),
(2, '6.263[J]', 'Data-Communication Networks\n ', NULL, NULL, NULL),
(2, '6.265[J]', 'Advanced Stochastic Processes\n ', NULL, NULL, NULL),
(2, '6.267', 'Heterogeneous Networks: Architecture, Transport, Proctocols, and Management\n ', NULL, NULL, NULL),
(2, '6.268', 'Network Science and Models\n ', NULL, NULL, NULL),
(2, '6.281[J]', 'Logistical and Transportation Planning Methods\n ', NULL, NULL, NULL),
(2, '6.291', 'Seminar in Systems, Communications, and Control Research\n ', NULL, 'Research', NULL),
(2, '6.301', 'Solid-State Circuits\n ', NULL, NULL, NULL),
(2, '6.302', 'Feedback Systems\n ', NULL, 'Databases', NULL),
(2, '6.332,', '6.333 Advanced Topics in Circuits\n ', NULL, NULL, NULL),
(2, '6.334', 'Power Electronics\n ', NULL, NULL, NULL),
(2, '6.335[J]', 'Fast Methods for Partial Differential and Integral Equations\n ', NULL, NULL, NULL),
(2, '6.336[J]', 'Introduction to Numerical Simulation\n ', NULL, NULL, NULL),
(2, '6.337[J]', 'Introduction to Numerical Methods\n ', NULL, NULL, NULL),
(2, '6.338[J]', 'Parallel Computing\n ', NULL, NULL, NULL),
(2, '6.339[J]', 'Numerical Methods for Partial Differential Equations\n ', NULL, NULL, NULL),
(2, '6.341', 'Discrete-Time Signal Processing\n ', NULL, NULL, NULL),
(2, '6.344', 'Digital Image Processing\n ', NULL, NULL, NULL),
(2, '6.345[J]', 'Automatic Speech Recognition\n ', NULL, NULL, NULL),
(2, '6.347,', '6.348 Advanced Topics in Signals and Systems\n ', NULL, NULL, NULL),
(2, '6.374', 'Analysis and Design of Digital Integrated Circuits\n ', NULL, NULL, NULL),
(2, '6.375', 'Complex Digital Systems Design\n ', NULL, NULL, NULL),
(2, '6.376', 'Bioelectronics\n ', NULL, NULL, NULL),
(2, '6.431', 'Applied Probability\n ', NULL, NULL, NULL),
(2, '6.434[J]', 'Statistics for Engineers and Scientists\n ', NULL, 'Statistics', NULL),
(2, '6.435', 'System Identification\n ', NULL, NULL, NULL),
(2, '6.436[J]', 'Fundamentals of Probability\n ', NULL, NULL, NULL),
(2, '6.437', 'Inference and Information\n ', NULL, NULL, NULL),
(2, '6.438', 'Algorithms for Inference\n ', NULL, NULL, NULL),
(2, '6.440', 'Essential Coding Theory\n ', NULL, NULL, NULL),
(2, '6.441', 'Information Theory\n ', NULL, NULL, NULL),
(2, '6.442', 'Optical Networks\n ', NULL, NULL, NULL),
(2, '6.443[J]', 'Quantum Information Science\n ', NULL, NULL, NULL),
(2, '6.450', 'Principles of Digital Communication\n ', NULL, NULL, NULL),
(2, '6.452', 'Principles of Wireless Communication\n ', NULL, NULL, NULL),
(2, '6.453', 'Quantum Optical Communication\n ', NULL, NULL, NULL),
(2, '6.454', 'Graduate Seminar in Area I\n ', NULL, NULL, NULL),
(2, '6.456', 'Array Processing\n ', NULL, NULL, NULL),
(2, '6.503', 'Foundations of Algorithms and Computational Techniques in Systems Biology\n ', NULL, NULL, NULL),
(2, '6.521[J]', 'Cellular Biophysics\n ', NULL, NULL, NULL),
(2, '6.522[J]', 'Quantitative Physiology: Organ Transport Systems\n ', NULL, NULL, NULL),
(2, '6.524[J]', 'Molecular, Cellular, and Tissue Biomechanics\n ', NULL, NULL, NULL),
(2, '6.525[J]', 'Medical Device Design\n ', NULL, NULL, NULL),
(2, '6.541[J]', 'Speech Communication\n ', NULL, NULL, NULL),
(2, '6.542[J]', 'Laboratory on the Physiology, Acoustics, and Perception of Speech\n ', NULL, NULL, NULL),
(2, '6.544,', '6.545 Advanced Topics in BioEECS\n ', NULL, NULL, NULL),
(2, '6.551[J]', 'Acoustics of Speech and Hearing\n ', NULL, NULL, NULL),
(2, '6.552[J]', 'Signal Processing by the Auditory System: Perception\n ', NULL, NULL, NULL),
(2, '6.555[J]', 'Biomedical Signal and Image Processing\n ', NULL, NULL, NULL),
(2, '6.556[J]', 'Data Acquisition and Image Reconstruction in MRI\n ', NULL, NULL, NULL),
(2, '6.557[J]', 'Biomolecular Feedback Systems\n(New)\n ', NULL, 'Databases', NULL),
(2, '6.561[J]', 'Fields, Forces, and Flows in Biological Systems\n ', NULL, NULL, NULL),
(2, '6.580[J]', 'Principles of Synthetic Biology\n ', NULL, NULL, NULL),
(2, '6.581[J]', 'Foundations of Algorithms and Computational Techniques in Systems Biology\n ', NULL, NULL, NULL),
(2, '6.589[J]', 'Principles of Synthetic Biology\n ', NULL, NULL, NULL),
(2, '6.602', 'Fundamentals of Photonics\n ', NULL, NULL, NULL),
(2, '6.608[J]', 'Introduction to Particle Accelerators\n ', NULL, NULL, NULL),
(2, '6.621', 'Fundamentals of Photonics\n ', NULL, NULL, NULL),
(2, '6.630', 'Electromagnetics\n ', NULL, NULL, NULL),
(2, '6.631', 'Optics and Photonics\n ', NULL, NULL, NULL),
(2, '6.632', 'Electromagnetic Wave Theory\n ', NULL, NULL, NULL),
(2, '6.634[J]', 'Nonlinear Optics\n ', NULL, NULL, NULL),
(2, '6.637', 'Optical Signals, Devices, and Systems\n ', NULL, NULL, NULL),
(2, '6.641', 'Electromagnetic Fields, Forces, and Motion\n ', NULL, NULL, NULL),
(2, '6.642', 'Continuum Electromechanics\n ', NULL, NULL, NULL),
(2, '6.644,', '6.645 Advanced Topics in Applied Physics\n ', NULL, NULL, NULL),
(2, '6.651[J]', 'Introduction to Plasma Physics I\n ', NULL, NULL, NULL),
(2, '6.652[J]', 'Introduction to Plasma Physics II\n ', NULL, NULL, NULL),
(2, '6.673', 'Introduction to Numerical Simulation in Electrical Engineering\n ', NULL, NULL, NULL),
(2, '6.685', 'Electric Machines\n ', NULL, NULL, NULL),
(2, '6.690', 'Introduction to Electric Power Systems\n ', NULL, NULL, NULL),
(2, '6.695[J]', 'Engineering, Economics and Regulation of the Electric Power Sector\n ', NULL, NULL, NULL),
(2, '6.701', 'Introduction to Nanoelectronics\n ', NULL, NULL, NULL),
(2, '6.717[J]', 'Design and Fabrication of Microelectromechanical Systems\n ', NULL, NULL, NULL),
(2, '6.719', 'Nanoelectronics\n ', NULL, NULL, NULL),
(2, '6.720[J]', 'Integrated Microelectronic Devices\n ', NULL, NULL, NULL),
(2, '6.728', 'Applied Quantum and Statistical Physics\n ', NULL, NULL, NULL),
(2, '6.730', 'Physics for Solid-State Applications\n ', NULL, 'Embedded Systems', NULL),
(2, '6.731', 'Semiconductor Optoelectronics: Theory and Design\n ', NULL, NULL, NULL),
(2, '6.732', 'Physics of Solids\n ', NULL, NULL, NULL),
(2, '6.735,', '6.736 Advanced Topics in Materials, Devices, and Nanotechnology\n ', NULL, NULL, NULL),
(2, '6.774', 'Physics of Microfabrication: Front End Processing\n ', NULL, NULL, NULL),
(2, '6.775', 'CMOS Analog and Mixed-Signal Circuit Design\n ', NULL, NULL, NULL),
(2, '6.776', 'High Speed Communication Circuits\n ', NULL, NULL, NULL),
(2, '6.777[J]', 'Design and Fabrication of Microelectromechanical Systems\n ', NULL, NULL, NULL),
(2, '6.780[J]', 'Control of Manufacturing Processes\n ', NULL, NULL, NULL),
(2, '6.781[J]', 'Nanostructure Fabrication\n ', NULL, NULL, NULL),
(2, '6.789', 'Organic Optoelectronics\n ', NULL, NULL, NULL),
(2, '6.801', 'Machine Vision\n ', NULL, NULL, NULL),
(2, '6.802[J]', 'Foundations of Computational and Systems Biology\n ', NULL, NULL, NULL),
(2, '6.803', 'The Human Intelligence Enterprise\n ', NULL, 'Artificial Intelligence', NULL),
(2, '6.804[J]', 'Computational Cognitive Science\n ', NULL, NULL, NULL),
(2, '6.805[J]', 'Foundations of Information Policy\n ', NULL, NULL, NULL),
(2, '6.806', 'Advanced Natural Language Processing\n(New)\n ', NULL, 'Natural Language Processing', NULL),
(2, '6.807', 'Computational Fabrication\n(New)\n ', NULL, NULL, NULL),
(2, '6.811[J]', 'Principles and Practice of Assistive Technology\n ', NULL, NULL, NULL),
(2, '6.813', 'User Interface Design and Implementation\n ', NULL, NULL, NULL),
(2, '6.814', 'Database Systems\n ', NULL, 'Databases', NULL),
(2, '6.815', 'Digital and Computational Photography\n ', NULL, 'Graphs', NULL),
(2, '6.816', 'Multicore Programming\n ', NULL, NULL, NULL),
(2, '6.819', 'Advances in Computer Vision\n ', NULL, NULL, NULL),
(2, '6.820', 'Foundations of Program Analysis\n ', NULL, NULL, NULL),
(2, '6.823', 'Computer System Architecture\n ', NULL, NULL, NULL),
(2, '6.824', 'Distributed Computer Systems Engineering\n ', NULL, 'Distributed Applications', NULL),
(2, '6.828', 'Operating System Engineering\n ', NULL, NULL, NULL),
(2, '6.829', 'Computer Networks\n ', NULL, NULL, NULL),
(2, '6.830', 'Database Systems\n ', NULL, 'Databases', NULL),
(2, '6.831', 'User Interface Design and Implementation\n ', NULL, NULL, NULL),
(2, '6.832', 'Underactuated Robotics\n ', NULL, NULL, NULL),
(2, '6.833', 'The Human Intelligence Enterprise\n ', NULL, 'Artificial Intelligence', NULL),
(2, '6.834[J]', 'Cognitive Robotics\n ', NULL, NULL, NULL),
(2, '6.835', 'Intelligent Multimodal User Interfaces\n ', NULL, NULL, NULL),
(2, '6.836', 'Multicore Programming\n ', NULL, NULL, NULL),
(2, '6.837', 'Computer Graphics\n ', NULL, 'Graphs', NULL),
(2, '6.838', 'Advanced Topics in Computer Graphics\n ', NULL, 'Graphs', NULL),
(2, '6.839', 'Advanced Computer Graphics\n ', NULL, 'Graphs', NULL),
(2, '6.840[J]', 'Theory of Computation\n ', NULL, NULL, NULL),
(2, '6.841[J]', 'Advanced Complexity Theory\n ', NULL, NULL, NULL),
(2, '6.842', 'Randomness and Computation\n ', NULL, NULL, NULL),
(2, '6.845', 'Quantum Complexity Theory\n ', NULL, NULL, NULL),
(2, '6.846', 'Parallel Computing\n ', NULL, NULL, NULL),
(2, '6.849', 'Geometric Folding Algorithms: Linkages, Origami, Polyhedra\n ', NULL, NULL, NULL),
(2, '6.850', 'Geometric Computing\n ', NULL, NULL, NULL),
(2, '6.851', 'Advanced Data Structures\n ', NULL, NULL, NULL),
(2, '6.852[J]', 'Distributed Algorithms\n ', NULL, 'Distributed Applications', NULL),
(2, '6.853', 'Topics in Algorithmic Game Theory\n ', NULL, 'Game Design', NULL),
(2, '6.854[J]', 'Advanced Algorithms\n ', NULL, NULL, NULL),
(2, '6.856[J]', 'Randomized Algorithms\n ', NULL, NULL, NULL),
(2, '6.857', 'Network and Computer Security\n ', NULL, 'Security', NULL),
(2, '6.858', 'Computer Systems Security\n ', NULL, 'Security', NULL),
(2, '6.859[J]', 'Integer Programming and Combinatorial Optimization\n ', NULL, 'Optimization', NULL),
(2, '6.863[J]', 'Natural Language and the Computer Representation of Knowledge\n ', NULL, NULL, NULL),
(2, '6.864', 'Advanced Natural Language Processing\n ', NULL, 'Natural Language Processing', NULL),
(2, '6.865', 'Advanced Computational Photography\n ', NULL, 'Graphs', NULL),
(2, '6.866', 'Machine Vision\n ', NULL, NULL, NULL),
(2, '6.867', 'Machine Learning\n ', NULL, 'Machine Learning', NULL),
(2, '6.868[J]', 'The Society of Mind\n ', NULL, NULL, NULL),
(2, '6.869', 'Advances in Computer Vision\n ', NULL, NULL, NULL),
(2, '6.870', 'Advanced Topics in Computer Vision\n ', NULL, NULL, NULL),
(2, '6.871', 'Performance Engineering of Software Systems\n(New)\n ', NULL, NULL, NULL),
(2, '6.872[J]', 'Biomedical Computing\n ', NULL, NULL, NULL),
(2, '6.874[J]', 'Computational Systems Biology\n ', NULL, NULL, NULL),
(2, '6.875[J]', 'Cryptography and Cryptanalysis\n ', NULL, 'Graphs', NULL),
(2, '6.876', 'Advanced Topics in Cryptography\n ', NULL, 'Graphs', NULL),
(2, '6.878[J]', 'Advanced Computational Biology: Genomes, Networks, Evolution\n ', NULL, NULL, NULL),
(2, '6.881,', '6.882 Advanced Topics in Artificial Intelligence\n ', NULL, 'Artificial Intelligence', NULL),
(2, '6.883', 'Advanced Topics in Artificial Intelligence\n ', NULL, 'Artificial Intelligence', NULL),
(2, '6.884', 'Advanced Topics in Artificial Intelligence\n ', NULL, 'Artificial Intelligence', NULL),
(2, '6.885-6.888', 'Advanced Topics in Computer Systems\n ', NULL, NULL, NULL),
(2, '6.889-6.893', 'Advanced Topics in Theoretical Computer Science\n ', NULL, 'CS', NULL),
(2, '6.894-6.896', 'Advanced Topics in Graphics and Human-Computer Interfaces\n ', NULL, 'Graphs', NULL),
(2, '6.902[J]', 'Engineering Innovation and Design\n ', NULL, NULL, NULL),
(2, '6.903', 'Patents, Copyrights, and the Law of Intellectual Property\n ', NULL, NULL, NULL),
(2, '6.904', 'Ethics for Engineers\n ', NULL, NULL, NULL),
(2, '6.905', 'Large-scale Symbolic Systems\n ', NULL, NULL, NULL),
(2, '6.906', 'StartMIT: Workshop for Entrepreneurs and Innovators\n(New)\n ', NULL, NULL, NULL),
(2, '6.910', 'Independent Study in Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.920', 'Practical Work Experience\n ', NULL, NULL, NULL),
(2, '6.921', '6-A Internship\n ', NULL, NULL, NULL),
(2, '6.922', 'Advanced 6-A Internship\n ', NULL, NULL, NULL),
(2, '6.929[J]', 'Energy Technology and Policy:  From Principles to Practice\n(New)\n ', NULL, NULL, NULL),
(2, '6.930', 'Management in Engineering\n ', NULL, NULL, NULL),
(2, '6.932[J]', 'Linked Data Ventures\n ', NULL, NULL, NULL),
(2, '6.933', 'Entrepreneurship in Engineering: The Founder''s Journey\n ', NULL, NULL, NULL),
(2, '6.935[J]', 'Financial Market Dynamics and Human Behavior\n ', NULL, NULL, NULL),
(2, '6.936', 'StartMIT: Workshop for Entrepreneurs and Innovators\n(New)\n ', NULL, NULL, NULL),
(2, '6.941', 'Statistics for Research Projects: Statistical Modeling and Experiment Design\n ', NULL, 'Statistics', NULL),
(2, '6.945', 'Large-scale Symbolic Systems\n ', NULL, NULL, NULL),
(2, '6.946[J]', 'Classical Mechanics: A Computational Approach\n ', NULL, NULL, NULL),
(2, '6.951', 'Graduate 6-A Internship\n ', NULL, NULL, NULL),
(2, '6.952', 'Graduate 6-A Internship\n ', NULL, NULL, NULL),
(2, '6.960', 'Introductory Research in Electrical Engineering and Computer Science\n ', NULL, 'Research', NULL),
(2, '6.961', 'Introduction to Research in Electrical Engineering and Computer Science\n ', NULL, 'Research', NULL),
(2, '6.962', 'Independent Study in Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.980', 'Teaching Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.981', 'Teaching Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.982[J]', 'Teaching College-Level Science and Engineering\n ', NULL, NULL, NULL),
(2, '6.991', 'Research in Electrical Engineering and Computer Science\n ', NULL, 'Research', NULL),
(2, '6.999', 'Practical Experience in EECS\n ', NULL, NULL, NULL),
(2, '6.EPE', 'UPOP Engineering Practice Experience\n ', NULL, NULL, NULL),
(2, '6.EPW', 'UPOP Engineering Practice Workshop\n ', NULL, NULL, NULL),
(2, '6.S04', 'Special Subject: Fundamentals of Programming\n(New)\n ', NULL, NULL, NULL),
(2, '6.S062', 'Special Subject in Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.S063,', '6.S064 Special Subject in Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.S076-6.S084', 'Special Subject in Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.S08', 'Special Subject: Interconnected Embedded Systems\n(New)\n ', NULL, 'Embedded Systems', NULL),
(2, '6.S085-6.S099', 'Special Subject in Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.S183-6.S192', 'Special Laboratory Subject in Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.S193-6.S198', 'Special Laboratory Subject in Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.S897-6.S899', 'Special Subject in Computer Science\n ', NULL, 'CS', NULL),
(2, '6.S911-6.S919', 'Special Subject in Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.S963-6.S967', 'Special Studies: EECS\n ', NULL, NULL, NULL),
(2, '6.S974', 'Special Subject in Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.S975-6.S979', 'Special Subject in Electrical Engineering and Computer Science\n ', NULL, 'CS', NULL),
(2, '6.THG', 'Graduate Thesis\n ', NULL, NULL, NULL),
(2, '6.THM', 'Master of Engineering Program Thesis\n ', NULL, NULL, NULL),
(2, '6.UAP', 'Undergraduate Advanced Project\n ', NULL, NULL, NULL),
(2, '6.UAR', 'Seminar in Undergraduate Advanced Research\n ', NULL, 'Research', NULL),
(2, '6.UAT', 'Oral Communication\n ', NULL, NULL, NULL),
(2, '6.UR', 'Undergraduate Research in Electrical Engineering and Computer Science\n ', NULL, 'Research', NULL),
(2, '6.URS', 'Undergraduate Research in Electrical Engineering and Computer Science\n ', NULL, 'Research', NULL),
(3, 'COMPSCI10', 'The Beauty and Joy of Computing', '2016 Summer, 2016 Spring, 2015 Fall An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'Graphs', NULL),
(3, 'COMPSCI146L', 'Programmable Digital Systems Laboratory', 'Not yet offered Hardware description languages for digital system design and interactions with tool flows. Design, implementation, and verification of digital designs. Digital synthesis, partitioning, placement, routing, and simulation for Field-Programmable Gate Arrays. Large digital-system design concepts. Project design component – example, a full processor implementation with peripherals.', NULL, NULL),
(3, 'COMPSCI150', 'Components and Design Techniques for Digital Systems', '2014 Fall, 2013 Fall, 2013 Spring Basic building blocks and design methods to contruct synchronous digital systems, such as general purpose processors, hardware accelerators, and application specific processors. Representations and design methodologies for digital systems. Logic design using combinatorial and sequential circuits. Digital system implementation considering hardware descriptions languages, computer-aided design tools, field-programmable gate array architectures, and CMOS logic gates and state elements. Interfaces between peripherals, processor hardware, and software. Formal hardware laboratories and substantial design project.', NULL, NULL),
(3, 'COMPSCI152', 'Computer Architecture and Engineering', '2016 Spring, 2014 Spring, 2013 Spring Instruction set architecture, microcoding, pipelining (simple and complex). Memory hierarchies and virtual memory. Processor parallelism: VLIW, vectors, multithreading. Multiprocessors.', 'Computer Architecture', NULL);
INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(3, 'COMPSCI160', 'User Interface Design and Development', '2016 Spring, 2015 Fall, 2015 Summer The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.', NULL, NULL),
(3, 'COMPSCI161', 'Computer Security', '2016 Spring, 2015 Fall, 2015 Spring Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.', 'Graphs', NULL),
(3, 'COMPSCI162', 'Operating Systems and System Programming', '2016 Spring, 2015 Fall, 2015 Summer Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.', 'Security', NULL),
(3, 'COMPSCI164', 'Programming Languages and Compilers', '2016 Spring, 2015 Fall, 2015 Spring Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.', NULL, NULL),
(3, 'COMPSCI168', 'Introduction to the Internet: Architecture and Protocols', '2015 Fall, 2014 Fall This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet''s scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).', NULL, NULL),
(3, 'COMPSCI169', 'Software Engineering', '2016 Spring, 2015 Fall, 2015 Spring Ideas and techniques for designing, developing, and modifying large software systems. Function-oriented and object-oriented modular design techniques, designing for re-use and maintainability. Specification and documentation. Verification and validation. Cost and quality metrics and estimation. Project team organization and management. Students will work in teams on a substantial programming project.', NULL, NULL),
(3, 'COMPSCI170', 'Efficient Algorithms and Intractable Problems', '2016 Spring, 2015 Fall, 2015 Spring Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.', NULL, NULL),
(3, 'COMPSCI172', 'Computability and Complexity', '2016 Spring, 2015 Spring, 2013 Fall Finite automata, Turing machines and RAMs. Undecidable, exponential, and polynomial-time problems. Polynomial-time equivalence of all reasonable models of computation. Nondeterministic Turing machines. Theory of NP-completeness: Cook''s theorem, NP-completeness of basic problems. Selected topics in language theory, complexity and randomness.', NULL, NULL),
(3, 'COMPSCI174', 'Combinatorics and Discrete Probability', '2016 Spring, 2015 Spring, 2014 Spring Permutations, combinations, principle of inclusion and exclusion, generating functions, Ramsey theory. Expectation and variance, Chebychev''s inequality, Chernov bounds. Birthday paradox, coupon collector''s problem, Markov chains and entropy computations, universal hashing, random number generation, random graphs and probabilistic existence bounds.', 'Graphs', NULL),
(3, 'COMPSCI176', 'Algorithms for Computational Biology', '2015 Fall, 2014 Fall, 2013 Fall Algorithms and probabilistic models that arise in various computational biology applications: suffix trees, suffix arrays, pattern matching, repeat finding, sequence alignment, phylogenetics, genome rearrangements, hidden Markov models, gene finding, motif finding, stochastic context free grammars, RNA secondary structure. There are no biology prerequisites for this course, but a strong quantitative background will be essential.', NULL, NULL),
(3, 'COMPSCI184', 'Foundations of Computer Graphics', '2016 Spring, 2015 Spring, 2014 Fall Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms for clipping, hidden surface removal, rasterization, and anti-aliasing. Scan-line based and ray-based rendering algorithms. Lighting models for reflection, refraction, transparency.', 'Graphs', NULL),
(3, 'COMPSCI186', 'Introduction to Database Systems', '2016 Spring, 2015 Fall, 2015 Spring Access methods and file systems to facilitate data access. Hierarchical, network, relational, and object-oriented data models. Query languages for models. Embedding query languages in programming languages. Database services including protection, integrity control, and alternative views of data. High-level interfaces including application generators, browsers, and report writers. Introduction to transaction processing. Database system implementation to be done as term project.', 'Databases', NULL),
(3, 'COMPSCI188', 'Introduction to Artificial Intelligence', '2016 Spring, 2015 Fall, 2015 Summer Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.', 'Game Design', NULL),
(3, 'COMPSCI189', 'Introduction to Machine Learning', '2016 Spring, 2015 Fall, 2015 Spring Theoretical foundations, algorithms, methodologies, and applications for machine learning. Topics may include supervised methods for regression and classication (linear models, trees, neural networks, ensemble methods, instance-based methods); generative and discriminative probabilistic models; Bayesian parametric learning; density estimation and clustering; Bayesian networks; time series models; dimensionality reduction; programming projects covering a variety of real-world applications.', 'Machine Learning', NULL),
(3, 'COMPSCI194', 'Special Topics', '2016 Spring, 2015 Fall, 2015 Spring Topics will vary semester to semester. See the Computer Science Division announcements.', 'CS', NULL),
(3, 'COMPSCI195', 'Social Implications of Computer Technology', '2016 Spring, 2015 Fall, 2015 Spring Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students will lead discussions on additional topics.', 'Graphs', NULL),
(3, 'COMPSCI197', 'Field Study', '2015 Summer, 2015 Spring, 2014 Fall Students take part in organized individual field sponsored programs with off-campus companies or tutoring/mentoring relevant to specific aspects and applications of computer science on or off campus. Note Summer CPT or OPT students: written report required. Course does not count toward major requirements, but will be counted in the cumulative units toward graduation.', 'CS', NULL),
(3, 'COMPSCI198', 'Directed Group Studies for Advanced Undergraduates', '2016 Spring, 2015 Fall, 2015 Spring Group study of selected topics in Computer Sciences, usually relating to new developments.', 'CS', NULL),
(3, 'COMPSCI199', 'Supervised Independent Study', '2015 Fall, 2015 Summer, 2015 Spring Supervised independent study. Enrollment restrictions apply.', NULL, NULL),
(3, 'COMPSCI250', 'VLSI Systems Design', '2016 Spring, 2014 Fall, 2013 Fall Unified top-down and bottom-up design of integrated circuits and systems concentrating on architectural and topological issues. VLSI architectures, systolic arrays, self-timed systems. Trends in VLSI development. Physical limits. Tradeoffs in custom-design, standard cells, gate arrays. VLSI design tools.', NULL, NULL),
(3, 'COMPSCI252', 'Graduate Computer Architecture', '2015 Fall, 2014 Spring, 2012 Spring Graduate survey of contemporary computer organizations covering: early systems, CPU design, instruction sets, control, processors, busses, ALU, memory, I/O interfaces, connection networks, virtual memory, pipelined computers, multiprocessors, and case studies. Term paper or project is required.', 'Networking', NULL),
(3, 'COMPSCI260A', 'User Interface Design and Development', '2016 Spring, 2015 Fall, 2015 Spring The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.', NULL, NULL),
(3, 'COMPSCI260B', 'Human-Computer Interaction Research', 'Not yet offered This course is a broad introduction to conducting research in Human-Computer Interaction. Students will become familiar with seminal and recent literature; learn to review and critique research papers; re-implement and evaluate important existing systems; and gain experience in conducting research. Topics include input devices, computer-supported cooperative work, crowdsourcing, design tools, evaluation methods, search and mobile interfaces, usable security, help and tutorial systems.', 'Object Oriented Programming', NULL),
(3, 'COMPSCI261', 'Security in Computer Systems', '2015 Fall, 2012 Fall, 2011 Fall Graduate survey of modern topics in computer security, including protection, access control, distributed access security, firewalls, secure coding practices, safe languages, mobile code, and case studies from real-world systems. May also cover cryptographic protocols, privacy and anonymity, and/or other topics as time permits.', 'Graphs', NULL),
(3, 'COMPSCI261N', 'Internet and Network Security', '2015 Spring, 2014 Spring, 2012 Fall Develops a thorough grounding in Internet and network security suitable for those interested in conducting research in the area or those more broadly interested in security or networking. Potential topics include denial-of-service; capabilities; network intrusion detection/prevention; worms; forensics; scanning; traffic analysis; legal issues; web attacks; anonymity; wireless and networked devices; honeypots; botnets; scams; underground economy; attacker infrastructure; research pitfalls.', 'Networking', NULL),
(3, 'COMPSCI262A', 'Advanced Topics in Computer Systems', '2016 Spring, 2014 Fall, 2013 Fall Graduate survey of systems for managing computation and information, covering a breadth of topics: early systems; volatile memory management, including virtual memory and buffer management; persistent memory systems, including both file systems and transactional storage managers; storage metadata, physical vs. logical naming, schemas, process scheduling, threading and concurrency control; system support for networking, including remote procedure calls, transactional RPC, TCP, and active messages; security infrastructure; extensible systems and APIs; performance analysis and engineering of large software systems. Homework assignments, exam, and term paper or project required.', 'Networking', NULL),
(3, 'COMPSCI262B', 'Advanced Topics in Computer Systems', '2009 Spring Continued graduate survey of large-scale systems for managing information and computation. Topics include basic performance measurement; extensibility, with attention to protection, security, and management of abstract data types; index structures, including support for concurrency and recovery; parallelism, including parallel architectures, query processing and scheduling; distributed data management, including distributed and mobile file systems and databases; distributed caching; large-scale data analysis and search. Homework assignments, exam, and term paper or project required.', 'Security', NULL),
(3, 'COMPSCI263', 'Design of Programming Languages', '2014 Spring, 2012 Fall, 2012 Spring Selected topics from: analysis, comparison, and design of programming languages, formal description of syntax and semantics, advanced programming techniques, structured programming, debugging, verification of programs and compilers, and proofs of correctness.', NULL, NULL),
(3, 'COMPSCI264', 'Implementation of Programming Languages', '2011 Spring Compiler construction. Lexical analysis, syntax analysis. Semantic analysis code generation and optimization. Storage management. Run-time organization.', 'Optimization', NULL),
(3, 'COMPSCI265', 'Compiler Optimization and Code Generation', '2009 Fall Table-driven and retargetable code generators. Register management. Flow analysis and global optimization methods. Code optimization for advanced languages and architectures. Local code improvement. Optimization by program transformation. Selected additional topics. A term paper or project is required.', 'Optimization', NULL),
(3, 'COMPSCI268', 'Computer Networks', '2016 Spring, 2014 Spring, 2013 Spring Distributed systems, their notivations, applications, and organization. The network component. Network architectures. Local and long-haul networks, technologies, and topologies. Data link, network, and transport protocols. Point-to-point and broadcast networks. Routing and congestion control. Higher-level protocols. Naming. Internetworking. Examples and case studies.', 'Networking', NULL),
(3, 'COMPSCI270', 'Combinatorial Algorithms and Data Structures', '2016 Spring, 2015 Spring, 2013 Fall Design and analysis of efficient algorithms for combinatorial problems. Network flow theory, matching theory, matroid theory; augmenting-path algorithms; branch-and-bound algorithms; data structure techniques for efficient implementation of combinatorial algorithms; analysis of data structures; applications of data structure techniques to sorting, searching, and geometric problems.', NULL, NULL),
(3, 'COMPSCI271', 'Randomness and Computation', '2011 Fall, 2008 Fall Computational applications of randomness and computational theories of randomness. Approximate counting and uniform generation of combinatorial objects, rapid convergence of random walks on expander graphs, explicit construction of expander graphs, randomized reductions, Kolmogorov complexity, pseudo-random number generation, semi-random sources.', 'Graphs', NULL),
(3, 'COMPSCI273', 'Foundations of Parallel Computation', '2010 Fall, 2009 Spring . Fundamental theoretical issues in designing parallel algorithms and architectures. Shared memory models of parallel computation. Parallel algorithms for linear algegra, sorting, Fourier Transform, recurrence evaluation, and graph problems. Interconnection network based models. Algorithm design techniques for networks like hypercubes, shuffle-exchanges, threes, meshes and butterfly networks. Systolic arrays and techniques for generating them. Message routing.', 'Graphs', NULL),
(3, 'COMPSCI274', 'Computational Geometry', '2015 Spring, 2013 Spring, 2009 Fall . Constructive problems in computational geometry: convex hulls, triangulations, Voronoi diagrams, arrangements of hyperplanes; relationships among these problems. Search problems: advanced data structures; subdivision search; various kinds of range searches. Models of computation; lower bounds.', NULL, NULL),
(3, 'COMPSCI276', 'Cryptography', '2015 Fall, 2014 Fall, 2009 Spring Graduate survey of modern topics on theory, foundations, and applications of modern cryptography. One-way functions; pseudorandomness; encryption; authentication; public-key cryptosystems; notions of security. May also cover zero-knowledge proofs, multi-party cryptographic protocols, practical applications, and/or other topics, as time permits.', 'Graphs', NULL),
(3, 'COMPSCI284A', 'Foundations of Computer Graphics', '2016 Spring, 2015 Spring, 2014 Fall Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations.', 'Graphs', NULL),
(3, 'COMPSCI284B', 'Advanced Computer Graphics Algorithms and Techniques', 'Not yet offered This course provides a graduate-level introduction to advanced computer graphics algorithms and techniques. Students should already be familiar with basic concepts such as transformations, scan-conversion, scene graphs, shading, and light transport. Topics covered in this course include global illumination, mesh processing, subdivision surfaces, basic differential geometry, physically based animation, inverse kinematics, imaging and computational photography, and precomputed light transport.', 'Graphs', NULL),
(3, 'COMPSCI286A', 'Introduction to Database Systems', '2016 Spring, 2015 Fall, 2015 Spring Access methods and file systems to facilitate data access. Hierarchical, network, relational, and object-oriented data models. Query languages for models. Embedding query languages in programming languages. Database services including protection, integrity control, and alternative views of data. High-level interfaces including application generators, browsers, and report writers. Introduction to transaction processing. Database system implementation to be done as term project.', 'Databases', NULL),
(3, 'COMPSCI286B', 'Implementation of Data Base Systems', '2014 Fall Implementation of data base systems on modern hardware systems. Considerations concerning operating system design, including buffering, page size, prefetching, etc. Query processing algorithms, design of crash recovery and concurrency control systems. Implementation of distributed data bases and data base machines.', NULL, NULL),
(3, 'COMPSCI287', 'Advanced Robotics', '2015 Fall, 2013 Fall, 2012 Fall Advanced topics related to current research in algorithms and artificial intelligence for robotics. Planning, control, and estimation for realistic robot systems, taking into account: dynamic constraints, control and sensing uncertainty, and non-holonomic motion constraints.', 'Distributed Applications', NULL),
(3, 'COMPSCI288', 'Natural Language Processing', '2014 Fall, 2011 Spring, 2010 Spring Methods and models for the analysis of natural (human) language data. Topics include: language modeling, speech recognition, linguistic analysis (syntactic parsing, semantic analysis, reference resolution, discourse modeling), machine translation, information extraction, question answering, and computational linguistics techniques.', 'Natural Language Processing', NULL),
(3, 'COMPSCI289A', 'Introduction to Machine Learning', '2016 Spring, 2015 Fall, 2015 Spring This course provides an introduction to theoretical foundations, algorithms, and methodologies for machine learning, emphasizing the role of probability and optimization and exploring a variety of real-world applications. Students are expected to have a solid foundation in calculus and linear algebra as well as exposure to the basic tools of logic and probability, and should be familiar with at least one modern, high-level programming language.', 'Machine Learning', NULL),
(3, 'COMPSCI294', 'Special Topics', '2016 Spring, 2015 Fall, 2015 Spring Topics will vary from semester to semester. See Computer Science Division announcements.', 'CS', NULL),
(3, 'COMPSCI297', 'Field Studies in Computer Science', '2016 Spring, 2015 Fall, 2015 Summer Supervised experience in off-campus companies relevant to specific aspects and applications of electrical engineering and/or computer science. Written report required at the end of the semester.', 'CS', NULL),
(3, 'COMPSCI298', 'Group Studies Seminars, or Group Research', '2016 Spring, 2015 Fall, 2015 Spring Advanced study in various subjects through seminars on topics to be selected each year, informal group studies of special problems, group participation in comprehensive design problems, or group research on complete problems for analysis and experimentation.', 'Research', NULL),
(3, 'COMPSCI299', 'Individual Research', '2016 Spring, 2015 Fall, 2015 Summer Investigations of problems in computer science.', 'Research', NULL),
(3, 'COMPSCI300', 'Teaching Practice', '2011 Fall, 2011 Spring, 2010 Fall Supervised teaching practice, in either a one-on-one tutorial or classroom discussion setting.', NULL, NULL),
(3, 'COMPSCI302', 'Designing Computer Science Education', '2014 Spring, 2012 Spring, 2010 Spring Discussion and review of research and practice relating to the teaching of computer science: knowledge organization and misconceptions, curriculum and topic organization, evaluation, collaborative learning, technology use, and administrative issues. As part of a semester-long project to design a computer science course, participants invent and refine a variety of homework and exam activities, and evaluate alternatives for textbooks, grading and other administrative policies, and innovative uses of technology.', 'Research', NULL),
(3, 'COMPSCI375', 'Teaching Techniques for Computer Science', '2016 Summer, 2016 Spring, 2015 Fall Discussion and practice of techniques for effective teaching, focusing on issues most relevant to teaching assistants in computer science courses.', 'CS', NULL),
(3, 'COMPSCI399', 'Professional Preparation: Supervised Teaching of Computer Science', '2016 Spring, 2015 Fall, 2015 Spring Discussion, problem review and development, guidance of computer science laboratory sections, course development, supervised practice teaching.', 'CS', NULL),
(3, 'COMPSCI39J', 'Freshman/Sophomore Seminar', '2010 Spring, 2009 Fall, 2009 Spring Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.', NULL, NULL),
(3, 'COMPSCI39K', 'Freshman/Sophomore Seminar', '2013 Spring, 2011 Spring, 2010 Spring Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.', NULL, NULL),
(3, 'COMPSCI39M', 'Freshman/Sophomore Seminar', '2008 Fall Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.', NULL, NULL),
(3, 'COMPSCI39N', 'Freshman/Sophomore Seminar', '2009 Fall Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.', NULL, NULL),
(3, 'COMPSCI39P', 'Freshman/Sophomore Seminar', '2013 Spring, 2012 Fall, 2012 Spring Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.', NULL, NULL),
(3, 'COMPSCI39Q', 'Freshman/Sophomore Seminar', '2011 Fall Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.', NULL, NULL),
(3, 'COMPSCI39R', 'Freshman/Sophomore Seminar', '2016 Spring, 2013 Spring Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.', NULL, NULL),
(3, 'COMPSCI47A', 'Completion of Work in Computer Science 61A', '2016 Spring, 2015 Fall, 2014 Fall Implementation of generic operations. Streams and iterators. Implementation techniques for supporting functional, object-oriented, and constraint-based programming in the Scheme programming language. Together with 9D, 47A constitutes an abbreviated, self-paced version of 61A for students who have already taken a course equivalent to 61B.', 'CS', NULL),
(3, 'COMPSCI47B', 'Completion of Work in Computer Science 61B', '2016 Spring, 2015 Fall, 2015 Spring Iterators. Hashing, applied to strings and multi-dimensional structures. Heaps. Storage management. Design and implementation of a program containing hundreds of lines of code. Students with sufficient partial credit in 61B may, with consent of instructor, complete the credit in this self-paced course.', 'CS', NULL),
(3, 'COMPSCI47C', 'Completion of Work in Computer Science 61C', '2016 Spring, 2015 Fall, 2015 Spring MIPS instruction set simulation. The assembly and linking process. Caches and virtual memory. Pipelined computer organization. Students with sufficient partial credit in 61C may, with consent of instructor, complete the credit in this self-paced course.', 'CS', NULL),
(3, 'COMPSCI602', 'Individual Study for Doctoral Students', '2015 Fall, 2014 Fall, 2013 Fall Individual study in consultation with the major field adviser, intended to provide an opportunity for qualified students to prepare themselves for the various examinations required of candidates for the Ph.D. (and other doctoral degrees).', NULL, NULL),
(3, 'COMPSCI61A', 'The Structure and Interpretation of Computer Programs', '2016 Summer, 2016 Spring, 2015 Fall Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant programming projects.', 'CS', NULL),
(3, 'COMPSCI61AS', 'The Structure and Interpretation of Computer Programs (Self-Paced)', '2016 Spring, 2015 Fall, 2015 Summer Introductory programming and computer science. Abstraction as means to control program complexity. Programming paradigms: functional, object-oriented, client/server, and declarative (logic). Control abstraction: recursion and higher order functions. Introduction to asymptotic analysis of algorithms. Data abstraction: abstract data types, type-tagged data, first class data types, sequences implemented as lists and as arrays, generic operators implemented with data-directed programming and with message passing. Implementation of object-oriented programming with closures over dispatch procedures. Introduction to interpreters and compilers. There are several significant programming projects. Course may be completed in one or two semesters. Students must complete a mimimum of two units during their first semester of 61AS.', 'CS', NULL),
(3, 'COMPSCI61B', 'Data Structures', '2016 Spring, 2015 Fall, 2015 Spring Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.', NULL, NULL),
(3, 'COMPSCI61BL', 'Data Structures and Programming Methodology', '2016 Summer, 2015 Summer, 2014 Summer The same material as in 61B, but in a laboratory-based format.', NULL, NULL),
(3, 'COMPSCI61C', 'Machine Structures', '2016 Summer, 2016 Spring, 2015 Fall The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.', 'Operating Systems', NULL),
(3, 'COMPSCI61CL', 'Machine Structures (Lab-Centric)', '2009 Fall, 2009 Spring, 2008 Fall The same material as in 61C but in a lab-centric format.', NULL, NULL),
(3, 'COMPSCI70', 'Discrete Mathematics and Probability Theory', '2016 Summer, 2016 Spring, 2015 Fall Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.', 'Graphs', NULL),
(3, 'COMPSCI88', 'Computational Structures in Data Science', '2016 Spring Development of Computer Science topics appearing in Foundations of Data Science (C8); expands computational concepts and techniques of abstraction. Understanding the structures that underlie the programs, algorithms, and languages used in data science and elsewhere. Mastery of a particular programming language while studying general techniques for managing program complexity, e.g., functional, object-oriented, and declarative programming. Provides practical experience with composing larger systems through several significant programming projects.', 'CS', NULL),
(3, 'COMPSCI94', 'Special Topics', '2016 Spring, 2015 Fall Topics will vary semester to semester. See the Computer Science Division announcements.', 'CS', NULL),
(3, 'COMPSCI97', 'Field Study', '2015 Summer, 2015 Spring, 2014 Fall Students take part in organized individual field sponsored programs with off-campus companies or tutoring/mentoring relevant to specific aspects and applications of computer science on or off campus. Note Summer CPT or OPT students: written report required. Course does not count toward major requirements, but will be counted in the cumulative units toward graduation.', 'CS', NULL),
(3, 'COMPSCI98', 'Directed Group Study', '2015 Fall, 2015 Spring, 2014 Fall Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.', NULL, NULL),
(3, 'COMPSCI99', 'Individual Study and Research for Undergraduates', '2015 Fall, 2015 Spring, 2014 Fall A course for lower division students in good standing who wish to undertake a program of individual inquiry initiated jointly by the student and a professor. There are no other formal prerequisites, but the supervising professor must be convinced that the student is able to profit by the program.', 'Research', NULL),
(3, 'COMPSCI9A', 'Matlab for Programmers', '2016 Spring, 2014 Spring, 2013 Fall Introduction to the constructs in the Matlab programming language, aimed at students who already know how to program. Array and matrix operations, functions and function handles, control flow, plotting and image manipulation, cell arrays and structures, and the Symbolic Mathematics toolbox.', NULL, 'matlab'),
(3, 'COMPSCI9C', 'C for Programmers', '2016 Spring, 2015 Fall, 2015 Spring Self-paced course in the C programming language for students who already know how to program. Computation, input and output, flow of control, functions, arrays, and pointers, linked structures, use of dynamic storage, and implementation of abstract data types.', NULL, NULL),
(3, 'COMPSCI9D', 'Scheme and Functional Programming for Programmers', '2016 Spring, 2015 Spring, 2014 Spring Self-paced course in functional programming, using the Scheme programming language, for students who already know how to program. Recursion; higher-order functions; list processing; implementation of rule-based querying.', NULL, NULL),
(3, 'COMPSCI9E', 'Productive Use of the UNIX Environment', '2016 Spring, 2015 Fall, 2015 Spring Use of UNIX utilities and scripting facilities for customizing the programming environment, organizing files (possibly in more than one computer account), implementing a personal database, reformatting text, and searching for online resources.', NULL, NULL),
(3, 'COMPSCI9F', 'C++ for Programmers', '2016 Spring, 2015 Fall, 2015 Spring Self-paced introduction to the constructs provided in the C++ programming language for procedural and object-oriented programming, aimed at students who already know how to program.', NULL, 'c'),
(3, 'COMPSCI9G', 'JAVA for Programmers', '2016 Spring, 2015 Fall, 2015 Spring Self-paced course in Java for students who already know how to program. Applets; variables and computation; events and flow of control; classes and objects; inheritance; GUI elements; applications; arrays, strings, files, and linked structures; exceptions; threads.', NULL, 'java'),
(3, 'COMPSCI9H', 'Python for Programmers', '2016 Spring, 2015 Fall, 2015 Spring Introduction to the constructs provided in the Python programming language, aimed at students who already know how to program. Flow of control; strings, tuples, lists, and dictionaries; CGI programming; file input and output; object-oriented programming; GUI elements.', NULL, 'python'),
(3, 'COMPSCIC149', 'Introduction to Embedded Systems', 'Not yet offered This course introduces students to the basics of models, analysis tools, and control for embedded systems operating in real time. Students learn how to combine physical processes with computation. Topics include models of computation, control, analysis and verification, interfacing with the physical world, mapping to platforms, and distributed embedded systems. The course has a strong laboratory component, with emphasis on a semester-long sequence of projects.', 'Embedded Systems', NULL),
(3, 'COMPSCIC191', 'Quantum Information Science and Technology', '2014 Fall, 2012 Spring, 2010 Fall This multidisciplinary course provides an introduction to fundamental conceptual aspects of quantum mechanics from a computational and informational theoretic perspective, as well as physical implementations and technological applications of quantum information science. Basic sections of quantum algorithms, complexity, and cryptography, will be touched upon, as well as pertinent physical realizations from nanoscale science and engineering.', 'Graphs', NULL),
(3, 'COMPSCIC219D', 'Concurrent Models of Computation', '2014 Spring, 2011 Fall Theory and practice of concurrent models of computation (MoCs) with applications to software systems, embedded systems, and cyber-physical systems. Analysis for boundedness, deadlock, and determinacy; formal semantics (fixed point semantics and metric-space models); composition; heterogeneity; and model-based design. MoCs covered may include process networks, threads, message passing, synchronous/reactive, dataflow, rendezvous, time-triggered, discrete events, and continuous time.', 'Embedded Systems', NULL),
(3, 'COMPSCIC249A', 'Introduction to Embedded Systems', '2015 Fall This course introduces students to the basics of models, analysis tools, and control for embedded systems operating in real time. Students learn how to combine physical processes with computation. Topics include models of computation, control, analysis and verification, interfacing with the physical world, mapping to platforms, and distributed embedded systems. The course has a strong laboratory component, with emphasis on a semester-long sequence of projects.', 'Embedded Systems', NULL),
(3, 'COMPSCIC267', 'Applications of Parallel Computers', '2016 Spring, 2015 Spring, 2014 Spring Models for parallel programming. Fundamental algorithms for linear algebra, sorting, FFT, etc. Survey of parallel machines and machine structures. Exiting parallel programming languages, vectorizing compilers, environments, libraries and toolboxes. Data partitioning techniques. Techniques for synchronization and load balancing. Detailed study and algorithm/program development of medium sized applications.', 'Embedded Systems', NULL),
(3, 'COMPSCIC280', 'Computer Vision', '2016 Spring, 2015 Spring, 2013 Fall Paradigms for computational vision. Relation to human visual perception. Mathematical techniques for representing and reasoning, with curves, surfaces and volumes. Illumination and reflectance models. Color perception. Image segmentation and aggregation. Methods for bottom-up three dimensional shape recovery: Line drawing analysis, stereo, shading, motion, texture. Use of object models for prediction and recognition.', NULL, NULL),
(3, 'COMPSCIC281A', 'Statistical Learning Theory', '2015 Fall, 2014 Fall, 2014 Spring Classification regression, clustering, dimensionality, reduction, and density estimation. Mixture models, hierarchical models, factorial models, hidden Markov, and state space models, Markov properties, and recursive algorithms for general probabilistic inference nonparametric methods including decision trees, kernal methods, neural networks, and wavelets. Ensemble methods.', 'Networking', NULL),
(3, 'COMPSCIC281B', 'Advanced Topics in Learning and Decision Making', '2016 Spring, 2014 Spring, 2013 Spring Recent topics include: Graphical models and approximate inference algorithms. Markov chain Monte Carlo, mean field and probability propagation methods. Model selection and stochastic realization. Bayesian information theoretic and structural risk minimization approaches. Markov decision processes and partially observable Markov decision processes. Reinforcement learning.', 'Graphs', NULL),
(3, 'COMPSCIC79', 'Societal Risks and the Law', '2013 Spring Defining, perceiving, quantifying and measuring risk; identifying risks and estimating their importance; determining whether laws and regulations can protect us from these risks; examining how well existing laws work and how they could be improved; evaluting costs and benefits. Applications may vary by term. This course cannot be used to complete engineering unit or technical elective requirements for students in the College of Engineering.', NULL, NULL),
(3, 'COMPSCIC8', 'Foundations of Data Science', '2016 Spring Foundations of data science from three perspectives: inferential thinking, computational thinking, and real-world relevance. Given data arising from some real-world phenomenon, how does one analyze that data so as to understand that phenomenon? The course teaches critical concepts and skills in computer programming and statistical inference, in conjunction with hands-on analysis of real-world datasets, including economic data, document collections, geographical data, and social networks. It delves into social and legal issues surrounding data analysis, including issues of privacy and data ownership.', 'Graphs', NULL),
(3, 'COMPSCIH195', 'Honors Social Implications of Computer Technology', '2014 Spring, 2013 Fall, 2013 Spring Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students may lead discussions on additional topics.', 'Graphs', NULL),
(3, 'COMPSCIH196A', 'Senior Honors Thesis Research', '2014 Fall, 2013 Spring, 2012 Fall Thesis work under the supervision of a faculty member. To obtain credit the student must, at the end of two semesters, submit a satisfactory thesis to the Electrical Engineering and Computer Science department archive. A total of four units must be taken. The units many be distributed between one or two semesters in any way. H196A-H196B count as graded technical elective units, but may not be used to satisfy the requirement for 27 upper division technical units in the College of Letters and Science with a major in Computer Science.', 'Research', NULL),
(3, 'COMPSCIH196B', 'Senior Honors Thesis Research', '2011 Spring, 2009 Spring, 2008 Fall Thesis work under the supervision of a faculty member. To obtain credit the student must, at the end of two semesters, submit a satisfactory thesis to the Electrical Engineering and Computer Science department archive. A total of four units must be taken. The units many be distributed between one or two semesters in any way. H196A-H196B count as graded technical elective units, but may not be used to satisfy the requirement for 27 upper division technical units in the College of Letters and Science with a major in Computer Science.', 'Research', NULL),
(3, 'COMPSCIW10', 'The Beauty and Joy of Computing', '2012 Fall This course meets the programming prerequisite for 61A. An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.', 'Graphs', NULL),
(4, 'COMPSCI1', 'COMPSCI 1 - Great Ideas in Computer Science', 'Description: An introduction to the most important discoveries and intellectual paradigms in computer science, designed for students with little or no previous background. Explores problem-solving using high and low-level programming languages; presents an integrated view of computer systems, from switching circuits up through compilers and GUI design. Examines theoretical and practical limitations related to unsolvable and intractable computational problems, and the social and ethical dilemmas presented by such issues as software unreliability and invasions of privacy.', 'CS', NULL),
(4, 'COMPSCI105', 'COMPSCI 105 - Privacy and Technology', 'Description: What is privacy, and how is it affected by recent developments in technology? This course critically examines popular concepts of privacy and uses a rigorous analysis of technologies to understand the policy and ethical issues at play. Case studies: database anonymity, research ethics, wiretapping, surveillance, and others. Course relies on some technical material, but is open and accessible to all students, especially those with interest in economics, engineering, political science, computer science, sociology, biology, law, government, philosophy.', 'Research', NULL),
(4, 'COMPSCI108', 'COMPSCI 108 - Intelligent Systems: Design and Ethical Challenges', 'Description: For centuries, people have imagined smart machines in fictional stories.&nbsp; Computer systems now communicate in speech and text, learn, negotiate, and work in teams (with people and other systems).&nbsp; These intelligent-systems capabilities raise questions about the impact of such systems on people and societies. This course introduces the basic techniques of AI in the context of (science) fiction imaginings and ethical challenges.&nbsp; It examines the roles of design and of policy in reducing potential negative consequences. The course presumes a basic programming ability, but is accessible to concentrators in the humanities and social sciences as well as science and engineering.', NULL, NULL),
(4, 'COMPSCI109', 'COMPSCI 109 - Data Science', 'Description: Learning from data in order to gain useful predictions and insights. This course introduces methods for five key facets of an investigation: data wrangling, cleaning, and sampling to get a suitable data set; data management to be able to access big data quickly and reliably; exploratory data analysis to generate hypotheses and intuition; prediction based on statistical methods such as regression and classification; and communication of results through visualization, stories, and interpretable summaries. Built around three modules: prediction and elections, recommendation and business analytics, and clustering and text analysis.', NULL, NULL),
(4, 'COMPSCI121', 'COMPSCI 121 - Introduction to the Theory of Computation', 'Description: General introduction to the theory of computation, teaching how to reason precisely about computation and prove mathematical theorems about its capabilities and limitations. Finite automata, Turing machines, formal languages, computability, uncomputability, computational complexity, and the P vs. NP question.', NULL, NULL),
(4, 'COMPSCI124', 'COMPSCI 124 - Data Structures and Algorithms', 'Description: Design and analysis of efficient algorithms and data structures. Algorithm design methods, graph algorithms, approximation algorithms, and randomized algorithms are covered.', 'Graphs', NULL),
(4, 'COMPSCI125', 'COMPSCI 125 - Algorithms and Complexity', 'Description: An accelerated introduction to theoretical computer science for students with strong mathematical preparation, to be taken in place of both Computer Science 121 and 124. Algorithm design methods, including graph algorithms, approximation algorithms, and randomized algorithms. Models of computation, computability theory, and computational complexity, including the P vs. NP question.', 'Graphs', NULL),
(4, 'COMPSCI127', 'COMPSCI 127 - Cryptography', 'Description: Cryptography is as old as human communication itself, but has undergone a revolution in the last few decades. It is now about much more than "secret writing" and includes seemingly paradoxical notions such as communicating securely without a shared secret, and computing on encrypted data. In this challenging but rewarding course we will start from the basics of private and public key cryptography and go all the way up to advanced notions such as fully homomorphic encryption and software obfuscation. This is a proof-based course that will be best appreciated by mathematically mature students.', 'Graphs', NULL),
(4, 'COMPSCI134', 'COMPSCI 134 - Networks', 'Description: Networks?of social relationships, economic interdependencies, and digital interactions?are critical in shaping our lives. This course introduces models and algorithms that help us understand networks. Fundamental concepts from applied mathematics, microeconomics, and computer science will be presented through the lens of network science, in order to equip students to usefully analyze the ?big data? generated by online networks. Applications discussed include the viral spread of ideas, maximizing influence, and the contagion of economic downturns.&nbsp; Concepts and tools covered include game theory, graph theory, data mining, and machine learning.', 'Game Design', NULL),
(4, 'COMPSCI136', 'COMPSCI 136 - Economics and Computation', 'Description: The interplay between economic thinking and computational thinking as it relates to electronic commerce, social networks, collective intelligence and networked systems. Topics covered include: game theory, peer production, reputation and recommender systems, prediction markets, crowd sourcing, network influence and dynamics, auctions and mechanisms, privacy and security, matching and allocation problems, computational social choice and behavioral game theory. Emphasis will be given to core methodologies, with students engaged in theoretical, computational and empirical exercises.', 'Game Design', NULL),
(4, 'COMPSCI141', 'COMPSCI 141 - Computing Hardware', 'Description: Introduction to the design, structure, and operation of digital computers; logic circuits and digital electronics; computer arithmetic; computer architecture; and machine language programming. Consideration of the design interactions between hardware and software systems.', 'Computer Architecture', NULL);
INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(4, 'COMPSCI144R', 'COMPSCI 144R - Networks Design Projects', 'Description: Networking has evolved to a new era of supporting large-scale distributed computing for big data. These new networks are software defined in the sense that they can be dynamically programmed to meet various communications needs in computing. In CS 144r/244r, students will obtain the knowledge and experience necessary not only to understand this momentous technological shift in networking, but also to be able to play a part themselves. To this end, the course will not only teach the fundamental concepts necessary to understand this emerging field of software-defined networking, but also real world applications of the technologies such as next-generation ultra-dense 5G cellular networks, as well as their connection with complementary topics such as machine learning. The class will be organized into the following eight modules: A View of the Future: The Promise of Next Generation Networking; Basic Network Design and Protocols; Datacenter Design and Networking; Software Defined Networking; Cross-Disciplinary Applications of Next Generation Networking: Machine Learning, Distributed Computing, and Consumer Applications; Wireless Networking: 5G Networks and Millimeter Wave Communication; Connecting the Internet of Things; Next Generation Networking Enabled Infrastructure: Network Function Virtualization. Students will gain mastery of the subject through lectures, programming assignments, discussion of the latest networking literature, and a final project. Students will have wide latitude in designing and implementing a final project they are passionate about. Industry partners will support the course and provide resources for the final projects.', 'Machine Learning', NULL),
(4, 'COMPSCI148', 'COMPSCI 148 - Design of VLSI Circuits and Systems', 'Description: Presentation of concepts and techniques for the design and fabrication of VLSI systems and digital MOS integrated circuits. Topics include: basic semiconductor theory; MOS transistors and digital MOS circuits design; synchronous machines, clocking, and timing issues; high-level description and modeling of VLSI systems; synthesis and place and route design flows; and testing of VLSI circuits and systems. Various CAD tools for design, simulation, and verification are extensively used.', NULL, NULL),
(4, 'COMPSCI152', 'COMPSCI 152 - Programming Languages', 'Description: Comprehensive introduction to the principal features and overall design of both traditional and modern programming languages, including syntax, formal semantics, abstraction mechanisms, modularity, type systems, naming, polymorphism, closures, continuations, and concurrency. Provides the intellectual tools needed to design, evaluate, choose, and use programming languages.', NULL, NULL),
(4, 'COMPSCI153', 'COMPSCI 153 - Compilers', 'Description: Implementation of efficient interpreters and compilers for programming languages. Associated algorithms and pragmatic issues. Emphasizes practical applications including those outside of programming languages proper. Also shows relationships to programming-language theory and design. Participants build a working compiler including lexical analysis, parsing, type checking, code generation, and register allocation. Exposure to run-time issues and optimization.', 'Optimization', NULL),
(4, 'COMPSCI161', 'COMPSCI 161 - Operating Systems', 'Description: The fundamental principles of resource management and abstraction in modern operating systems. Control abstractions: threads, processes, scheduling, synchronization. Storage abstractions: dynamic memory allocation, virtual memory, file system design. Communication abstractions: interprocess communication, networking. Case studies. Design and implementation of parts of a multiuser multitasking virtual-memory operating system.', 'Networking', NULL),
(4, 'COMPSCI165', 'COMPSCI 165 - Data Systems', 'Description: We are in the big data era and data systems sit in the critical path of everything we do, i.e., in businesses, in sciences, as well as in everyday life. This course will be a comprehensive introduction to modern data systems. The primary focus of the course will be on modern trends that are shaping the data management industry right now such as column-store and hybrid systems, shared nothing architectures, cache conscious algorithms, hardware/software codesign, main memory systems, adaptive indexing, stream processing, scientific data management, and key value stores. We will also study the history of data systems and traditional and seminal concepts and ideas such as the relational model, row-store database systems, optimization, indexing, concurrency control, recovery and SQL in order to understand both how data systems have evolved over the years and why, as well as how these concepts apply today and how data systems might evolve in the future.', 'Optimization', NULL),
(4, 'COMPSCI171', 'COMPSCI 171 - Visualization', 'Description: An introduction to key design principles and techniques for visualizing data. Covers design practices, data and image models, visual perception, interaction principles, visualization tools, and applications. Introduces programming of web-based interactive visualizations.', NULL, NULL),
(4, 'COMPSCI175', 'COMPSCI 175 - Computer Graphics', 'Description: This course covers the fundamentals of 3D computer graphics using a modern shader-based version of OpenGL. Main topics include: geometric coordinate systems and transformations, keyframe animation and interpolation, camera simulation, triangle rasterization, material simulation, texture mapping, image sampling and color theory. The course also touches on ray tracing, geometric modeling and simulation-based animation.', 'Graphs', NULL),
(4, 'COMPSCI179', 'COMPSCI 179 - Design of Useful and Usable Interactive Systems', 'Description: The course covers skills and techniques necessary to design innovative interactive&nbsp;products that are useful, usable and that address important needs of people other than&nbsp;yourself. You will learn how to uncover needs that your customers cannot even articulate. You will also learn a range of design principles, effective creativity-related practices, and techniques for rapidly creating and evaluating product prototypes. You will also have several opportunities to formally communicate your design ideas to a variety of audiences. You will complete two large team-based design projects.', NULL, NULL),
(4, 'COMPSCI181', 'COMPSCI 181 - Machine Learning', 'Description: Introduction to machine learning, providing a probabilistic view on artificial intelligence and reasoning under uncertainty. Topics include: supervised learning, ensemble methods and boosting, neural networks, support vector machines, kernel methods, clustering and unsupervised learning, maximum likelihood, graphical models, hidden Markov models, inference methods, and computational learning theory. Students should feel comfortable with multivariate calculus, linear algebra, probability theory, and complexity theory. Students will be required to produce non-trivial programs in Python.', 'Graphs', NULL),
(4, 'COMPSCI182', 'COMPSCI 182 - Artificial Intelligence', 'Description: Introduction to AI focused on problems in reasoning about action and rational decision making, covering search, knowledge representation and planning. Search: heuristics, informed search and optimization; constraint satisfaction; game playing. Knowledge representation: logics, efficient logical inference, reasoning about categories. Planning: action representations and planning algorithms, hierarchical task networks, sequential decision making. Applications to multi-agent systems, robotics and natural-language processing. Discussion of relevant work in philosophy, economics, and decision theory.', 'Game Design', NULL),
(4, 'COMPSCI189', 'COMPSCI 189 - Autonomous Robot Systems', 'Description: Building autonomous robotic systems requires understanding how to make robots that observe, reason, and act.&nbsp; Each component uses many engineering principles: how to fuse, multiple, noisy sensors; how to balance short-term versus long-term goals; how to control one?s actions and how to coordinate with others. This year theme will be "Robots Roam the Halls", where we will focus on kinect-based robots that move in the SEAS buildings, to do applications like navigating, map building, and interacting with people. The class format will have a mixed lecture and lab format, and have a final project component.', NULL, NULL),
(4, 'COMPSCI20', 'COMPSCI 20 - Discrete Mathematics for Computer Science', 'Description: Widely applicable mathematical tools for computer science, including topics from logic, set theory, combinatorics, number theory, probability theory, and graph theory. Practice in reasoning formally and proving theorems.', 'Graphs', NULL),
(4, 'COMPSCI205', 'COMPSCI 205 - Computing Foundations for Computational Science', 'Description: An applications course highlighting the use of computers in solving scientific problems. Students will be exposed to fundamental computer science concepts such as computer architectures, data structures, algorithms, and parallel computing. Fundamentals of scientific computing including abstract thinking, algorithmic development, and assessment of computational approaches. Students will learn to use open source tools and libraries and apply them to data analysis, modeling, and visualization of real scientific problems. Emphasizes parallel programming and "parallel thinking.', 'Computer Architecture', NULL),
(4, 'COMPSCI207', 'COMPSCI 207 - Systems Development for Computational Science', 'Description: This is a project-based course emphasizing designing, building, testing, maintaining and modifying software for scientific computing. Students will work in groups on a number of projects, ranging from small data-transformation utilities to large-scale systems. Students will learn to use a variety of tools and languages, as well as various techniques for organizing teams. Most important, students will learn to fit tools and approaches to the problem being solved.', NULL, NULL),
(4, 'COMPSCI221', 'COMPSCI 221 - Computational Complexity', 'Description: A quantitative theory of the resources needed for computing and the impediments to efficient computation. The models of computation considered include ones that are finite or infinite, deterministic, randomized, quantum or nondeterministic, discrete or algebraic, sequential or parallel.', NULL, NULL),
(4, 'COMPSCI229R', 'COMPSCI 229R - Information Theory in Computer Science', 'Description: This advanced graduate course will introduce students to tools from Information Theory that have seen applications in Computer Science: List of topics include:1) Basic tools of Information Theory2) Distribution Testing3) Moser''s algorithmic LLL4) Communication Complexity5) Parallel repetition and Direct Product Theorems5) Polar Codes and CapacityCourse will be run in seminar style with students presenting half the lectures.The following courses illustrate some of the topics that we will cover:http://www.cs.cmu.edu/~venkatg/teaching/ITCS-spr2013/https://catalyst.uw.edu/workspace/anuprao/15415/86593http://ttic.uchicago.edu/~madhurt/courses/infotheory2014/index.htmlhttp://www.cs.princeton.edu/~mbraverm/pmwiki/uploads/COS597F-info.pdf', 'CS', NULL),
(4, 'COMPSCI234R', 'COMPSCI 234R - Topics on Computation in Networks and Crowds', 'Description: Topics on the design and analysis of algorithms, processes, and systems related to crowds and social networks. Readings in AI, theoretical CS, machine learning, social science theory, economic theory, and operations research.', 'Machine Learning', NULL),
(4, 'COMPSCI236R', 'COMPSCI 236R - Topics at the Interface between Computer Science and Economics', 'Description: Interplay between computation and economics. Topics in electronic commerce, computational social choice, computational mechanism design, peer production, prediction markets and reputation systems. Readings in AI, theoretical CS, multi-agent systems, economic theory, and operations research.', 'Research', NULL),
(4, 'COMPSCI242', 'COMPSCI 242 - Computing at Scale', 'Description: Scaling computation over distributed computing systems is essential for applications such as mathematical optimization involving massive amounts of data. For example, it can speed up performance tuning of a machine learning model by orders of magnitude. This is a rapidly advancing area with high interest from both academia and industry. In this course, students will learn not only efficient but also principled methods of mapping computation onto a large number of distributed compute nodes. Important, yet often difficult-to-comprehend concepts and techniques, will be covered. After having taken the course, it is expected that students can dive into these topics deeply by themselves, as needed.', 'Machine Learning', NULL),
(4, 'COMPSCI244R', 'COMPSCI 244R - Networks Design Projects', 'Description: The contents and course requirements are similar to those of Computer Science 144r, with the exception that students enrolled in Computer Science 244r are expected to do substantial system implementation and perform graduate-level work.', 'CS', NULL),
(4, 'COMPSCI247R', 'COMPSCI 247R - Advanced Topics in Computer Architecture', 'Description: Seminar course exploring recent research in computer architecture. Topics vary from year to year and will include subjects such as multi-core architectures, energy-efficient computing, reliable computing, and the interactions of these issues with system software. Students read and present research papers, undertake a research project.', 'Research', NULL),
(4, 'COMPSCI248', 'COMPSCI 248 - Advanced Design of VLSI Circuits and Systems', 'Description: The contents and course requirements are similar to those of Computer Science 148, with the exception that students enrolled in Computer Science 248 are expected to do a substantial design project and paper discussions on advanced topics.', 'CS', NULL),
(4, 'COMPSCI252R', 'COMPSCI 252R - Advanced Topics in Programming Languages', 'Description: Seminar course exploring recent research in programming languages. Topics vary from year to year. Students read and present research papers, undertake a research project.', 'Research', NULL),
(4, 'COMPSCI262', 'COMPSCI 262 - Introduction to Distributed Computing', 'Description: An examination of the special problems associated with distributed computing such as partial failure, lack of global knowledge, asynchrony and coordination of time, and protocols that function in the face of these problems. Emphasis on both the theory that grounds thinking about these systems and in the ways to design and build such systems.', 'Distributed Applications', NULL),
(4, 'COMPSCI263', 'COMPSCI 263 - Systems Security', 'Description: This course explores practical attacks on modern computer systems, explaining how those attacks can be mitigated using careful system design and the judicious application of cryptography. The course discusses topics like buffer overflows, web security, information flow control, and anonymous communication mechanisms such as Tor. The course includes several small projects which give students hands-on experience with various offensive and defensive techniques; the final, larger project is open-ended and driven by student interests.', 'Graphs', NULL),
(4, 'COMPSCI265', 'COMPSCI 265 - Big Data Systems', 'Description: Big data is everywhere. A fundamental goal across numerous modern businesses and sciences is to be able to exploit as many machines as possible, to consume as much information as possible and as fast as possible. The big challenge is "how to turn data into useful knowledge". This is far from a simple task and a moving target as both the underlying hardware and our ability to collect data evolve. In this class, we will discuss how to design data systems and algorithms that can "scale up" and "scale out". Scale up refers to the ability to use a single machine to all its potential, i.e., to exploit properly the memory hierarchy and the multiple CPU and GPU cores. Scale out refers to the ability to use more than 1 machines (typically 100s or 1000s) effectively. This is a research oriented class. Every week we will read two modern research papers; one from the scale up area and one from the scale out area. We will use examples from several areas, including relational systems and distributed databases, graph processing systems (i.e., for social networks), key value stores, noSQL and newSQL systems as well as mobile computing. Each student will work on a semester long data systems research project (in groups of 2-4 students) which can be in any of the above areas and will be based on an open research problem.', 'Graphs', NULL),
(4, 'COMPSCI278', 'COMPSCI 278 - Rendering and Image Processing in Computer Graphics', 'Description: Advanced course in computer graphics focusing on image rendering and processing. Topics include: light transport, efficient rendering, image based rendering, texture processing, interactive image processing.', 'Graphs', NULL),
(4, 'COMPSCI281', 'COMPSCI 281 - Advanced Machine Learning', 'Description: Advanced statistical machine learning and probabilistic data analysis. Topics include: Markov chain Monte Carlo, variational inference, Bayesian nonparametrics, text topic modeling, unsupervised learning, dimensionality reduction and visualization. Requires a major final project.', 'Machine Learning', NULL),
(4, 'COMPSCI283', 'COMPSCI 283 - Computer Vision', 'Description: Vision as an ill-posed inverse problem: image formation, two-dimensional signal processing; feature analysis; image segmentation; color, texture, and shading; multiple-view geometry; object and scene recognition; and applications.', NULL, NULL),
(4, 'COMPSCI284', 'COMPSCI 284 - Optimization Algorithms for Robotics', 'Description: Computational methods have revolutionized the way we control the motions of complex, nonlinear, and underactuated robots. In this course, we study a variety of optimization algorithms for designing and stabilizing trajectories for walking, manipulating, and flying systems. Topics will include optimal control (HJB and Pontryagin?s minimum principle), nonlinear optimization, trajectory planning (shooting and direct methods) and stabilization, model-predictive control, legged systems (classical models, humanoids, centriodal dynamics), convex methods for control and stability analysis, and optimization through frictional contact. Students will gain practical experience implementing modern algorithms to control a variety of simulated systems using the Drake software toolbox.**http://drake.mit.edu', 'Optimization', NULL),
(4, 'COMPSCI287', 'COMPSCI 287 - Statistical Natural Language Processing', 'Description: Focuses on statistical and machine learning approaches to natural language processing. Methods include log-linear models, hidden Markov models and conditional random fields, expectation maximization, and neural networks. Natural language topics include language modelling, tagging and information extraction, syntactic parsing, and machine translation. As part of the course, students will also undertake a final research project.', 'Natural Language Processing', NULL),
(4, 'COMPSCI289', 'COMPSCI 289 - Biologically-inspired Multi-agent Systems', 'Description: Surveys biologically-inspired approaches to designing distributed systems. Focus is on algorithms, analysis, and programming paradigms. Topics: swarm intelligence, amorphous computing, immune-inspired systems, synthetic biology. Discussion of research papers and a research project required.', 'Distributed Applications', NULL),
(4, 'COMPSCI299R', 'COMPSCI 299R - Special Topics in Computer Science', 'Description: Supervision of experimental or theoretical research on acceptable computer science problems and supervision of reading on topics not covered by regular courses of instruction.', 'Research', NULL),
(4, 'COMPSCI304', 'COMPSCI 304 - Statistical Machine Learning', NULL, 'Machine Learning', NULL),
(4, 'COMPSCI306', 'COMPSCI 306 - Readable, Extensible, High-Performance Software Systems', NULL, NULL, NULL),
(4, 'COMPSCI308', 'COMPSCI 308 - Biologically-Inspired Multi-Agent Systems, Distributed Systems, and Computational Biology', NULL, 'Distributed Applications', NULL),
(4, 'COMPSCI310', 'COMPSCI 310 - Computational Mechanism Design, Electronic Marketplaces, and Multi-Agent Systems', NULL, NULL, NULL),
(4, 'COMPSCI312', 'COMPSCI 312 - Collaborative Systems, AI Planning, and Natural Language Processing', NULL, 'Natural Language Processing', NULL),
(4, 'COMPSCI314', 'COMPSCI 314 - Visual Computing', NULL, NULL, NULL),
(4, 'COMPSCI316', 'COMPSCI 316 - Social Computing: Computation and Economics', NULL, NULL, NULL),
(4, 'COMPSCI320', 'COMPSCI 320 - Data Systems Design', NULL, NULL, NULL),
(4, 'COMPSCI322', 'COMPSCI 322 - Databases, Operating System, and Software Design', NULL, 'Databases', NULL),
(4, 'COMPSCI324', 'COMPSCI 324 - Human-Computer Communication through Natural, Graphical, and Artificial Languages', NULL, 'Graphs', NULL),
(4, 'COMPSCI326', 'COMPSCI 326 - Intelligent Interactive Systems and Human-Computer', NULL, NULL, NULL),
(4, 'COMPSCI327', 'COMPSCI 327 - Tools for Reliable Meaningful Efficient Communication', NULL, NULL, NULL),
(4, 'COMPSCI328', 'COMPSCI 328 - Mathematical Logic, Theory of Computation', NULL, NULL, NULL),
(4, 'COMPSCI344', 'COMPSCI 344 - Computer Architecture: Modeling and Design', NULL, 'Computer Architecture', NULL),
(4, 'COMPSCI346', 'COMPSCI 346 - High-Performance Computer Systems', NULL, NULL, NULL),
(4, 'COMPSCI348', 'COMPSCI 348 - Computer Vision', NULL, NULL, NULL),
(4, 'COMPSCI352', 'COMPSCI 352 - Cryptography: Unbreakable Codes and Financial Cryptography', NULL, 'Graphs', NULL),
(4, 'COMPSCI356', 'COMPSCI 356 - Computational Complexity, Parallel Computation, Computational Learning, Neural Computation', NULL, 'Neural Algorithms', NULL),
(4, 'COMPSCI358', 'COMPSCI 358 - Computational Complexity, Cryptography, and Pseudorandomness', NULL, 'Graphs', NULL),
(4, 'COMPSCI360', 'COMPSCI 360 - On-line Algorithms and Randomized Algorithms', NULL, NULL, NULL),
(4, 'COMPSCI362', 'COMPSCI 362 - Software Systems: Security, Performance, and Robustness', NULL, 'Security', NULL),
(4, 'COMPSCI364', 'COMPSCI 364 - Programming Languages and Security', NULL, 'Security', NULL),
(4, 'COMPSCI365', 'COMPSCI 365 - SEAS Teaching Practicum', 'Description: Gain effective skills for teaching applied sciences. Topics: presentation and communication, grading and giving feedback on assignments, cognition and learning, classroom practice and student interactions. Seminar style with an emphasis on observation, practice, feedback, discussion, and reflection.', NULL, NULL),
(4, 'COMPSCI376', 'COMPSCI 376 - Computer Graphics', NULL, 'Graphs', NULL),
(4, 'COMPSCI378', 'COMPSCI 378 - Sketching Algorithms for Massive Data', NULL, NULL, NULL),
(4, 'COMPSCI380', 'COMPSCI 380 - Algorithms for Social Data', NULL, NULL, NULL),
(4, 'COMPSCI382', 'COMPSCI 382 - Natural Language Understanding and Generation', NULL, NULL, NULL),
(4, 'COMPSCI384', 'COMPSCI 384 - Advanced Control, Estimation, and Analysis of Robots and Dynamical Systems', NULL, NULL, NULL),
(4, 'COMPSCI386', 'COMPSCI 386 - Machine Learning', NULL, 'Machine Learning', NULL),
(4, 'COMPSCI50', 'COMPSCI 50 - Introduction to Computer Science I', 'Description: Introduction to the intellectual enterprises of computer science and the art of programming. This course teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, algorithms, data structures, encapsulation, resource management, security, software engineering, and web development. Languages include C, PHP, and JavaScript plus SQL, CSS, and HTML. Problem sets inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. Designed for concentrators and non-concentrators alike, with or without prior programming experience. 72% of CS50 students have never taken CS before.', 'Graphs', NULL),
(4, 'COMPSCI51', 'COMPSCI 51 - Introduction to Computer Science II', 'Description: Abstraction and design in computation. Topics include functional and object-oriented styles of programming, software engineering in the small, and models of computation. Our main goal is to understand how to design large programs to make them readable, maintainable, elegant, and efficient.', 'CS', NULL),
(4, 'COMPSCI61', 'COMPSCI 61 - Systems Programming and Machine Organization', 'Description: Fundamentals of computer systems programming, machine organization, and performance tuning. This course provides a solid background in systems programming and a deep understanding of low-level machine organization and design. Topics include C and assembly language programming, program optimization, memory hierarchy and caching, virtual memory and dynamic memory management, concurrency, threads, and synchronization.', 'Optimization', NULL),
(4, 'COMPSCI91R', 'COMPSCI 91R - Supervised Reading and Research', 'Description: Supervised individual study of advanced topics in computer science. A student wishing to enroll in Computer Science 91r must be accepted by a faculty member who will supervise the course work. A form available from the Student Affairs Office, Pierce Hall 110, must be filled out and signed by the student and faculty supervisor. Students writing theses may enroll in this course while conducting thesis research and writing.', 'Research', NULL),
(4, 'CSCIE-107', 'Introduction to Data Science', 'Description: Unprecedented advances in digital technology during the second half of the twentieth century is transforming science, including health and biomedical research. Scientific fields that have traditionally relied upon simple data analysis techniques of smaller datasets have been transformed recently by technologies that continue to expand the possibilities of observing and deciphering molecular entities in an unprecedented way. This course includes concepts from statistics, computer science, and software engineering. We learn the necessary skills to manage and analyze data. We learn concepts such as exploratory data analysis, statistical inference and modeling, machine learning, and high dimensional data analysis. We also learn the necessary skill to develop data products including R programming, data wrangling, reproducible research, and communicating results. The recorded lectures are from the T.H. Chan School of Public Health course Biostatistics 260.<br /> <br /> Prerequisites: Basic programming skills. CSCI E-10b, CSCI E-50, CSCI E-50b, or the equivalent.', 'Machine Learning', NULL),
(4, 'CSCIE-109', 'Data Science', 'Description: This course examines learning from data in order to gain useful predictions and insights. It introduces methods for five key facets of an investigation: data wrangling, cleaning, and sampling to get a suitable data set; data management to be able to access big data quickly and reliably; exploratory data analysis to generate hypotheses and intuition; prediction based on statistical methods such as regression and classification; and communication of results through visualization, stories, and interpretable summaries. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 109.<br /> <br /> Prerequisites: CSCI E-26 and STAT E-150, or the equivalent.', 'CS', NULL),
(4, 'CSCIE-10a', 'Introduction to Computer Science Using Java I', 'Description: Intended for students with no previous programming background, this course introduces problem-solving methods and algorithm development using the high-level programming language Java. Students learn how to design, code, debug, and document programs using modern engineering techniques in the Unix environment. Related topics include programming using iterative constructs, the basic aspects of arrays and recursion, string manipulation, parameter passing, information hiding and encapsulation using classes, and the functional decomposition of methods to enable object-oriented design. Some applications are chosen for their relevance to more advanced coursework in computer science while others involve nonscientific and business-related areas. Students can count two of the following three courses CSCI E-10a, CSCI E-10b, and CSCI E-50 toward a degree. They cannot count all three toward a degree.', 'CS', 'java'),
(4, 'CSCIE-10b', 'Introduction to Computer Science Using Java II', 'Description: This is the second course in object-oriented programming methods using Java. It begins with the implementation of abstract data types using classes, objects, and overloaded methods. Other topics include strings, multidimensional arrays, vectors, and linked lists; streams and file I/O; recursion; exception handling; threads and event-driven programming; and graphical user interface design using the Swing classes. The course also introduces the RISC machine architecture and aspects of compilers and operating systems. Programming exercises are conducted in both Unix and PC-based environments. Students can count two of the following three courses CSCI E-10a, CSCI E-10b, and CSCI E-50 toward a degree. The recorded lectures are from the 2015 course.<br /> <br /> Prerequisites: CSCI E-10a, or the equivalent experience in a high-level programming language such as C, C++, or Java.', 'Graphs', 'java'),
(4, 'CSCIE-12', 'Fundamentals of Website Development', 'Description: This course provides a comprehensive overview of website development. Students explore the prevailing vocabulary, tools, and standards used in the field and learn how the various facets including HTML5, XHTML, CSS, JavaScript, Ajax, multimedia, scripting languages, HTTP, clients, servers, and databases function together in today''s web environment. The course provides a solid web development foundation, focusing on content and client-side (browser) components (HTML5, XHTML, CSS, JavaScript, multimedia), with an overview of the server-side technologies. In addition, software and services that are easily incorporated into a website (for example, maps, checkout, blogs, content management) are surveyed and discussed. Students produce an interactive website on the topic of their choice for the final project and leave the course prepared for more advanced and focused web development studies.<br /> <br /> Prerequisites: Basic familiarity working with computers, including file management.', NULL, NULL),
(4, 'CSCIE-121', 'Introduction to the Theory of Computation', 'Description: This course is an introduction to the theory of computation, teaching how to reason precisely about computation and prove mathematical theorems about its capabilities and limitations. Topics include finite automata, Turing machines, formal languages, computability, uncomputability, computational complexity, and the P vs. NP question. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 121.<br /> <br /> Prerequisites: CSCI E-20 and CSCI E-22 with final grades of B+ or higher, or the equivalent.', 'CS', NULL),
(4, 'CSCIE-124', 'Data Structures and Algorithms', 'Description: This is a rigorous course on the design and analysis of efficient algorithms and their associated data structures. Algorithm design methods, graph algorithms, approximation algorithms, and randomized algorithms are covered. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 124.<br /> <br /> Prerequisites: CSCI E-22, or the equivalent, and some knowledge of discrete mathematics (CSCI E-20 or the equivalent).', 'Graphs', NULL),
(4, 'CSCIE-127', 'Introduction to Cryptography', 'Description: Cryptography is as old as human communication itself, but has undergone a revolution in the last few decades. It is now about much more than secret writing and includes seemingly paradoxical notions such as communicating securely without a shared secret and computing on encrypted data. In this challenging but rewarding course, we start from the basics of private and public key cryptography and go all the way up to advanced notions such as fully homomorphic encryption and software obfuscation. This is a proof-based course that is best appreciated by mathematically mature students. The recorded lectures are from the John A. Paulson School of Engineering and Applied Sciences course Computer Science 127.<br /> <br /> Prerequisites: Comfort with mathematical proofs at the level of CSCI E-121, CSCI E-124, or the equivalent.', 'Graphs', NULL),
(4, 'CSCIE-15', 'Dynamic Web Applications', 'Description: This course is the next step for students who have experience with HTML/CSS and are looking to take their web programming skills to the next level with server-side web development. Websites can be relatively static mediums: a simple portfolio or a site for a local coffee shop are two examples of basic sites with hard-coded content. This format works well for presenting the same information for every visitor to the site. Web applications, however, take websites to the next level. Think about your experience with online banks, tools like Google Docs, and online stores like Amazon. These are all robust applications operating with databases and offering a personalized experience to each individual user. Over the course of the semester we cover the skills necessary to evolve simple static websites into dynamic, database-driven web applications. The following technologies are covered: object-oriented PHP using the expressive MVC framework, Laravel, basic server setup and management, version control with Git, dependency management, testing, and other modern web development practices.<br /> <br /> Prerequisites: CSCI E-12 or equivalent; must be comfortable with HTML/CSS and foundational web site authoring/publishing. Basic programming experience is required. The language(s) you have experience with does not matter just as long as you are familiar with foundational concepts such as variables, functions, conditionals, loops.', 'Embedded Systems', NULL),
(4, 'CSCIE-152', 'Programming Languages', 'Description: This course is an introduction to the theory, design, and implementation of programming languages. Topics covered in this course include formal semantics of programming languages (operational, axiomatic, denotational, and translational), type systems, higher-order functions and lambda calculus, lazy evaluations, continuations, dynamic types, monads, objects, modules, concurrency, and communication. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 152.<br /> <br /> Prerequisites: CSCI E-51 is required; CSCI E-121 is recommended. This is not an introduction to programming. Students should already know how to program, ideally in several languages. Students must be comfortable with recursion, proofs, and basic mathematical ideas and notations, including sets, relations, functions, and induction.', 'CS', NULL),
(4, 'CSCIE-165', 'Data Systems', 'Description: Data is everywhere. Every year we create even more data. As it stands, every two days we create as much data as we created from the dawn of humanity up to 2003. It is a $100B industry, growing 10 percent every year and at the same time, data systems research and the whole industry are going through a major and continuous transition. Given that new data-driven scenarios and applications continuously pop up, there is a continuous need to redefine what is a good data system in such dynamic environments. This course is a comprehensive introduction to modern data systems. The primary focus is on modern trends that are shaping the data management industry right now such as column-store and hybrid systems, shared nothing architectures, cache-conscious algorithms, hardware/software co-design, main memory systems, adaptive indexing, stream processing, scientific data management, and key value stores. We also study the history of data systems, and concepts and ideas such as the relational model, row-store database systems, optimization, indexing, concurrency control, recovery, and SQL. In this way, we discuss both how data systems evolved over the years and why, as well as how these concepts apply today and how data systems might evolve in the future. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 165.<br /> <br /> Prerequisites: CSCI E-50 and CSCI E-61, or the equivalent.', 'Optimization', NULL),
(4, 'CSCIE-171', 'Visualization', 'Description: The amount and complexity of information produced in science, engineering, business, and everyday human activity is increasing at staggering rates. The goal of this course is to expose students to visual representation methods and techniques that increase the understanding of complex data. Good visualizations not only present a visual interpretation of data, but do so by improving comprehension, communication, and decision making. In this course, students learn how the human visual system processes and perceives images, good design practices for visualization, tools for visualization of data from a variety of fields, and programming of interactive web-based visualizations using D3. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 171.<br /> <br /> Prerequisites: Students are expected to have programming experience (for example, CSCI E-50) and ideally some experience with web development. Exceptions by permission of the instructor.', 'CS', NULL),
(4, 'CSCIE-18', 'Web Development Using XML', 'Description: Students learn key XML technologies (XML, XQuery, XPath, XSLT, RNG, XML Schema, Schematron, DTD) used for open data exchange as well as specific XML-based presentation and publishing formats (HTML5/XHTML, SVG, RSS, XSL-FO, DocBook, OpenDocument). In addition, the course covers topics such as XML programming APIs (DOM and SAX), native XML databases (eXistdb and BaseX), XML publishing pipelines (Apache Cocoon, XProc), and the basics of the semantic web and linked data. Using these technologies, students develop dynamic, data-driven websites that are capable of delivering content in a variety of media formats (screen, text, print, graphics) to a variety of devices for a variety of audiences.<br /> <br /> Prerequisites: CSCI E-12, or the equivalent experience.', 'Graphs', NULL),
(4, 'CSCIE-181', 'Machine Learning', 'Description: This course is an introduction to machine learning, providing a probabilistic view on artificial intelligence and reasoning under uncertainty. Topics include supervised learning, ensemble methods and boosting, neural networks, support vector machines, kernel methods, clustering and unsupervised learning, maximum likelihood, graphical models, hidden Markov models, inference methods, and computational learning theory. Students should feel comfortable with multivariate calculus, linear algebra, probability theory, and complexity theory. Students are required to produce non-trivial programs in Python. The recorded lectures are from the John A. Paulson School of Engineering and Applied Sciences course Computer Science 181.<br /> <br /> Prerequisites: CSCI E-51, CSCI E-121, STAT S-110, MATH E-21a, and MATH E-21b, or the equivalent.', 'Graphs', NULL),
(4, 'CSCIE-19', 'Software Testing and Test-Driven Development', 'Description: In this course we review the traditional software testing techniques that are applicable to any software product, as well as learn techniques for testing object-oriented software and graphical user interface testing. The Agile development paradigm of test-driven development is discussed. We also discover how innovative companies are able to build testing and quality into every stage of the development process and deliver a multitude of releases with a relatively small testing organization. We practice test creation and testing techniques through discussions, individual, and group projects. Concepts covered include test cycles, testing objectives, testing in the software development process, types of software errors, reporting and analyzing software errors, problem tracking systems, test case design, testing tools, test planning; test documentation, and managing a test group.', 'Graphs', NULL),
(4, 'CSCIE-20', 'Discrete Mathematics for Computer Science', 'Description: This course covers widely applicable mathematical tools for computer science, including topics from logic, set theory, combinatorics, number theory, probability theory, and graph theory. It includes practice in reasoning formally and proving theorems. Students meet twice a week via web conference to solve problems collaboratively. They also watch recorded lectures from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 20.<br /> <br /> Prerequisites: MATH E-15, or the equivalent.', 'Graphs', NULL),
(4, 'CSCIE-22', 'Data Structures', 'Description: This course is a survey of fundamental data structures for information processing, including lists, stacks, queues, trees, and graphs. It explores the implementation of these data structures (both array-based and linked representations) and examines classic algorithms that use these structures for tasks such as sorting, searching, and text compression. The Java programming language is used to demonstrate the topics discussed; and key notions of object-oriented programming, including encapsulation and abstract data types, are emphasized.<br /> <br /> Prerequisites: A good working knowledge of Java (CSCI E-10b, or the equivalent).', 'Graphs', NULL),
(4, 'CSCIE-24', 'Numerical Analysis', 'Description: When we use a calculator to compute cos(x), we are asking the machine to approximate a value. In this course, we investigate the algorithms used to compute such values. As in many other areas of computer science, we seek to find a result of desired accuracy with a minimum of effort. The course covers root finding, solving systems of linear equations, interpolation, least squares, numerical integration and differentiation, and solving systems of differential equations. Students may have learned some techniques in calculus to approximate an area with a Riemann integral or to approximate a function with a Taylor Series. We review these techniques, and study variants that converge much faster, and are thus better suited for calculators and computers. Class work involves experimenting with different algorithms. Programming is done in MATLAB, an interactive system for exploring mathematical problems.<br /> <br /> Prerequisites: Two semesters of calculus and an introductory programming course such as CSCI E-10a.', 'CS', NULL),
(4, 'CSCIE-26', 'Introduction to C, Unix/Linux Programming, and Web Interfaces', 'Description: Designed for students with some programming experience, this course provides a rigorous introduction to writing and using software tools in the Unix and GNU/Linux programming environments to build command-line and web-based programs. The course teaches students how to write C programs and Unix shell scripts, and how to create web interfaces to those programs. Topics include text processing, memory management, files and pipes, and processes and protocols. Students write programs to analyze data and generate reports, use shell scripts to combine tools into applications, and use HTML, CGI, and Ajax to provide web access to those applications and data.<br /> <br /> Prerequisites: A working knowledge of a structured programming language such as C++, Java, Javascript, or Python; a data structures course such as CSCI E-22.', NULL, NULL),
(4, 'CSCIE-265', 'Big Data Systems', 'Description: Big data is everywhere. A fundamental goal across numerous modern businesses and sciences is to be able to exploit as many machines as possible, to consume as much information as possible and as fast as possible. The big challenge is how to turn data into useful knowledge. This is far from a simple task and also a moving target as both the underlying hardware and our ability to collect data evolve. In this course, we discuss how to design data systems and algorithms that can scale up and scale out. Scale up refers to the ability to use a single machine to all its potential, to exploit properly the memory hierarchy and the multiple CPU and GPU cores of modern hardware. Scale out refers to the ability to use more than one machine (typically hundreds or thousands) effectively. This is a research-oriented course. Every week we read two modern research papers; one from the scale up area and one from the scale out area. We use examples from several areas, including relational systems and distributed databases, graph processing systems (for social networks), key-value stores, noSQL and newSQL systems, as well as mobile computing. Each student works on two systems projects and (optionally) on a semester-long data systems research project which can be in any of the above areas and based on an open research question. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 265.<br /> <br /> Prerequisites: CSCI E-61, and CSCI E-66 or CSCI E-165, or the equilavent.', 'Graphs', NULL),
(4, 'CSCIE-28', 'Unix/Linux Systems Programming', 'Description: As an introduction to the fundamental structure and services of the Unix and Linux operating systems, this course combines theory with programming at the system call level. Topics include files and directories, device control, terminal handling, processes and threads, signals, pipes, and sockets. Examples and exercises include directory management utilities, a shell, and a web server.<br /> <br /> Prerequisites: Solid knowledge of C or C++ at the level of CSCI E-26 and a data structures course such as CSCI E-22; some experience using Unix helpful.', 'Operating Systems', NULL),
(4, 'CSCIE-3', 'Introduction to Web Programming Using JavaScript', 'Description: This course provides an introduction to web development by way of the essential language and runtime environment that powers modern web interfaces. Through a series of examples and projects, students learn basic programming concepts while building an understanding of the power and complexities of Javascript, which can perplex even experienced web developers. The course provides a solid foundation in computer programming in Javascript: syntax and data structures, conditionals, objects, scope and closures, AJAX, the DOM, and event handling. Students gain an understanding of the popular libraries that power rich web applications such as jQuery, Ext JS, and others. Upon completion, students are prepared to use Javascript libraries in their projects, write their own or extend existing JavaScript libraries, and build rich web applications using these powerful tools. No computer programming experience is required, though exposure to basic HTML and CSS is helpful.', NULL, 'javascript'),
(4, 'CSCIE-32', 'Advanced JavaScript with Node.js and AngularJS', 'Description: Web development has changed significantly in the last ten years. Development of applications has become complex and, in most cases, mystifying to classic development. New frameworks and technologies are cropping up all the time and it''s easy to get left behind. This course isn''t simply about the hot new technologies, it''s about being a JavaScript professional: how to work with current web development best practices and how to be a great software engineer. Topics include version control, build systems, task runners, optimization, APIs/web services, single page applications, and unit testing.<br /> <br /> Prerequisites: CSCI E-3 and CSCI E-12.', 'Optimization', 'javascript'),
(4, 'CSCIE-33', 'Programming Microsoft .NET', 'Description: The first half of this course covers the .NET framework in some detail. Covered topics include the type system, exceptions, garbage collection, threading, and reflection. The second half surveys the additional functionality built on top of the .NET framework. Topics include WCF, WPF, Azure, Windows Phone, and others to be selected based on class interest and availability of guest speakers. Extensive programming homework required.<br /> <br /> Prerequisites: Familiarity with either the C# or VB.NET languages; at least one year of industrial experience in object-oriented programming.', NULL, NULL);
INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(4, 'CSCIE-34', 'User Experience Engineering', 'Description: Success in today''s software marketplace requires an excellent user experience (UX). That''s why all developers, architects, and managers today need to understand the basic principles of UX, even if it''s not their primary job. In this course, we take an in-depth look at the foundations of an excellent UX in a platform-agnostic manner. We learn to ask and then answer the vital questions that everyone involved in software needs to consider when making every design decision; we learn to start with the user, not the toolkit. Who are our users and how do we represent them? What problems are these particular users trying to solve, and what would they consider the characteristics of a good solution? How should the user interaction flow, and how can we represent that with stories? How can we prototype and test different designs? How can we create programs to learn what users really do, instead of what they can remember doing or are willing to admit to doing? How can we measure how well we''ve succeeded? Rather than getting into the implementation of such elements, we focus on how one decides what to implement, and why, in order to make the user happier and more productive. For example, the web and other channels contain an enormous amount of information about how to program a color gradient or an animation. There is almost zero discussion anywhere about when to use a color gradient or animation and when not to, or why you should use them in this situation but not in that one. This course aims to correct that imbalance. Useful design tools, such as the Balsamiq mock-up editor, are discussed as they bear on specific covered topics. Tools aimed primarily at user experience implementation, such as Microsoft Expression Blend, are not covered.<br /> <br /> Prerequisites: One year of computer science education (CSCI E-10a and CSCI-10b, or CSCI E-12 and CSCI E-15, or CSCI E-26), or equivalent software development experience. Familiarity with the client program development system of your choice. This can be any development tool with which you can complete the term project. See the project description in the syllabus.', 'CS', NULL),
(4, 'CSCIE-40', 'Communication Protocols and Internet Architectures', 'Description: Networks are now too large, complex, and diverse to be built on an ad hoc basis. This course provides a structured approach to the design, analysis, and implementation of networks and protocols. We study various protocols, including TCP/IP, WWW/HTTP, e-mail/SMTP, multimedia protocols for voice and video, and the IEEE 802 LAN protocol suite. In each case, the protocol''s functions and the underlying reference model are discussed. LAN architecture and design, internetworking using switches and routers, and the design and analysis of both private networks and the Internet are presented. The course discusses new areas of work, including network quality of service, voice and video on the Internet, policy-based networks, and broadband/gigabit networks.<br /> <br /> Prerequisites: Programming or computer architecture experience; a basic understanding of the principles of communication protocols.', 'Networking', NULL),
(4, 'CSCIE-43', 'How to Assess and Communicate Risk in Information Security', 'Description: In simple terms, risk is the likelihood of something bad taking place, and the resulting business impact if it does occur. We often talk about the bad things that could happen the threats, vulnerabilities, and exploits, and the technologies that are used to defend against them but these are not risks. Business decision makers need their subject-matter experts in information security to advise them not about the technical details, but about how likely is it for that something bad to occur, about the business impact if it does occur, and about how an investment in given security controls quantifiably reduces that risk. This course covers how to assess security risks, properly defined, how to use these risk assessments to make recommendations for what to do about them, and how to communicate these risks effectively to business decision makers.<br /> <br /> Prerequisites: CSCI E-45a, CSCI E-45b, or the equivalent.', 'Security', NULL),
(4, 'CSCIE-45a', 'The Cyber World: Hardware, Software, Networks, Security, and Management', 'Description: Today we all live and work in a participatory cyberspace. Computers, the data networks that interconnect them, and the services available over the networks make up this cyberspace. As cyberspace invades almost all areas of modern day living, playing, and working, it is becoming more important that people understand its technical and political underpinnings and operations, as well as its capabilities, threats, and weaknesses. This is a companion course to CSCI E-45b. The goal of this pair of courses is to give students the tools they need to understand, use, and manage the technologies involved, as well as the ability to appreciate the legal, social, and political dynamics of this ever expanding universe and the interplay between the cyber and physical worlds. The pair of courses covers the essential elements of computing and the history, structure, operation, and governance of the Internet. This course focuses on the fundamental workings of the digital world. From individual computing devices to the broader Internet, students learn how each piece in this gigantic puzzle comes together to create the digital infrastructure that is the cyberspace of today and tomorrow. In addition, we explore the fundamental concepts, technologies, and issues associated with managing and securing cyberspace.', 'Networking', NULL),
(4, 'CSCIE-45b', 'The Cyber World: Governance, Threats, Conflict, Privacy, Identity, and Commerce', 'Description: Today we all live and work in a participatory cyberspace. Computers, the data networks that interconnect them, and the services available over the networks make up this cyberspace. As cyberspace invades almost all areas of modern day living, playing, and working, it is becoming more important that people understand its technical and political underpinnings and operations, as well as its capabilities, threats, and weaknesses. This is a companion course to CSCI E-45a. The goal of this pair of courses is to give students the tools they need to understand, use, and manage the technologies involved, as well as the ability to appreciate the legal, social, and political dynamics of this ever expanding universe and the interplay between the cyber and physical worlds. The pair of courses covers the essential elements of computing and the history, structure, operation, and governance of the Internet. This course explores the technical and legal aspects of the interactions and tensions between security, usability, privacy, and surveillance in a post NSA-revelation world. We also look at the technical and legal underpinnings that affect the use of cyberspace for businesses. Finally, we explore the rapidly changing dangers of cyberspace from viruses to state-sponsored cyber-conflict.', 'Networking', NULL),
(4, 'CSCIE-46', 'Applied Network Security', 'Description: This course provides a practical overview of network security and related topics. General threat classifications are discussed as they relate to the CIA triad: eavesdropping (confidentiality), man-in-the-middle (integrity), and denial-of-service (availability). Real-world attack incidents and implementations are used to tie concept to reality. Defensive technologies and techniques, including authentication/authorization, access control, segmentation, log/traffic monitoring, reputation-based security, and secure protocol (SSH, TLS, DNSSEC) usage are discussed and demonstrated. Hands-on labs and exercises are used to reinforce lectures and provide practical implementation experience.<br /> <br /> Prerequisites: CSCI-E45a, CSCI-E45b. Familiarity with Linux and Windows operating systems, basic understanding of IP networking.', 'Networking', NULL),
(4, 'CSCIE-48', 'Secure Mobile Computing', 'Description: Modern technology is heavily dependent upon mobile computing technology. Mobile communication and devices have revolutionized industry and society. Secure mobile computing explores the threat landscape of mobile computing at the device, communication infrastructure, platform, and application levels. Students appraise secure mobile computing tools and techniques to implement confidentiality, integrity, and availability of mobile computing data. Students also review mobile computing communications security and infrastructure security to evaluate eavesdropping and surveillance avoidance techniques. Students explore the use of automated and manual security testing techniques to evaluate the security posture of a mobile computing device. Students specifically install, configure, and utilize a virtual lab environment using a mobile testing framework, a network protocol analyzer, a security/vulnerability scanner, and source code analysis tools.<br /> <br /> Prerequisites: CSCI E-45a or the equivalent.', 'Security', NULL),
(4, 'CSCIE-49', 'Cloud Security', 'Description: Modern virtualization technologies coupled with on-demand IT infrastructures have been widely adopted by industry to save capital and operating expenses. But off-premise on-demand infrastructures give rise to new security concerns. This course covers cloud security, addressing known risks and vulnerabilities and focuses on sound architectural design for secure computing. We cover management, governance, audit, legal issues, and meeting regulatory compliance. We also learn how to deploy critical security mechanisims related to secure isolation, application security, data protection, access control, privacy, key management, provisioning, identity and authorization management, high-availability, management, and compliance in a cloud-enabled environment.<br /> <br /> Prerequisites: CSCI E-45a, CSCI E-45b, or the equivalent. Some web application development and/or systems administration knowledge is helpful.', 'Security', NULL),
(4, 'CSCIE-50', 'Intensive Introduction to Computer Science', 'Description: This course is an introduction to the intellectual enterprises of computer science and the art of programming. It teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, algorithms, data structures, encapsulation, resource management, security, software engineering, and web development. Languages include C, PHP, and JavaScript plus SQL, CSS, and HTML. Problem sets are inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. Students can count two of the following three courses CSCI E-10a, CSCI E-10b, and CSCI E-50 (or CSCI E-50a and CSCI E-50b) toward a degree. They cannot count all three toward a degree. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 50.', 'Graphs', NULL),
(4, 'CSCIE-50a', 'Intensive Introduction to Computer Science I', 'Description: This course is an introduction to the intellectual enterprises of computer science and the art of programming. it teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, algorithms, data structures, encapsulation, resource management, and software engineering. Languages include C. Problem sets are inspired by real-world domains of cryptography, forensics, and gaming. This course represents the first half of CSCI E-50. When taken in conjunction with CSCI E-50b, this course effectively allows students twice as much time to work through CSCI E-50''s curriculum. Students can count two of the following three courses CSCI E-10a, CSCI E-10b, and CSCI E-50 (or CSCI E-50a/CSCI E-50b) toward a degree. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 50.', 'Graphs', NULL),
(4, 'CSCIE-50b', 'Intensive Introduction to Computer Science II', 'Description: This course is an introduction to the intellectual enterprises of computer science and the art of programming. It teaches students how to think algorithmically and solve problems efficiently. Topics include security and web development. Languages include PHP and JavaScript plus SQL, CSS, and HTML. Problem sets are inspired by real-world domains of finance. This course represents the second half of CSCI E-50. When taken in conjunction with CSCI E-50a, this course effectively allows students twice as much time to work through CSCI E-50''s curriculum. Students can count two of the following three courses CSCI E-10a, CSCI E-10b, and CSCI E-50 (or CSCI E-50a/CSCI E-50b) toward a degree. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 50.<br /> <br /> Prerequisites: CSCI E-50a.', 'Security', NULL),
(4, 'CSCIE-51', 'Abstraction and Design in Computation', 'Description: This course covers abstraction and design in computation. Topics include functional and object-oriented styles of programming, software engineering in the small, and models of computation. The goal is to understand how to design large programs to make them readable, maintainable, efficient, and elegant. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 51.<br /> <br /> Prerequisites: CSCI E-20 and CSCI E-50, or the equivalents.', 'CS', NULL),
(4, 'CSCIE-55', 'Java and the Hadoop Distributed File System', 'Description: This course comprises a rigorous study of the core Java programming language followed by an inquiry into Hadoop, a framework that allows for the distributed processing of large data sets across clusters of computers The first part covers classes, packages, enums, inheritance, abstract classes, interfaces, reflection, exceptions, threads, and annotation. These common tools for Java development are discussed: JUnit, log4j, and Ant. The second part explores writing Java applications on the Hadoop Distributed File System, and using the MapReduce programming model. Networks of cluster nodes are simulated by multiple Java Virtual Machines running on a single computer. Access to separate nodes on a network is not required.<br /> <br /> Prerequisites: Working knowledge of at least one higher level programming language, e.g. C, C++, Python.', 'Distributed Applications', 'java'),
(4, 'CSCIE-56', 'Web Application Development with Groovy and Grails', 'Description: This course provides a comprehensive overview of using the Groovy language and the Grails framework to rapidly create real-world web applications. Students learn the fundamentals of rapid application and plugin development, with an emphasis on convention-over-configuration and overall best practices, by studying design patterns (MVC, DAO, dependency injection), technologies (Ajax, REST), and frameworks (Grails, jQuery, Bootstrap). Topics include artifacts; internationalization; testing, building, and deploying; security; performance tuning; dynamic and static typing; and usability, accessibility, and mobility.<br /> <br /> Prerequisites: Significant experience with Java (CSCI E-22 or equivalent) or another object-oriented programming language and some server-side web development; comfort with HTML5/CSS/JavaScript (CSCI E-3, CSCI E-12)', 'Security', NULL),
(4, 'CSCIE-58', 'Bioinformatics Algorithms', 'Description: Living things encode their genetic code in DNA, and use this information to regulate life processes. Bioinformatics is the study of living organisms viewed as information processors. We study algorithms for problems such as gene finding, sequence alignment, motif finding, construction of phylogenetic trees, and structure prediction. While students can find implementations of many of these algorithms, a study of the algorithms leads to a better understanding of the assumptions and limitations of existing algorithms, and gives students the background to evaluate new ones. We explore some important biological problems, discuss mathematical models, and look at computer algorithms to solve these problems. Most of the interesting problems are intractable, so we look at heuristics.<br /> <br /> Prerequisites: CSCI E-10a, or the equivalent, and comfort with elementary probability.', NULL, NULL),
(4, 'CSCIE-59', 'Database Design and Implementation', 'Description: The object of this course is to teach students the general concepts of relational databases and how to design one that is anomaly free and can answer queries that satisfies its user''s requests. Students learn to design, create, populate, and query a database by working with Oracle. Students also learn basic database administration skills such as creating users and granting and revoking privileges individually or collectively through roles.<br /> <br /> Prerequisites: CSCI E-10a, CSCI E-20, or the equivalent.', 'Databases', NULL),
(4, 'CSCIE-599', 'Software Engineering Capstone', 'Description: This course examines how current software engineering methods approach structuring and managing software projects, from requirements gathering to production release. Formal methods in software engineering have a long history, from the older waterfall method to the current agile methods. Students collaborate in small teams to define an architectural model and a project plan, and then implement a system while practicing techniques in software engineering. They prepare a presentation for the Extension School''s Master of Liberal Arts, Software Engineering faculty committee based on the course project. The early programming assignments are in Java.<br /> <br /> Prerequisites: Students must be candidates for the Master of Liberal Arts, Software Engineering, and have completed nine courses in the concentration, including CSCI E-97, and have proficiency in Java, or permission of the instructor.', NULL, NULL),
(4, 'CSCIE-60', 'Developing Web-Based Database Applications', 'Description: Web-based applications offer the advantages of workstation productivity and ease of use together with the power and sophistication of relational database servers. This course provides the concepts and skills necessary to design and develop web-based database applications. Students build a working database application using Oracle and a client application using ColdFusion to serve the information needs of an enterprise. Through hands-on projects, students build, populate, query, and write transactions for a relational database using SQL, and develop a client application to access their database using ColdFusion. As a final project, students build a prototype client-server application.<br /> <br /> Prerequisites: Programming experience, preferably in an object-oriented programming language such as C++ or Java, familiarity with Unix/Linux, and the ability to create simple HTML pages.', 'Embedded Systems', NULL),
(4, 'CSCIE-61', 'Systems Programming and Machine Organization', 'Description: This course covers the fundamentals of computer systems programming, machine organization, and performance tuning. It provides a solid background in systems programming and a deep understanding of low-level machine organization and design. The course centers on C/C++ programming, with some assembly language. Topics include (but may not be limited to) program optimization, memory hierarchy, caching, virtual memory, dynamic memory management, concurrency, threads, and networking. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 61.<br /> <br /> Prerequisites: CSCI E-26, CSCI E-50, or some experience programming in C or C++.', 'Networking', NULL),
(4, 'CSCIE-63', 'Big Data Analytics', 'Description: The recent explosion of social media and the computerization of every aspect of economic activity resulted in the creation of big data: mountains of mostly unstructured data in the form of web logs, videos, speech recordings, photographs, e-mails, and tweets. In a parallel development, computers kept getting ever more powerful and storage ever cheaper. Today, we have the ability to reliably and cheaply store huge volumes of data, efficiently analyze them, and extract business and socially relevant information. This course brings together several key information technologies used in manipulating, storing, and analyzing big data. We look at the basic tools for statistical analysis, R, and key methods used in machine learning. We review MapReduce techniques for parallel processing and Hadoop, an open source framework that allow us to cheaply and efficiently implement MapReduce on Internet scale problems. We touch on related tools that provide SQL-like access to unstructured data: Pig and Hive. We analyze so-called NoSQL storage solutions exemplified by HBase for their critical features: speed of reads and writes, data consistency, and ability to scale to extreme volumes. We examine memory resident databases and streaming technologies which allow analysis of data in real time. We work with the public cloud as unlimited resource for big data analytics. Students gain the ability to design highly scalable systems that can accept, store, and analyze large volumes of unstructured data in batch mode and/or real time. Acquired techniques could be profitably used in a variety of fields.<br /> <br /> Prerequisites: Intermediate knowledge of Java. A course on cloud computing (such as CSCI E-90) would be beneficial.', 'Graphs', NULL),
(4, 'CSCIE-64', 'Mobile and Cloud Computing', 'Description: Mobile computing has become ubiquitous with over a billion devices in use every day. Although these devices are quite powerful on their own, their real power comes from their ability to connect people, entertain, and drive e-commerce by leveraging the enormous computing infrastructure and computing services in the cloud. Internet of Things (IOT)&nbsp;devices such as the Raspberry Pi offer a low cost and power friendly alternative to traditional computing devices. The capability of IOT devices to interact with the real world by providing purpose-built devices as well as control appliances, and machinery is an area of explosive growth.&nbsp;Combine all of this with cloud computing and a very attractive option for startups and well-established business such Pintrest, Netflix, Box, Blue Cross, SAP, and Pfizer has emerged. The combination of these key technologies provides a canvas to create solutions with almost limitless power, innovation, and potential. This course covers the essentials necessary to leverage these key technologies in a pragmatic way so the power, innovation, and potential can be fully realized. In this course, we cover the key services and application programming interfaces (APIs) offered by Microsoft Azure to build highly scalable, low cost cloud computing services that bring the power of the cloud to mobile, tablet, IOT and desktop devices. The course covers several platform as a service (PaaS) services offered by Microsoft Azure including federated authentication, Azure app service, API apps, mobile apps, Azure web apps, Azure SQL, Document DB, cloud services, Notification Hubs, Event Hubs, and storage, to name a few. Using these services and others, students learn how to build highly scalable, fine-grained multi-tenant, secure representational state transfer (REST) services in the cloud. Throughout the course, students learn how to build highly responsive and engaging mobile, IOT, tablet, and desktop applications that take full advantage of these services on Android, iOS, and Windows platforms including the Raspberry Pi.<br /> <br /> Prerequisites: CSCI-E10b, or CSCI E-33, or one year Java development, or one year of .NET development using C#. Familiarity with Android, iOS and Windows development is helpful but not required.', 'Game Design', NULL),
(4, 'CSCIE-65', 'Mobile Application Development Using Swift and iOS', 'Description: This intensive course surveys mobile application development using cutting-edge Apple technologies: the Swift language (v. 2.0), the Xcode 7 IDE, and the iOS platform. The curriculum blends Swift''s powerful feature set with universal design patterns such as Model-View-Controller and asynchronous Internet communication. Students design their interfaces using storyboarding, a powerful design technique that provides immediate visual feedback. We progress from the core "UIKit" to other iOS Frameworks such as MapKit and AVFoundation, as well as third party frameworks that support social media and cloud database storage. Weekly assignments progress from basic programming to realistic app development. There is an emphasis on commented, carefully-crafted code.<br /> <br /> Prerequisites: At least three semesters (or one year of job experience) with object-oriented, structured programming such as C++ or Java. Solid grounding in data structures. A portable Mac and iOS device (iPad or iPhone) new enough to run the latest operating systems.', 'Game Design', NULL),
(4, 'CSCIE-66', 'Database Systems', 'Description: This course covers the fundamental concepts of database systems. Topics include data models (ER, relational, and others); query languages (relational algebra, SQL, and others); implementation techniques of database management systems (index structures, concurrency control, recovery, and query processing); management of semistructured and complex data; distributed and noSQL databases.<br /> <br /> Prerequisites: CSCI E-22, or the equivalent, and strong programming skills in Java.', 'Databases', NULL),
(4, 'CSCIE-67', 'Oracle Database Administration', 'Description: Students study the internal structure and organization of an Oracle database environment. The course presents a structured approach to planning, building, tuning, and monitoring an Oracle 12c database on an Amazon Web Services instance. Students create an Oracle database, tablespaces, user accounts, views, indices, and other objects necessary to support an application. We also examine some of the issues involved when running a large number of databases within an environment and with running large databases.<br /> <br /> Prerequisites: An understanding of the principles of a relational database model and a working knowledge of SQL.', 'Databases', NULL),
(4, 'CSCIE-7', 'Introduction to Programming with Python', 'Description: Python is a language with a simple syntax, and a powerful set of libraries. It is an interpreted language, with a rich programming environment, including a robust debugger and profiler. While it is easy for beginners to learn, it is widely used in many scientific areas for data exploration. This course is an introduction to the Python programming language for students without prior programming experience. We cover data types, control flow, object-oriented programming, and graphical user interface-driven applications. The examples and problems used in this course are drawn from diverse areas such as text processing, simple graphics creation and image manipulation, HTML and web programming, and genomics.', 'Graphs', 'python'),
(4, 'CSCIE-71', 'Agile Software Development', 'Description: This course is an immersive experience with Agile software development. We study both the technical and social aspects of Agile, including pair programming, TDD, behavior-driven development, continuous delivery, refactoring, extreme programming, Scrum, Agile project management, and collaboration and cultural factors in successful software projects. Students must have and bring to class a laptop computer suitable for software development.<br /> <br /> Prerequisites: CSCI E-22 or the equivalent.', NULL, NULL),
(4, 'CSCIE-8', 'Web GIS: Technologies and Applications', 'Description: Web GIS has revealed its immense value and applicability to government, business, scientific research, and our daily life. This course aims to provide students with a comprehensive overview of web GIS, teach students state-of-the-art skills including ArcGIS Online Cloud GIS, ArcGIS for Server, ArcGIS Online web app templates, ArcGIS Web AppBuilder, ArcGIS API for JavaScript, HTML5, mobile GIS, and 3-D web scenes, and inspire students with real world web GIS application case studies. Access to Harvard ArcGIS server and other ArcGIS software is provided.<br /> <br /> Prerequisites: Basic experience with or knowledge of computer science or GIS. Students should also have a Windows or Mac OS computer for running ArcMap and a smart phone or tablet for testing mobile apps.', 'Embedded Systems', NULL),
(4, 'CSCIE-81', 'Machine Learning and Data Mining', 'Description: With the rise of data science and big data fields, machine learning has gained further recognition as the key driver behind the successful advance of these fields. However, many recent entrants to the field can only utilize the variety of machine learning algorithms as black boxes. This course aims to empower students to effectively use and understand the primary approaches so as to be able to modify them for specific uses. Our focus is less on theory and more on practice. Students engage in hands-on programming exercises to implement some of the fundamental algorithms such as decision trees and clustering. While most of the course focuses on machine learning, we also have a few lectures on text/data mining algorithms.<br /> <br /> Prerequisites: Experience coding/scripting in a major programming language. General familiarity with statistics. Enough linear algebra to be able to perform matrix multiplication and understand the concept of matrix inversion.', 'Machine Learning', NULL),
(4, 'CSCIE-84', 'A Practical Approach to Data Science', 'Description: This course is a survey of the growing field of data science and its applicability to the business world. It teaches students to gather, select, and model large amounts of data. We consider the tremendous amount of data available (volume), how to acquire it in a timely manner (velocity), and how to extract what is meaningful for a particular enterprise from a multitude of sources that may take many forms of images, media sources, social networks, and the like (variety). This course also deals with how to store and protect both the data and the information generated from it. Although the course relies on well-known techniques and theory from mathematics, modeling, probability, statistics, and computer science to address these issues, we approach the course from a more practical, hands-on point of view where the student samples, explores, modifies, models, and assesses target data sets through the use of a comprehensive, workbench approach using data mining and data warehousing tools. The large data sets considered are freely available from traditional data centers or network environments such as the US Census Bureau as well as from new storage technologies such as the cloud. The course also explores the technical and practical aspects of data science, the historical value of digital data, and its effects on and implications for today''s business world.<br /> <br /> Prerequisites: CSCI E 10a, STAT E-100, CSCI E 59, or the equivalent.', 'Networking', NULL),
(4, 'CSCIE-90', 'Cloud Computing', 'Description: Cloud computing has entered the mainstream of information technology, providing infinite or at least highly elastic scalability in delivery of enterprise applications and software as a service (SaaS). Amazon Elastic Cloud, Microsoft Azure, Google App Engine, and a few other offerings give both mature software vendors and start-ups the option to deploy their applications to a system of infinite computational power with practically no capital investment and with modest operating costs proportional to the actual use. The course examines the most important APIs used in the Amazon and Microsoft clouds. We learn how to use RESTful Web services, and cloud-based messaging and workflow services to construct new applications. We learn to migrate existing applications into the cloud, by navigating through phases such as creation of a private cloud; attaching, in a secure fashion, the private cloud to the public cloud; and provisioning and maintaining resources in the public cloud. We deal with non-trivial issues like load balancing, caching, distributed transactions, identity and authorization management, and data encryption. We introduce Hadoop and BigData services in the cloud.<br /> <br /> Prerequisites: Basic Java programming skills.', 'Cryptology', NULL),
(4, 'CSCIE-91', 'An Introduction to Cloud and DevOps Concepts', 'Description: We examine the definition and concepts around the ideas of DevOps. How do they relate to working in the cloud? How do they relate to Agile and ITIL concepts? We use the AWS cloud environment as the framework to examine these ideas. We examine use cases, possible architectures, automation, continuous delivery, and the AWS toolset. How does this enable and generate change in an environment? What mindset changes must occur and how would students think through this process?<br /> <br /> Prerequisites: Strong technology background and an understanding of technology infrastructure, understanding of network concepts, and skill with a scripting language.', NULL, NULL),
(4, 'CSCIE-92', 'Principles of Operating Systems', 'Description: This course examines the role of operating systems: process synchronization and scheduling; memory management including virtual memory, swapping, paging, and segmentation; file management; protection and security; input/output techniques, buffering, and resource allocation; deadlock detection and avoidance; system modeling; performance measurement and evaluation; and operating system case studies. An extensive lab project is required of all students.<br /> <br /> Prerequisites: CSCI E-22, or the equivalent.', 'Security', NULL),
(4, 'CSCIE-93', 'Computer Architecture', 'Description: This course is a study of the fundamental concepts in the design and organization of modern computer systems. Topics include computer organization, instruction-set design, processor design, memory system design, timing issues, interrupts, microcoding, and various performance-enhancing parallel techniques such as prefetching, pipelining, branch prediction, superscalar execution, and massive-parallel processing. We also study existing architectures using CISC, RISC, vector, data parallel, and VLIW designs. An extensive lab project encompassing the design and implementation of a new instruction set and CPU using an FPGA is required of all students.<br /> <br /> Prerequisites: Knowledge of data structures and programming experience (CSCI E-22, or the equivalent) with a Boolean/digital logic course preferred, but not required (ENSC E-123, or the equivalent).', 'Computer Architecture', NULL),
(4, 'CSCIE-97', 'Software Design: Principles, Models, and Patterns', 'Description: This course approaches object-oriented software design from three perspectives: the software engineering principles that enable development of quality software, the modeling of software components using the Unified Modeling Language (UML), and the application of design patterns as a means of reusing design models that are accepted best practices. These patterns include both the original software patterns as well as more recent modularization patterns for software construction. There is at least one significant modeling exercise and a set of programming assignments that require the application of design principles and good programming technique. Students are expected to write a detailed description of the design for each of their programs, incorporating UML models as appropriate. Students implement their programs in the Java programming language. In addition, there is at least one significant assignment that requires designing and documenting a software subsystem without implementation.<br /> <br /> Prerequisites: CSCI E-22, or the equivalent, and proficiency in Java.', NULL, NULL),
(4, 'CSCIS-1', 'Great Ideas in Computer Science with Java', 'Description: This course is an introduction to the most important discoveries and intellectual paradigms in computer science, designed for students with little or no previous background. We explore problem-solving methods and algorithm development using the high-level programming languages Java and Scratch. Students learn how to design, code, debug, and document programs using techniques of good programming style in a Linux-based environment. This course presents an integrated view of computer systems, from hardware architecture and data communication systems through compilers and cryptography. We examine theoretical and practical limitations related to unsolvable and intractable computational problems, and the social and ethical dilemmas presented by such issues as software unreliability and invasion of privacy. Students can earn Harvard Extension School degree credit for only one of CSCI E-10a, CSCI E-50a, or CSCI S-1.', 'Graphs', 'java'),
(4, 'CSCIS-111', 'Intensive Introduction to Computer Science Using Java', 'Description: This course is a fast-paced introduction to computer science designed for students who plan to work extensively with computers (for example, engineers, biologists, physicists, and economists), as well as future concentrators who plan to take more advanced courses in the field. The course introduces the process of developing algorithms to solve problems, and the corresponding process of designing computer programs to express those algorithms. The first half of the course covers foundational programming concepts such as data types, conditional execution, iteration, and recursion. It also explores the key features of object-oriented programming, and the manipulation of data stored in files and arrays. The second half of the course provides a survey of fundamental data structures for information processing, including lists, stacks, queues, trees, and graphs. It explores the implementation of these data structures using both array-based and linked representations, and it examines classic algorithms that use these structures for tasks such as sorting, searching, and text compression. Techniques for analyzing the efficiency of algorithms are also covered. Problem sets require a minimum of twenty hours of work each week, including both written problems and programming exercises using the Java programming language. Graduate-credit students are expected to complete additional work. The course provides complete coverage of the syllabus for the advanced placement examination in computer science.<br /> <br /> Prerequisites: familiarity with precalculus. Students who have completed the Harvard Extension School courses CSCI E-10a, CSCI E-10b, CSCI E-22, or CSCI E-50 cannot earn Extension School degree credit for CSCI S-111.', 'Graphs', 'java'),
(4, 'CSCIS-12', 'Fundamentals of Website Development', 'Description: This course provides a comprehensive overview of website development. Students explore the prevailing vocabulary, tools, and standards used in the field and learn how the various facets including HTML5, XHTML, CSS, JavaScript, Ajax, multimedia, scripting languages, HTTP, clients, servers, and databases function together in today''s web environment. The course provides a solid web development foundation, focusing on content and client-side (browser) components (HTML5, XHTML, CSS, JavaScript, multimedia), with an overview of the server-side technologies. In addition, software and services that are easily incorporated into a website (for example, maps, checkout, blogs, content management) are surveyed and discussed. Students produce an interactive website on the topic of their choice for the final project and leave the course prepared for more advanced and focused web development studies.<br /> <br /> Prerequisites: introductory coursework in computer science, CSCI S-1, or the equivalent.', 'CS', NULL),
(4, 'CSCIS-40', 'Communication Protocols and Internet Architectures', 'Description: This course provides a structured technical approach to the design, analysis, and implementation of Internet protocols and network architectures. We study various protocols, including TCP/IP, WWW/HTTP, LAN protocols, and client/server protocols. The course also discusses new areas of work, including voice and video over the Internet, network QoS, and high bandwidth wireless networks. The recorded lectures are from the Harvard Extension School course CSCI E-40.<br /> <br /> Prerequisites: some programming and Internet experience.', 'Networking', NULL),
(4, 'CSCIS-65', 'Mobile Application Development Using Swift and iOS', 'Description: This intensive course broadly surveys modern mobile application development using cutting edge Apple technologies: the Swift programming language, the Cocoa Touch Framework, and iOS (version 8) for iPhone and iPad. The curriculum blends teaching Swift''s powerful syntax and idioms (closures, Optionals, classes), general user interface programming (MVC, event handling), Apple''s toolchain (Xcode, iOS SDK, TestFlight), and iOS Frameworks and APIs such as CloudKit, Handoff, and WebKit. Frequent small assignments progress from basic programming to realistic app development with a focus on information sharing among devices. A strong emphasis is placed on well-commented, carefully crafted, and responsive (asynchronous) code. The course culminates in a short individual final project. Students must be tolerant of possible instability of very new technologies and tools.<br /> <br /> Prerequisites: at least three semesters of object-oriented, structured programming such as C++ or Java. Solid grounding in data structures. A portable Mac running OS X 10.9 or later and an iPhone or iPad running iOS 8 or later.', 'Game Design', NULL),
(5, 'COS  126 \n \n EGR  126', 'General Computer Science', 'An introduction to computer science in the context of scientific, engineering, and commercial applications. The goal of the course is to teach basic principles and practical issues, while at the same time preparing students to use computers effectively for applications in computer science, physics, biology, chemistry, engineering, and other disciplines. Topics include: hardware and software systems; programming in Java; algorithms and data structures; fundamental principles of computation; and scientific computing, including simulation, optimization, and data analysis. Video lectures, one or two classes, two preceptorials.', 'Optimization', NULL),
(5, 'COS  217', 'Introduction to Programming Systems', 'Introduction to programming systems, including modular programming, advanced program design, programming style, test, debugging and performance tuning; machine languages and assembly language; and use of system call services.', NULL, NULL),
(5, 'COS  226', 'Algorithms and Data Structures', 'This course surveys the most important algorithms and data structures in use on computers today. Particular emphasis is given to algorithms for sorting, searching, and string processing. Fundamental algorithms in a number of other areas are covered as well, including geometric algorithms, graph algorithms, and some numerical algorithms. The course will concentrate on developing implementations, understanding their performance characteristics, and estimating their potential effectiveness in applications.', 'Graphs', NULL),
(5, 'COS  320', 'Compiling Techniques', 'Understand the design and construction of compilers. Concepts include syntax analysis, semantics, code generation, optimization and run-time systems.  Translation of imperative languages (such as C), functional languages (such as ML), and object-oriented languages (such as Java) will be studied.  Students will implement a complete compiler for a small language.', 'Optimization', NULL),
(5, 'COS  333', 'Advanced Programming Techniques', 'This is a course about the practice of programming.  Programming is more than just writing code.  Programmers must also assess tradeoffs, choose among design alternatives, debug and test, improve performance, and maintain software written by themselves & others. At the same time, they must be concerned with compatibility, robustness, and reliability, while meeting specifications.  Students will have the opportunity to develop these skills by working on their own code and in group projects.', NULL, NULL),
(5, 'COS  340', 'Reasoning about Computation', 'An introduction to mathematical topics relevant to computer science. Combinatorics and probability will be covered in the context of computer science applications. The course will present a computer science approach to thinking and modeling through topics such as dealing with uncertainty in data and handling large data sets. Students will be introduced to fundamental concepts such as NP-completeness and cryptography that arise from the world view of efficient computation.', 'Graphs', NULL),
(5, 'COS  398', 'Junior Independent Work', 'Provides an opportunity for a student to concentrate on a "state-of-the-art" project in computer science. Topics may be selected from suggestions by faculty members or proposed by the student.  The final choice must be approved by the faculty advisor.', 'CS', NULL),
(5, 'COS  423', 'Theory of Algorithms', 'Design and analysis of efficient data structures and algorithms. General techniques for building and analyzing algorithms. Introduction to NP-completeness.', NULL, NULL),
(5, 'COS  424 \n \n SML  302', 'Fundamentals of Machine Learning', 'Computers have made it possible, even easy, to collect vast amounts of data from a wide variety of sources.  It is not always clear, however, how to use those data, and how to extract useful information from them.  This problem is faced in a tremendous range of business and scientific applications.  This course will focus on some of the most useful approaches to the problem of analyzing large complex data sets, exploring both theoretical foundations and practical applications.  Students will gain experience analyzing several types of data, including text, images, and biological data.', 'Machine Learning', NULL),
(5, 'COS  426', 'Computer Graphics', 'Introduction to computer graphics.  Topics include image synthesis, 3D modeling, image processing and animation.  Encourage hands-on experience.', 'Graphs', NULL),
(5, 'COS  432 \n \n ELE  432', 'Information Security', 'Security issues in computing, communications, and electronic commerce. Goals and vulnerabilities; legal and ethical issues; basic cryptology; private and authenticated communication; electronic commerce; software security; viruses and other malicious code; operating system protection; trusted systems design; network security; firewalls; policy, administration and procedures; auditing; physical security; disaster recovery; reliability; content protection; privacy.', 'Cryptology', NULL),
(5, 'COS  433 \n \n MAT  473', 'Cryptography', 'An introduction to modern cryptography with an emphasis on the fundamental ideas. We will survey both the basic information and  complexity theoretic concepts as well as their (often surprising and  counter-intuitive) applications. Topics covered include private key and public key encryption schemes, digital signatures, pseudorandom generators and functions, chosen ciphertext security, and some advanced topics.', 'Graphs', NULL),
(5, 'COS  435', 'Info Retrieval, Discovery, & Delivery', 'This course examines the methods used to gather, organize and search for information in large digital collections (e.g. web search engines). We study classic techniques of indexing documents and searching text and also new algorithms that exploit properties of the Web (e.g. links) social networks and other digital collections, including multimedia collections. Techniques include those for relevance and ranking of documents, exploiting user history, and information clustering. We also examine systems aspects of search technology: how distributed computing and storage are used to make information delivery efficient.', 'Networking', NULL),
(5, 'COS  448 \n \n EGR  448', 'Innovating Across Tech, Bus, & Mkts', 'Course teaches engineering students about issues tackled by leading Chief Technology Officers: the technical visionaries and/or managers who innovate at the boundaries of technology and business by understanding both deeply, and who are true partners to the CEO, not just implementers of business goals. Focus will be on thinking like a CTO (of a startup and a large company) from technology and business perspectives, and on software and Internet-based businesses. Industry-leading guest speakers provide perspectives too.', NULL, NULL),
(5, 'COS  461', 'Computer Networks', 'This course studies computer networks and the services built on top of them.  Topics include packet-switch and multi-access networks, routing and flow control, congestion control and quality-of-service, Internet protocols (IP, TCP, BGP), the client-server model and RPC, elements of distributed systems (naming, security, caching) and the design of network services (multimedia, file and web servers).', 'Networking', NULL),
(5, 'COS  495', 'Special Topics in Computer Science: Introduction to Deep Learning', 'This course is an elementary introduction to a machine learning technique called deep learning (also called neural nets), as well as its applications to a variety of domains, including image classification, speech recognition, and natural language processing. Along the way the course also provides an intuitive introduction to basic notions such as supervised vs unsupervised learning, linear and logistic regression, continuous optimization (especially variants of gradient descent), generalization theory and overfitting, regularizers, and probabilistic modeling.', 'Natural Language Processing', NULL);
INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(5, 'COS  498', 'Senior Independent Work', 'Provides an opportunity for a student to concentrate on a "state-of-the-art" project in computer science. Topics may be selected from suggestions by faculty members or proposed by the student.  The final choice must be approved by the faculty advisor.', 'CS', NULL),
(5, 'COS  511', 'Theoretical Machine Learning', 'This course introduces theoretical machine learning, including mathematical models of machine learning, and the design and rigorous analysis of learning algorithms. Likely topics include: intro to statistical learning theory and bounds on the number of random examples needed to learn; learning in adversarial settings and the on-line learning model; using convex optimization to model and solve learning problems; learning with partial observability; recommendation systems and matrix learning; how to boost the accuracy of a weak learning algorithm; universal portfolio selection; learning in games.', 'Game Design', NULL),
(5, 'COS  522', 'Computational Complexity', 'Introduction to research in computational complexity theory. Computational models: nondeterministic, alternating, and probabilistic machines. Boolean circuits. Complexity classes associated with these models: NP, Polynomial hierarchy, BPP, P/poly, etc. Complete problems. Interactive proof systems and probabilistically checkable proofs: IP=PSPACE and NP=PCP (log n, l). Definitions of randomness. Pseudorandomness and derandomizations. Lower bounds for concrete models such as algebraic decision trees, bounded-depth circuits, and monotone circuits.', 'Research', NULL),
(5, 'COS  598C', 'Advanced Topics in Computer Science: Connectomics', 'Survey of contemporary techniques in computational neuroanatomy. Brain imaging via light and electron microscopy; computer vision, graphics, machine learning, and crowdsourcing for neural circuit reconstruction; graph layout, spectral methods, and latent variable models for connectome analysis; examples of C. elegans and mammalian retina.', 'Graphs', NULL),
(5, 'COS  598D', 'Advanced Topics in Computer Science: Geometric Representations for 3D Fabrication', 'This seminar explores the emerging world of 3D printers and computer-controlled fabrication devices.  In particular, we focus on computational aspects, including the geometric representations that enable design, optimization, and simulation.', 'Optimization', NULL),
(5, 'COS  598E', 'Advanced Topics in Computer Science: Securing Cyberspace with Big Data', 'This course teaches students how to search the type of "big data" that becomes routinely available to future cyber experts. In particular, it introduces students to distributed streaming data algorithms that are suitable for efficiently and effectively searching distributed and dynamic data warehouses for clues or evidence of suspicious network-wide traffic patterns or end host behavior.', 'CS', NULL),
(5, 'COS  598F', 'Advanced Topics in Computer Science: Systems and Analytics of Big Data', 'The goal of this seminar is to selectively read and discuss classical and recent publications related to big data. Example systems topics include MapReduce, key-value stores, globally distributed storage systems, large-scale systems for graphs and streams.  Data analytics topics include feature extraction and learning, ontology construction,dimension reduction, summary data structures, clustering in high dimensional space, deep learning and knowledge base or large datasets.', 'Graphs', NULL),
(5, 'ISC  233 \n \n CHM  233 \n \n COS  233 \n \n MOL  233 \n ', 'Integ/Quantitative Intro to Nat Sci II', 'An integrated, mathematically and computationally sophisticated introduction to physics and chemistry, drawing on examples from biological systems.  This year long, four course sequence is a multidisciplinary course taught across multiple departments with the following faculty: T. Gregor, J. Shaevitz (PHY); S. Shvartsman (CBE); H. Yang (CHM); R. Sedgewick (COS); P. Andolfatto (EEB); E. Wieschaus (MOL); J. Gadd, A. Leifer, B. Machta, A. Nourmohammad (LSI).  Five hours of lecture, one three-hour lab, one three-hour precept, one required evening problem session.', NULL, NULL),
(5, 'ISC  234 \n \n CHM  234 \n \n COS  234 \n \n MOL  234 \n ', 'Integ/Quantitative Intro to Nat Sci II', 'An integrated, mathematically and computationally sophisticated introduction to physics and chemistry, drawing on examples from biological systems.  This year long, four course sequence is a multi-disciplinary course taught across multiple departments with the following faculty: T. Gregor, J. Shaevitz (PHY); S. Shvartsman (CBE); H. Yang (CHM); R. Sedgewick (COS); P. Andolfatto (EEB); E. Wieschaus (MOL); J. Gadd, A. Leifer, B. Machta, A. Nourmohammad (LSI). Five hours of lecture, one three-hour lab, one three-hour precept, one required evening problem session.', NULL, NULL),
(5, 'MAT  375 \n \n COS  342', 'Introduction to Graph Theory', 'The fundamental theorems and algorithms of graph theory. Topics include: connectivity, matchings, graph coloring, planarity, the four-color theorem, extremal problems, network flows, and related algorithms.', 'Graphs', NULL),
(5, 'MUS  314 \n \n COS  314', 'Computer and Electronic Music', 'An introduction to the fundamentals of computer and electronic music.  The music and sound programming language ChucK, developed here at Princeton, will be used in conjunction with Max/MSP, another digital audio language, to study procedural programming, digital signal processing and synthesis, networking, and human-computer interfacing.', 'Networking', NULL),
(5, 'POL  478 \n \n COS  478', 'Politics in the Age of Digital Media', 'This course is a seminar designed for advanced undergraduate students and graduate students who have an interest in the role digital media play in politics. Through this course, students have opportunities to examine the role of digital media and its implications for political communication with the enduring "big" questions that have been raised in the study of politics in a democratic society. Topics include information abundance and misinformation, partisan outlets and polarization, data analytics and microtargeting in election campaigns, "new" types of group politics exemplified in MoveOn, Tea Parties.', NULL, NULL),
(5, 'TRA  301 \n \n COS  401 \n \n LIN  304', 'Introduction to Machine Translation', 'This course will provide an in-depth study of the MT paradigms (direct, transfer, statistical/example, and interlingual)  used in state-of-the-art speech-to-speech and text-based MT systems, from computational and linguistic perspectives. Machine-learning techniques for processing human languages (morphological analysis, tagging, syntactic and semantic parsing, and  language generation) will be discussed in detail. Linguistic variation across languages and its impact on computational models will be presented. Projects will involve implementing speech/text translation components, identifying their limitations and suggesting improvements.', NULL, NULL),
(6, '15050', 'Study Abroad', 'Students who are interested in studying abroad should first contact the Office of International Education. More information on Study Abroad is available on OIE''s Study Abroad page and at the CS Undergraduate Office.', NULL, NULL),
(6, '15075', 'Computer Science Co-Op', 'This course is meant for CS undergraduate students with a full-time internship that encompasses a summer and a contiguous semester, either Spring-Summer or Summer-Fall who wish to have this recorded on their academic transcript. Units posted for this course do not count toward any requirement for the CS undergraduate degree including free elective units. This course is not available to international students; consult with the Office for International Education for more information.', 'CS', NULL),
(6, '15090', 'Computer Science Practicum', 'This course is for Computer Science students who wish to have an internship experience as part of their curriculum. Students are required to write a one-page summary statement prior to registration that explains how their internship connects with their CS curriculum, specifically on how it uses material they have learned as well as prepares them for future courses. Near the end of the internship, students will be required to submit a reflection paper that describes the work they did in more detail, including lessons learned about the work experience and how they utilized their CS education to work effectively. International students should consult with the Office of International Education for appropriate paperwork and additional requirements before registration. Units earned count toward the total required units necessary for degree completion; students should speak with an academic advisor for details. This course may be taken at most 3 times for a total of 9 units maximum. Students normally register for this course for use during the summer semester.', 'CS', NULL),
(6, '15110', 'Principles of Computing', 'A course in fundamental computing principles for students with minimal or no computing background. Programming constructs: sequencing, selection, iteration, and recursion. Data organization: arrays and lists. Use of abstraction in computing: data representation, computer organization, computer networks, functional decomposition, and application programming interfaces. Use of computational principles in problem-solving: divide and conquer, randomness, and concurrency. Classification of computational problems based on complexity, non-computable functions, and using heuristics to find reasonable solutions to complex problems. Social, ethical and legal issues associated with the development of new computational artifacts will also be discussed.', 'Networking', NULL),
(6, '15112', 'Fundamentals of Programming and Computer Science', 'A technical introduction to the fundamentals of programming with an emphasis on producing clear, robust, and reasonably efficient code using top-down design, informal analysis, and effective testing and debugging. Starting from first principles, we will cover a large subset of the Python programming language, including its standard libraries and programming paradigms. We will also target numerous deployment scenarios, including standalone programs, shell scripts, and web-based applications. This course assumes no prior programming experience. Even so, it is a fast-paced and rigorous preparation for 15-122. Students seeking a more gentle introduction to computer science should consider first taking 15-110. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.', 'CS', NULL),
(6, '15121', 'Introduction to Data Structures', 'A continuation of the process of program design and analysis for students with some prior programming experience (functions, loops, and arrays, not necessarily in Java). The course reinforces object-oriented programming techniques in Java and covers data aggregates, data structures (e.g., linked lists, stacks, queues, trees, and graphs), and an introduction to the analysis of algorithms that operate on those data structures. Pre-req: 15-112 or placement', 'Graphs', NULL),
(6, '15122', 'Principles of Imperative Computation', 'For students with a basic understanding of programming (variables, expressions, loops, arrays, functions). Teaches imperative programming and methods for ensuring the correctness of programs. Students will learn the process and concepts needed to go from high-level descriptions of algorithms to correct imperative implementations, with specific application to basic data structures and algorithms. Much of the course will be conducted in a subset of C amenable to verification, with a transition to full C near the end. This course prepares students for 15-213 and 15-210. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.', 'Object Oriented Programming', NULL),
(6, '15150', 'Principles of Functional Programming', 'An introduction to programming based on a "functional" model of computation. The functional model is a natural generalization of algebra in which programs are formulas that describe the output of a computation in terms of its inputs---that is, as a function. But instead of being confined to real- or complex-valued functions, the functional model extends the algebraic view to a very rich class of data types, including not only aggregates built up from other types, but also functions themselves as values. This course is an introduction to programming that is focused on the central concepts of function and type. One major theme is the interplay between inductive types, which are built up incrementally; recursive functions, which compute over inductive types by decomposition; and proof by structural induction, which is used to prove the correctness and time complexity of a recursive function. Another major theme is the role of types in structuring large programs into separate modules, and the integration of imperative programming through the introduction of data types whose values may be altered during computation. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.', 'CS', NULL),
(6, '15210', 'Parallel and Sequential Data Structures and Algorithms', 'Teaches students about how to design, analyze, and program algorithms and data structures. The course emphasizes parallel algorithms and analysis, and how sequential algorithms can be considered a special case. The course goes into more theoretical content on algorithm analysis than 15-122 and 15-150 while still including a significant programming component and covering a variety of practical applications such as problems in data analysis, graphics, text processing, and the computational sciences. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.', 'Graphs', NULL),
(6, '15213', 'Introduction to Computer Systems', '15-213/18-213This course provides a programmer''s view of how computer systems execute programs, store information, and communicate. It enables students to become more effective programmers, especially in dealing with issues of performance, portability and robustness. It also serves as a foundation for courses on compilers, networks, operating systems, and computer architecture, where a deeper understanding of systems-level issues is required. Topics covered include: machine-level code and its generation by optimizing compilers, performance evaluation and optimization, computer arithmetic, memory organization and management, networking technology and protocols, and supporting concurrent computation. NOTE FOR GRADUATE STUDENTS: This course is not open to graduate students beginning Spring 2015. Graduate students must register for 15-513 instead.', 'Networking', NULL),
(6, '15214', 'Principles of Software Construction: Objects, Design, and Concurrency', 'Software engineers today are less likely to design data structures and algorithms from scratch and more likely to build systems from library and framework components. In this course, students engage with concepts related to the construction of software systems at scale, building on their understanding of the basic building blocks of data structures, algorithms, program structures, and computer structures. The course covers technical topics in four areas: (1) concepts of design for complex systems, (2) object oriented programming, (3) static and dynamic analysis for programs, and (4) concurrent and distributed software. Student assignments involve engagement with complex software such as distributed massively multi-player game systems and frameworks for graphical user interaction.', 'Game Design', NULL),
(6, '15221', 'Technical Communication for Computer Scientists', 'The course is designed for sophomore computer science majors to improve their abilities in practical, professional communications (both written and oral). It aims to help students compose clear, concise technical writings and oral presentations for multi-level audiences. Assignments include technical definitions, descriptions, instructions, process explanations, abstracts, memos, and research reports. Assignments may incorporate recent computer science research at Carnegie Mellon, projects in related technical courses, and professional case studies. Sophomores will likely find the course more useful if they have either had an internship or faculty-supervised research, including SURG projects prior to enrollment.', 'Research', NULL),
(6, '15251', 'Great Theoretical Ideas in Computer Science', 'This course is about how to use theoretical ideas to formulate and solve problems in computer science. It integrates mathematical material with general problem solving techniques and computer science applications. Examples are drawn from algorithms, complexity theory, game theory, probability theory, graph theory, automata theory, algebra, cryptography, and combinatorics. Assignments involve both mathematical proofs and programming. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.', 'Game Design', NULL),
(6, '15292', 'Special Topic: History of Computing', 'This course traces the history of computational devices, pioneers and principles from the early ages through the present. Topics include early computational devices, mechanical computation in the 19th century, events that led to electronic computing advances in the 20th century, the advent of personal computing and the Internet, and the social, legal and ethical impact of modern computational artifacts. This course also includes a history of programming languages, operating systems, processors and computing platforms. Students should have an introductory exposure to programming prior to taking this course.', 'Operating Systems', NULL),
(6, '15294', 'Special Topic: Rapid Prototyping Technologies', 'This mini-course introduces students to rapid prototyping technologies with a focus on laser cutting and 3D printing. The course has three components: 1) A survey of rapid prototyping and additive manufacturing technologies, the maker and open source movements, and societal impacts of these technologies; 2) An introduction to the computer science behind these technologies: CAD tools, file formats, slicing algorithms; 3) Hands-on experience with SolidWorks, laser cutting, and 3D printing, culminating in student projects (e.g. artistic creations, functional objects, replicas of famous calculating machines, etc.). Please note that there will be a usage/materials fee for this course.', 'CS', NULL),
(6, '15295', 'Competition Programming and Problem Solving', 'Each year, Carnegie Mellon fields two teams for participation in the ACM-ICPC Regional Programming Contest. During many recent years, one of those teams has earned the right to represent Carnegie Mellon at the ACM-ICPC World Finals. This course is a vehicle for those who consistently and rigorously train in preparation for the contests to earn course credit for their effort and achievement. Preparation involves the study of algorithms, the practice of programming and debugging, the development of test sets, and the growth of team, communication, and problem solving skills. Neither the course grade nor the number of units earned are dependent on ranking in any contest. Students are not required to earn course credit to participate in practices or to compete in ACM-ICPC events.', NULL, NULL),
(6, '15296', 'Special Topic: Images of Computing', 'In this research and action based course we will explore computing from a cultural perspective. We will reflect on some issues often taken for granted e.g. are our attitudes to computing generalizable or culturally specific? How are computing and its workforce perceived and represented in US culture and in cultures from around the world? In particular we will be examining how images of the field might affect public attitudes, access to resources and understanding of computer science. Representations of the field take on particular significance in light of recent US government projections: between now and 2018, among all occupations in all fields of science and engineering, computer science occupations will account for nearly 60% of all job growth [Computing Community Consortium, 2010]. This course is aimed primarily at students who are interested in exploring some of the broad issues of computer science and its cultural context. Students will gain experience in teamwork, teaching and presenting. We will use academic papers, web sites, group discussion/debate and popular media. Findings from our investigations will inspire the action component in which student teams develop and implement a public/outreach presentation aimed at re-presenting the exciting field of computer science with broad appeal in mind.', 'Research', NULL),
(6, '15302', 'Special Topic: Innovating for Underserved Communities: Field Research Basics', 'The ultimate goal of this course is to teach students practical skills necessary to conduct effective field research on the topic of innovating for underserved communities. The course begins with an introduction to how computing technology can have a positive impact on the lives of people in developing communities and people with disabilities. Next, students will learn about the components of field research including needs assessment, literature review, iterative solution development, evaluation, and dissemination. Students will also explore the challenges of field research in this area and learn effective strategies for overcoming these challenges. Overall, students will engage in assignments and in-class exercises that help them gain experience and prepare for future field research endeavors. As part of the final assignment, students will participate in a solution design process for a specific challenge faced by an underserved community. This year, the final assignment projects will be chosen in partnership with the students in the class.', 'Research', NULL),
(6, '15303', 'Special Topic: Seminar on Innovating for Underserved Communities', 'The ultimate goal of this course is to familiarize students with ongoing work in the area of technology innovations for underserved communites. This seminar course will review several key publications and presentations on this topic and teach students the necessary skills to analyze and critique this work in useful ways. Class sessions will be dedicated to discussing reading/viewing assignments and each class discussion will be led by students. Assignments will involve analyzing, writing, and presenting critiques of specific projects.', NULL, NULL),
(6, '15312', 'Foundations of Programming Languages', 'This course discusses in depth many of the concepts underlying the design, definition, implementation, and use of modern programming languages. Formal approaches to defining the syntax and semantics are used to describe the fundamental concepts underlying programming languages. A variety of programming paradigms are covered such as imperative, functional, logic, and concurrent programming. In addition to the formal studies, experience with programming in the languages is used to illustrate how different design goals can lead to radically different languages and models of computation.', NULL, NULL),
(6, '15319', 'Cloud Computing', 'This course gives students an overview of Cloud Computing, which is the delivery of computing as a service over a network, whereby distributed resources are rented, rather than owned, by an end user as a utility. Students will study its enabling technologies, building blocks, and gain hands-on experience through projects utilizing public cloud infrastructures. Cloud computing services are widely adopted by many organizations across domains. The course will introduce the cloud and cover the topics of data centers, software stack, virtualization, software defined networks and storage, cloud storage, and programming models. We will start by discussing the cloud?s motivating factors, benefits, challenges, service models, SLAs and security. We will describe several concepts behind data center design and management, which enable the economic and technological benefits of the cloud paradigm. Next, we will study how CPU, memory and I/O resources, network (SDN) and storage (SDS) are virtualized, and the key role of virtualization to enable the cloud. Subsequently, students will study cloud storage concepts like data distribution, durability, consistency and redundancy. We will discuss distributed file systems, NoSQL databases and object storage using HDFS, CephFS, HBASE, MongoDB, Cassandra, DynamoDB, S3, and Swift as case studies. Finally, students will study the MapReduce, Spark and GraphLab programming models. Students will work with Amazon Web Services and Microsoft Azure, to rent and provision compute resources and then program and deploy applications using these resources. Students will develop and evaluate scaling and load balancing solutions, work with cloud storage systems, and develop applications in several programming paradigms. 15619 students must complete an extra team project which entails designing and implementing a cost- and performance-sensitive web-service for querying big data.', 'Graphs', NULL),
(6, '15322', 'Introduction to Computer Music', 'Computers are used to synthesize sound, process signals, and compose music. Personal computers have replaced studios full of sound recording and processing equipment, completing a revolution that began with recording and electronics. In this course, students will learn the fundamentals of digital audio, basic sound synthesis algorithms, and techniques for digital audio effects and processing. Students will apply their knowledge in programming assignments using a very high-level programming language for sound synthesis and composition. In a final project, students will demonstrate their mastery of tools and techniques through music composition or by the implementation of a significant sound-processing technique.', NULL, NULL),
(6, '15323', 'Computer Music Systems and Information Processing', 'This course presents concepts and techniques for representing and manipulating discrete music information, both in real time and off line. Representations of music as explicitly timed event sequences will be introduced, and students will learn how to build efficient run-time systems for event scheduling, tempo control, and interactive processing. The MIDI protocol is used to capture real-time performance information and to generate sound. The course will also cover non-real-time processing of music data, including Markov models, style recognition, computer accompaniment, query-by-humming, and algorithmic composition. This course is independent of, and complementary to 15-322, Introduction to Computer Music, which focuses on sound synthesis and signal processing.', NULL, NULL),
(6, '15348', 'Embedded Systems', 'This course is offered only at Carnegie Mellon''s campus in Qatar. This course covers the broad range of foundational skills that apply across all embedded computer system application areas, from thermostats to self-driving vehicles. The emphasis is at the layer where hardware meets software. Topics include microcontroller hardware, assembly language, embedded C programming, analog I/O, timers, code optimization, interrupts, and concurrency. Real world engineering practices, constraints, and example applications are integrated throughout the course. Weekly hands-on hardware and software experiences with an industry-strength automotive embedded controller are coordinated with the lecture content to reinforce core skills.', 'Embedded Systems', NULL),
(6, '15351', 'Algorithms and Advanced Data Structures', 'The objective of this course is to study algorithms for general computational problems, with a focus on the principles used to design those algorithms. Efficient data structures will be discussed to support these algorithmic concepts. Topics include: Run time analysis, divide-and-conquer algorithms, dynamic programming algorithms, network flow algorithms, linear and integer programming, large-scale search algorithms and heuristics, efficient data storage and query, and NP-completeness. Although this course may have a few programming assignments, it is primarily not a programming course. Instead, it will focus on the design and analysis of algorithms for general classes of problems. This course is not open to CS graduate students who should consider taking 15-651 instead.THIS COURSE IS NOT OPEN TO COMPUTER SCIENCE MAJORS OR MINORS.', 'CS', NULL),
(6, '15355', 'Modern Computer Algebra', 'The goal of this course is to investigate the relationship between algebra and computation. The course is designed to expose students to algorithms used for symbolic computation, as well as to the concepts from modern algebra which are applied to the development of these algorithms. This course provides a hands-on introduction to many of the most important ideas used in symbolic mathematical computation, which involves solving system of polynomial equations (via Groebner bases), analytic integration, and solving linear difference equations. Throughout the course the computer algebra system Mathematica will be used for computation.', NULL, NULL),
(6, '15400', 'Research Practicum in Computer Science', 'This Spring course is the second part of a two-course sequence that is designed to help prepare students to invent the future state-of-the-art in the field of computer science. Building directly upon 15-300 (the prerequisite for this course), students will conduct a semester-long independent research project, under the guidance of both the course staff and a faculty project mentor. The course does not meet for lecture or recitations. Instead, the students will spend their time working on their research projects, and will also meet with course staff on a bi-weekly basis to discuss their progress. Students will prepare a written report and a poster presentation at the end of the semester to describe what they have accomplished.', 'Research', NULL),
(6, '15410', 'Operating System Design and Implementation', 'Operating System Design and Implementation is a rigorous hands-on introduction to the principles and practice of operating systems. The core experience is writing a small Unix-inspired OS kernel, in C with some x86 assembly language, which runs on a PC hardware simulator (and on actual PC hardware if you wish). Work is done in two-person teams, and "team programming" skills (source control, modularity, documentation) are emphasized. The size and scope of the programming assignments typically result in students significantly developing their design, implementation, and debugging abilities. Core concepts include the process model, virtual memory, threads, synchronization, and deadlock; the course also surveys higher-level OS topics including file systems, interprocess communication, networking, and security. Students, especially graduate students, who have not satisfied the prerequisite at Carnegie Mellon are strongly cautioned - to enter the class you must be able to write a storage allocator in C, use a debugger, understand 2''s-complement arithmetic, and translate between C and x86 assembly language. The instructor may require you to complete a skills assessment exercise before the first week of the semester in order to remain registered in the class. Auditing: this course is usually full, and we generally receive many more requests to audit than we can accept. If you wish to audit, please have your advisor contact us before the semester begins to discuss your educational goals.', 'Networking', NULL),
(6, '15413', 'Software Engineering Practicum', '15-413, the Software Engineering Practicum, gives you an opportunityto learn and apply software engineering skills to real-world softwareprojects. This semester 15-413 will be part of the Facebook OpenAcademy program, providing students an opportunity to work with eachother and students from other universities to make substantialcontributions to external open source projects.Enrollment in this course is extremely limited and is possible onlywith explicit permission from the course instructors. See the courseweb site for details.After completing this course, students will: * Have substantial experience contributing to real, open sourcesoftware projects. * Know and be able to use the software development processes used byopen source software projects, with a deep understanding of theprocesses and techniques you will encounter in a software engineeringworkplace. * Be able to evaluate and discuss aspects of software managementincluding project planning, requirements analysis, architecture,detailed design, quality assurance, and risk management. * Have substantial first-hand understanding of the softwareengineering realities that drive software engineering practices, withconcrete experience and active reflection on your course experiences.', NULL, NULL),
(6, '15415', 'Database Applications', 'This course covers the fundamental topics for Database Management Systems: Database System Architectural Principles (ACID properties; data abstraction; external, conceptual, and internal schemata; data independence; data definition and data manipulation languages), Data models (entity-relationship and relational data models; data structures, integrity constraints, and operations for each data model; relational query languages: SQL, algebra, calculus), Theory of database design (functional dependencies; normal forms; dependency preservation; information loss), Query Optimization (equivalence of expressions, algebraic manipulation; optimization of selections and joins), Storage Strategies (indices, B-trees, hashing), Query Processing (execution of sort, join, and aggregation operators), and Transaction Processing (recovery and concurrency control).', 'Embedded Systems', NULL),
(6, '15418', 'Parallel Computer Architecture and Programming', 'The fundamental principles and engineering tradeoffs involved in designing modern parallel computers, as well as the programming techniques to effectively utilize these machines. Topics include naming shared data, synchronizing threads, and the latency and bandwidth associated with communication. Case studies on shared-memory, message-passing, data-parallel and dataflow machines will be used to illustrate these techniques and tradeoffs. Programming assignments will be performed on one or more commercial multiprocessors, and there will be a significant course project.', 'Computer Architecture', NULL),
(6, '15424', 'Foundations of Cyber-Physical Systems', 'Cyber-physical systems (CPSs) combine cyber effects (computation and/or communication) with physical effects (motion or other physical processes). Designing algorithms to control CPSs, such as those in cars, aircraft and robots, is challenging due to their tight coupling with physical behavior. At the same time, it is vital that these algorithms be correct, since we rely on CPSs for safety-critical tasks like keeping aircraft from colliding. Students in this course will understand the core principles behind CPSs, develop models and controls, identify safety specifications and critical properties of CPSs, understand abstraction and system architectures, learn how to design by invariant, reason rigorously about CPS models, verify CPS models of appropriate scale, understand the semantics of a CPS model and develop an intuition for operational effects. Students will write hybrid programs (HPs), which capture relevant dynamical aspects of CPSs in a simple programming language with a simple semantics, allowing the programmer to refer to real-valued variables representing real quantities and specify their dynamics as part of the HP.', NULL, NULL),
(6, '15437', 'Web Application Development', 'This course will introduce concepts in programming web application servers. We will study the fundamental architectural elements of programming web sites that produce content dynamically. The primary technologies introduced will be the Django framework for Python and Java Servlets, but we will cover related topics as necessary so that students can build significant applications. Such topics include: HTTP, HTML, CSS, Javascript, XML, Design Patterns, Relational and Non-relational Databases, Object-Relation Mapping tools, Security, Web Services, Cloud Deployment, Internationalization, and Scalability and Performance Issues. Students must be comfortable programming in Java and/or Python to register for this course. Students must provide their own computer hardware for this course. Please see the Related URL above for more information.', 'Security', NULL),
(6, '15440', 'Distributed Systems', 'The goals of this course are twofold: First, for students to gain an understanding of the principles and techniques behind the design of distributed systems, such as locking, concurrency, scheduling, and communication across the network. Second, for students to gain practical experience designing, implementing, and debugging real distributed systems. The major themes this course will teach include scarcity, scheduling, concurrency and concurrent programming, naming, abstraction and modularity, imperfect communication and other types of failure, protection from accidental and malicious harm, optimism, and the use of instrumentation and monitoring and debugging tools in problem solving. As the creation and management of software systems is a fundamental goal of any undergraduate systems course, students will design, implement, and debug large programming projects. As a consequence, competency in both the C and Java programming languages is required.', 'Distributed Applications', NULL),
(6, '15441', 'Computer Networks', 'The emphasis in this course will be on the basic performance and engineering trade-offs in the design and implementation of computer networks. To make the issues more concrete, the class includes several multi-week projects requiring significant design and implementation. The goal is for students to learn not only what computer networks are and how they work today, but also why they are designed the way they are and how they are likely to evolve in the future. We will draw examples primarily from the Internet. Topics to be covered include: network architecture, routing, congestion/flow/error control, naming and addressing, peer-to-peer and the web, internetworking, and network security.', 'Networking', NULL),
(6, '15451', 'Algorithm Design and Analysis', 'This course is about the design and analysis of algorithms. We study specific algorithms for a variety of problems, as well as general design and analysis techniques. Specific topics include searching, sorting, algorithms for graph problems, efficient data structures, lower bounds and NP-completeness. A variety of other topics may be covered at the discretion of the instructor. These include parallel algorithms, randomized algorithms, geometric algorithms, low level techniques for efficient programming, cryptography, and cryptographic protocols.', 'Graphs', NULL),
(6, '15453', 'Formal Languages, Automata, and Computability', 'An introduction to the fundamental ideas and models underlying computing: finite automata, regular sets, pushdown automata, context-free grammars, Turing machines, undecidability, and complexity theory.', NULL, NULL),
(6, '15462', 'Computer Graphics', 'This course provides a comprehensive introduction to computer graphics modeling, animation, and rendering. Topics covered include basic image processing, geometric transformations, geometric modeling of curves and surfaces, animation, 3-D viewing, visibility algorithms, shading, and ray tracing.', 'Graphs', NULL),
(6, '15465', 'Animation Art and Technology', 'Animation Art and Technology is an interdisciplinary course cross-listed between Art and Computer Science. Faculty and teaching assistants from computer science and art teach the class as a team. It is a project-based course in which four to five interdisciplinary teams of students produce animations. Most of the animations have a substantive technical component and the students are challenged to consider innovation with content to be equal with the technical. The class includes basic tutorials for work in Maya leading toward more advanced applications and extensions of the software such as motion capture and algorithms for animating cloth, hair, particles, and grouping behaviors. The first class will meet in CFA room 303.', 'CS', NULL),
(6, '15467', 'Special Topic: Simulation Methods for Animation and Fabrication', 'Physically-based simulation is a core topic in computer graphics, where it is used to create the natural motions necessary for realistic training simulations, movies, video games, and other interactive applications. With the advent of affordable and accessible 3D Printing technologies, physics-based methods are also being adopted to enable the design and fabrication of physical objects. This course will cover a broad range of techniques -- from particle systems to rigid bodies to finite elements -- and applications to animation and digital fabrication. A hands-on approach will be taken, with an emphasis on developing fun, interactive computer programs.', 'Game Design', NULL),
(6, '15483', 'Special Topic: Truth, Justice, and Algorithms', 'Truth, Justice, and Algorithms is an interdisciplinary course that covers selected theoretical topics at the interface of computer science and economics, focusing on the algorithmic side of incentives and fairness. The course''s topics include: computational social choice, e.g., voting rules as maximum likelihood estimators, the axiomatic approach to ranking systems and crowdsourcing, manipulation of elections and ways to circumvent it; cooperative games, focusing on solution concepts such as the core and the Shapley value, and their computation; fair division algorithms for allocating divisible and indivisible goods, and approximate notions of fairness; online matching algorithms (competitive analysis, not dating) and kidney exchange; noncooperative games, including Nash equilibrium and correlated equilibrium, their computation, connections to learning theory, Stackelberg security games, and the price of anarchy in congestion and routing games; and topics in social networks such as the diffusion of technologies and influence maximization.NOTE: This course is cross-listed with 15-896. Undergraduates may enroll into 15-896 but be aware of work load difference. The two courses are identical in terms of lectures, content, and homework assignments. The only difference is in the final project requirement. In 483, students will prepare a summary of several papers -- this will require 10-20 hours of work. In 896, students will carry out a research project with the goal of obtaining novel results, and present their results in class -- a good project will require 50-60 hours of work. Also note that 483 is 9 units, and 896 is 12 units.', 'Game Design', NULL),
(6, '15491', 'Special Topic: CMRoboBits: AI and Robots for Daily-Life Problems', 'This course will be a project-based course in which we will look at AI androbotics artifacts and techniques to automate solutions to real-worldproblems, in particular related to life in cities. The course will startby collecting and brainstorming about real problems biased to ones thatinvolve the physical space in addition to the cyber information space,such as traffic rush hour, noise in cities, 3D building inspection,service and data gathering. We will then formalize the chosen problems andanalyze existing real data. The course will proceed by possibly enablingthe students to prototype their projects beyond simulation, and using theCORAL lab robots, e.g., the CoBot or NAO robots or drones. The course workwill be a single large project, performed by groups of up to 3 students.The projects will be divided in three phases, due at the end of February,March, and the end of the course. Students are expected to haveprogramming experience in C++ or python.', NULL, NULL),
(6, '15494', 'Special Topic: Cognitive Robotics', 'Cognitive robotics is a new approach to robot programming based on high level primitives for perception and action. These primitives draw inspiration from ideas in cognitive science combined with state of the art robotics algorithms. Students will experiment with these primitives and help develop new ones using the Tekkotsu software framework on the Calliope robot, which includes a 5 degree-of-freedom arm with gripper, a Kinect camera on a pan/tilt mount, and Ubuntu Linux on a dual-core on-board netbook. Prior robotics experience is not necessary, but strong programming skills are required.', NULL, NULL),
(6, '15503', 'Special Topic: Introduction to Theoretical Cryptography', 'This course is aimed as an introduction to theoretical cryptography for graduate and advanced undergraduate students. We will cover formal definitions of security, as well as constructions of some of the most useful and popular primitives in cryptography; pseudorandom generators, encryption, signatures, zero-knowledge, multi-party computation, etc. In addition , we will cover the necessary number-theoretic background.', 'Graphs', NULL),
(6, '15513', 'Introduction to Computer Systems', 'This course provides a programmer''s view of how computer systems execute programs, store information, and communicate. It enables students to become more effective programmers, especially in dealing with issues of performance, portability and robustness. It also serves as a foundation for courses on compilers, networks, operating systems, and computer architecture, where a deeper understanding of systems-level issues is required. Topics covered include: machine-level code and its generation by optimizing compilers, performance evaluation and optimization, computer arithmetic, memory organization and management, networking technology and protocols, and supporting concurrent computation.You can sign up for 15-513 for either 6 or 12 credits. The reason there are two options is that you might be taking 15-513 in order to review the material and qualify to take other courses in your program. If this is the case, we expect that the work load for 15-513 will be more like a 6 unit class. If, on the other hand, you are seeing the material for the first time, then it will be like a 12-unit course for you. So, you need to decide, possibly in conjunction with your advisor which situation you are in and then sign up for the proper number of units.', 'Networking', NULL),
(6, '15539', 'Independent Study in Computer Science Pedagogy This Section Cancelled', 'Missing Course Description - please contact the teaching department.', 'CS', NULL),
(6, '15591', 'Independent Study in Computer Science', 'The School of Computer Science offers Independent Study courses, which allow motivated students to work on projects under the supervision of a faculty advisor while receiving academic credit. Independent studies are usually one semester in duration and require prior approval from the faculty member and the School of Computer Science.', 'CS', NULL),
(6, '15592', 'Independent Study in Computer Science', 'to be determined', 'CS', NULL),
(6, '15593', 'Independent Study in Computer Science', 'To be determined', 'CS', NULL),
(6, '15594', 'Independent Study in Computer Science', 'to be determined', 'CS', NULL),
(6, '15599', 'SCS Honors Undergraduate Research Thesis', 'Available only to students registered in the CS Senior Research Thesis Program.', 'Research', NULL),
(6, '15602', 'Special Topic :Innovating for Underserved Communities: Field Research Basics', 'The ultimate goal of this course is to teach students practical skills necessary to conduct effective field research on the topic of innovating for underserved communities. The course begins with an introduction to how computing technology can have a positive impact on the lives of people in developing communities and people with disabilities. Next, students will learn about the components of field research including needs assessment, literature review, iterative solution development, evaluation, and dissemination. Students will also explore the challenges of field research in this area and learn effective strategies for overcoming these challenges. Overall, students will engage in assignments and in-class exercises that help them gain experience and prepare for future field research endeavors. As part of the final assignment, students will participate in a solution design process for a specific challenge faced by an underserved community. This year, the final assignment projects will be chosen in partnership with the students in the class.', 'Research', NULL),
(6, '15603', 'Special Topics: Seminar on Innovating for Underserved Communities', 'The ultimate goal of this course is to familiarize students with ongoing work in the area of technology innovations for underserved communities. This seminar course will review several key publications and presentations on this topic and teach students the necessary skills to analyze and critique this work in useful ways. Class sessions will be dedicated to discussing reading/viewing assignments and each class discussion will be led by students. Assignments will involve analyzing, writing, and presenting critiques of specific projects.', NULL, NULL);
INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(6, '15605', 'Operating System Design and Implementaion', 'Operating System Design and Implementation is a rigorous hands-on introduction to the principles and practice of operating systems. The core experience is writing a small Unix-inspired OS kernel, in C with some x86 assembly language, which runs on a PC hardware simulator (and on actual PC hardware if you wish). Work is done in two-person teams, and "team programming" skills (source control, modularity, documentation) are emphasized. The size and scope of the programming assignments typically result in students significantly developing their design, implementation, and debugging abilities. Core concepts include the process model, virtual memory, threads, synchronization, and deadlock; the course also surveys higher-level OS topics including file systems, interprocess communication, networking, and security. Students, especially graduate students, who have not satisfied the prerequisite at Carnegie Mellon are strongly cautioned - to enter the class you must be able to write a storage allocator in C, use a debugger, understand 2''s-complement arithmetic, and translate between C and x86 assembly language. The instructor may require you to complete a skills assessment exercise before the first week of the semester in order to remain registered in the class. Auditing: this course is usually full, and we generally receive many more requests to audit than we can accept. If you wish to audit, please have your advisor contact us before the semester begins to discuss your educational goals.', 'Networking', NULL),
(6, '15615', 'Database Applications This Section Cancelled', 'This course covers the fundamental topics for Database Management Systems: Database System Architectural Principles (ACID properties; data abstraction; external, conceptual, and internal schemata; data independence; data definition and data manipulation languages), Data models (entity-relationship and relational data models; data structures, integrity constraints, and operations for each data model; relational query languages: SQL, algebra, calculus), Theory of database design (functional dependencies; normal forms; dependency preservation; information loss), Query Optimization (equivalence of expressions, algebraic manipulation; optimization of selections and joins), Storage Strategies (indices, B-trees, hashing), Query Processing (execution of sort, join, and aggregation operators), and Transaction Processing (recovery and concurrency control).', 'Embedded Systems', NULL),
(6, '15618', 'Parallel Computer Architecture and Programming', 'The fundamental principles and engineering tradeoffs involved in designing modern parallel computers, as well as the programming techniques to effectively utilize these machines. Topics include naming shared data, synchronizing threads, and the latency and bandwidth associated with communication. Case studies on shared-memory, message-passing, data-parallel and dataflow machines will be used to illustrate these techniques and tradeoffs. Programming assignments will be performed on one or more commercial multiprocessors, and there will be a significant course project.', 'Computer Architecture', NULL),
(6, '15619', 'Cloud Computing', 'GATES HILLMAN 4307 This course gives students an overview of Cloud Computing, which is the delivery of computing as a service over a network, whereby distributed resources are rented, rather than owned, by an end user as a utility. Students will study its enabling technologies, building blocks, and gain hands-on experience through projects utilizing public cloud infrastructures. Cloud computing services are widely adopted by many organizations across domains. The course will introduce the cloud and cover the topics of data centers, software stack, virtualization, software defined networks and storage, cloud storage, and programming models. We will start by discussing the cloud?s motivating factors, benefits, challenges, service models, SLAs and security. We will describe several concepts behind data center design and management, which enable the economic and technological benefits of the cloud paradigm. Next, we will study how CPU, memory and I/O resources, network (SDN) and storage (SDS) are virtualized, and the key role of virtualization to enable the cloud. Subsequently, students will study cloud storage concepts like data distribution, durability, consistency and redundancy. We will discuss distributed file systems, NoSQL databases and object storage using HDFS, CephFS, HBASE, MongoDB, Cassandra, DynamoDB, S3, and Swift as case studies. Finally, students will study the MapReduce, Spark and GraphLab programming models. Students will work with Amazon Web Services and Microsoft Azure, to rent and provision compute resources and then program and deploy applications using these resources. Students will develop and evaluate scaling and load balancing solutions, work with cloud storage systems, and develop applications in several programming paradigms. 15619 students must complete an extra team project which entails designing and implementing a cost- and performance-sensitive web-service for querying big data.', 'Graphs', NULL),
(6, '15622', 'Introduction to Computer Music', 'Computers are used to synthesize sound, process signals, and compose music. Personal computers have replaced studios full of sound recording and processing equipment, completing a revolution that began with recording and electronics. In this course, students will learn the fundamentals of digital audio, basic sound synthesis algorithms, and techniques for digital audio effects and processing. Students will apply their knowledge in programming assignments using a very high-level programming language for sound synthesis and composition. In a final project, students will demonstrate their mastery of tools and techniques through music composition or by the implementation of a significant sound-processing technique.', NULL, NULL),
(6, '15623', 'Computer Music Systems and Information Processing', 'This course presents concepts and techniques for representing and manipulating discrete music information, both in real time and off line. Representations of music as explicitly timed event sequences will be introduced, and students will learn how to build efficient run-time systems for event scheduling, tempo control, and interactive processing. The MIDI protocol is used to capture real-time performance information and to generate sound. The course will also cover non-real-time processing of music data, including Markov models, style recognition, computer accompaniment, query-by-humming, and algorithmic composition. This course is independent of, and complementary to 15-322, Introduction to Computer Music, which focuses on sound synthesis and signal processing.', NULL, NULL),
(6, '15624', 'ST: Foundations of Cyber-Physical Systems', 'Cyber-physical systems (CPSs) combine cyber effects (computation and/or communication) with physical effects (motion or other physical processes). Designing algorithms to control CPSs, such as those in cars, aircraft and robots, is challenging due to their tight coupling with physical behavior. At the same time, it is vital that these algorithms be correct, since we rely on CPSs for safety-critical tasks like keeping aircraft from colliding. Students in this course will understand the core principles behind CPSs, develop models and controls, identify safety specifications and critical properties of CPSs, understand abstraction and system architectures, learn how to design by invariant, reason rigorously about CPS models, verify CPS models of appropriate scale, understand the semantics of a CPS model and develop an intuition for operational effects. Students will write hybrid programs (HPs), which capture relevant dynamical aspects of CPSs in a simple programming language with a simple semantics, allowing the programmer to refer to real-valued variables representing real quantities and specify their dynamics as part of the HP.', NULL, NULL),
(6, '15637', 'Web Application Development', 'This course will introduce concepts in programming web application servers. We will study the fundamental architectural elements of programming web sites that produce content dynamically. The primary technologies introduced will be the Django framework for Python and Java Servlets, but we will cover related topics as necessary so that students can build significant applications. Such topics include: HTTP, HTML, CSS, Javascript, XML, Design Patterns, Relational and Non-relational Databases, Object-Relation Mapping tools, Security, Web Services, Cloud Deployment, Internationalization, and Scalability and Performance Issues. Students must be comfortable programming in Java and/or Python to register for this course. Students must provide their own computer hardware for this course. Please see the Related URL above for more information.', 'Security', NULL),
(6, '15640', 'Distributed Systems', 'The goals of this course are twofold: First, for students to gain an understanding of the principles and techniques behind the design of distributed systems, such as locking, concurrency, scheduling, and communication across the network. Second, for students to gain practical experience designing, implementing, and debugging real distributed systems. The major themes this course will teach include scarcity, scheduling, concurrency and concurrent programming, naming, abstraction and modularity, imperfect communication and other types of failure, protection from accidental and malicious harm, optimism, and the use of instrumentation and monitoring and debugging tools in problem solving. As the creation and management of software systems is a fundamental goal of any undergraduate systems course, students will design, implement, and debug large programming projects. As a consequence, competency in both the C and Java programming languages is required.', 'Distributed Applications', NULL),
(6, '15649', 'Seminar Data Systems This Section Cancelled', 'This course series is designed for and exclusively used by the Systems track of the Masters in Computational Data Science. Most students in this program will take section A, Seminar 1, in their first semester, section B, Seminar 2, in their second semester and section C, Capstone, in their third and final semester. As a series this is equivalent to a 48 unit capstone, spread out over the entire masters program. The sequence will emphasize learning from state of the art technical talks at the beginning, evolving into recently written paper reading and multi-paper survey reporting, and end with a large project and project report. The theme of all sections is large scale systems for big data processing, highly available distributed systems, data mining and machine learning, and broadly, data science.', 'Machine Learning', NULL),
(6, '15650', 'Algorithms and Advanced Data Structures', 'The objective of this course is to study general computational problems, with a focus on the principles used to design those algorithms. Efficient data structures will be discussed to support these algorithmic concepts. Topics include: Run time analysis, divide-and-conquer algorithms, dynamic programming algorithms, network flow algorithms, linear and integer programming, large-scale search algorithms and heuristics, efficient data storage and query, and NP-completeness. Although this course will have several programming assignments, it is primarily not a programming course. Instead, it will focus on the design and analysis of algorithms for general classes of problems. This course is not open to CS graduate students who should consider taking 15-651 instead.', NULL, NULL),
(6, '15651', 'Algorithm Design and Analysis', 'This course is intended for SCS graduate students. All other graduate students should register for 15-650." This course is about the design and analysis of algorithms. We study specific algorithms for a variety of problems, as well as general design and analysis techniques. Specific topics include searching, sorting, algorithms for graph problems, efficient data structures, lower bounds and NP-completeness. A variety of other topics may be covered at the discretion of the instructor. These include parallel algorithms, randomized algorithms, geometric algorithms, low level techniques for efficient programming, cryptography, and cryptographic protocols.', 'Graphs', NULL),
(6, '15652', 'Foundation Programming Languages', 'This course discusses in depth many of the concepts underlying the design, definition, implementation, and use of modern programming languages. Formal approaches to defining the syntax and semantics are used to describe the fundamental concepts underlying programming languages. A variety of programming paradigms are covered such as imperative, functional, logic, and concurrent programming. In addition to the formal studies, experience with programming in the languages is used to illustrate how different design goals can lead to radically different languages and models of computation.', NULL, NULL),
(6, '15661', 'Interaction and Expression using the Pausch Bridge Lighting', 'Working in cross-disciplinary teams, students will explore light as art, interactive design and programming using a Pharos lighting control system. Students will explore the use of light and interaction using the actual controls within the Randy Pausch Memorial Bridge. Student teams will develop final projects that will be exhibited on the actual Randy Pausch Memorial Bridge.', NULL, NULL),
(6, '15662', 'Computer Graphics', 'This course provides a comprehensive introduction to computer graphics modeling, animation, and rendering. Topics covered include basic image processing, geometric transformations, geometric modeling of curves and surfaces, animation, 3-D viewing, visibility algorithms, shading, and ray tracing.', 'Graphs', NULL),
(6, '15667', 'Special Topic: Simulation Methods for Animation and Fabrication', 'Physically-based simulation is a core topic in computer graphics, where it is used to create the natural motions necessary for realistic training simulations, movies, video games, and other interactive applications. With the advent of affordable and accessible 3D Printing technologies, physics-based methods are also being adopted to enable the design and fabrication of physical objects. This course will cover a broad range of techniques -- from particle systems to rigid bodies to finite elements -- and applications to animation and digital fabrication. A hands-on approach will be taken, with an emphasis on developing fun, interactive computer programs.', 'Game Design', NULL),
(6, '15669', 'Masters Research This Section Cancelled', 'Missing Course Description - please contact the teaching department.', 'Research', NULL),
(6, '15689', 'Independent Study in the Computer Sciences', 'This course is for Master''s student who plan to do an Independent Study in the Master of Science program within the Computer Science Department - SECTION A or enrolled in the ISR Master of Computational Data Science program SECTION B. You will placed on the waitlist until your advisor gives you permission to proceed.', 'CS', NULL),
(6, '15694', 'Special Topic: Cognitive Robotics', 'Cognitive robotics is a new approach to robot programming based on high level primitives for perception and action. These primitives draw inspiration from ideas in cognitive science combined with state of the art robotics algorithms. Students will experiment with these primitives and help develop new ones using the Tekkotsu software framework on the Calliope robot, which includes a 5 degree-of-freedom arm with gripper, a Kinect camera on a pan/tilt mount, and Ubuntu Linux on a dual-core on-board netbook. Prior robotics experience is not necessary, but strong programming skills are required.', NULL, NULL),
(6, '15697', 'Graduate Reading and Research', 'None', 'Research', NULL),
(6, '15719', 'Advanced Cloud Computing', 'Computing in the cloud has emerged as a leading paradigm for cost-effective, scalable, well-managed computing. A Users pay for services provided in a broadly shared, power efficient datacenter, enabling dynamic computing needs to be met without paying for more than is needed. A Actual machines may be virtualized into machine-like services, or more abstract programming platforms, or application-specific services, with the cloud computing infrastructure managing sharing, scheduling, reliability, availability, elasticity, privacy, provisioning and geographic replication.Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', 'Graphs', NULL),
(6, '15721', 'Database Systems : Advanced Database Systems', 'DESCRIPTION:This course will be a hands-on class on the internals of modern database management systems. It will cover the core concepts and fundamentals of the components that are used in both high-performance transaction processing systems (OLTP) and large-scale analytical systems (OLAP). The class will stress both efficiency and correctness of the implementation of these ideas. All class projects will be in the context of real database system. The course should be appropriate for graduate students in software systems and for advanced undergraduates with strong systems programming skills.PREREQUISITES:The prerequisites are (1) 15-415/615 or an equivalent undergraduate class in databases and (2) 15-410 or an equivalent undergraduate class in operating systems. Students that are unable to meet these requirements must otherwise receive permission from the instructor. Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', 'Databases', NULL),
(6, '15744', 'Computer Networks : Computer Networks', '15-744 is a graduate course in computer networks. The goals are:- To understand the state of the art in network protocols, network architecture, and networked systems.- To understand how to engage in networking research.- To investigate novel ideas in networking through a semester-long research project.The past few years have seen a remarkable growth in the global network infrastructure. The Internet has grown from a research curiosity to something we all take for granted. How does this network infrastructure work? What are the design principles upon which it is based, and how are those principles applied in practice? How can we make the Internet work better today? We will examine these issues and more during the course.PREREQUISITES: The prerequisite will be 15-441/440/410 or an equivalent undergraduate class in Systems.Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', 'Networking', NULL),
(6, '15745', 'Optimizing Compilers for Modern Architectures', 'Description: 15-745 is a graduate course in optimizing compilers for modern architectures. The learning objectives are: To understand the salient techniques used in building optimizing compilers that effectively exploit modern processor architectures. To gain hands-on experience in implementing significant optimizations within the framework of a modern research compiler. To investigate novel ideas in optimizing compilers through a six-week long research project.', 'Optimization', NULL),
(6, '15750', 'Graduate Algorithms', 'The course will cover a fairly wide range of topics in algorithm design. Some of the topics will be quite a bit older work from the 1960s to more recent work from this century. We hope to present as many different tools and algorithms as time permits. Most topics will be covered in two phases. In the first we will cover an important design technique by presenting a classic possibly simple application. In the second, an application will be presented that hopefully will be one that is new to most of the class. By the end of the class students are expected to be able to recognize which tool or method to apply to a problem and reasonably proficient at using this tool. We also feel that the student should be able to explain their algorithmic design idea to their piers and supervisors both in writing and orally. This is why we require both written and oral presentations of homework. Please check the preliminary schedule for an idea of the possible topics to be covered. The schedule at this point is mostly a list of topics covered some five years ago. The schedule will be updated with several newer topics. Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', NULL, NULL),
(6, '15780', 'Graduate Artificial Intelligence', 'Please refer to http://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', 'Artificial Intelligence', NULL),
(6, '15801', 'CS PhD Alternative Elective', 'None', NULL, NULL),
(6, '15802', 'CSD PhD Elective', 'Please refer to this link for the most recent schedule updates.', NULL, NULL),
(6, '15811', 'Advanced Topics in Computer Security : Formal Foundations of Software Security', 'Understanding security requirements of software systems and being able to formally demonstrate that a piece of software is secure is key to eliminating vulnerabilities in computer systems. This course will examine formal approaches to analyzing the security properties of software and constructing secure software systems. Topics include language-based techniques, such as verification using dependent types and constructing software using safe subsets of widely used programming languages; and state space exploration-based (model checking) techniques. Students will learn how to analyze large-scale software systems and construct provably secure software. Students will read advanced research papers and work on a course project in groups of two or three.Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', 'Security', NULL),
(6, '15812', 'Programming Language Semantics', 'Please refer to http://www.cs.cmu.edu/~csd-grad/courseschedules16.html this link for the most recent schedule updates.', NULL, NULL),
(6, '15819', 'Advanced Topics in Programming Languages: : Program Analysis', 'SECTION O: http://www.cs.cmu.edu/~clegoues/courses/15-819O-16sp/DESCRIPTION: "This course provides an overview of the state of the art in program analysis as well as recent research in the area. Topics include program representations, abstract interpretation, type-based and constraint-based analysis, approaches to interprocedural analysis, counterexample-guided abstraction refinement, extended static checking, dynamic analyses (including testing and test input generation) and combinations of dynamic and static analysis. The course will mix theory and practice; students will formalize analyses and prove them correct, but also implement actual analyses for real programs, and complete a capstone course research project."Section U: http://www.cs.cmu.edu/~janh/courses/ra16DESCRIPTION:Resource usage---the amount of time, memory, and energy a programrequires for its execution---is one of the central subjects ofcomputer science. Nevertheless, resource usage often does not play acentral role in classical programming-language concepts such asoperational semantics, type systems, and program logics. This coursewill revisit these concepts to model and analyze resource usage ofprograms in a formal and compositional way. An emphasis will be onpractical, type-based techniques that automatically inform programmersabout the resource usage of their code.PREREQUISITES:15-814 Types and Programming LanguagesPlease refer to http://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', 'Research', NULL),
(6, '15824', 'Foundations of Cyber Physical Systems', 'Cyber-physical systems (CPSs) combine cyber capabilities (computation and/or communication) with physical capabilities (motion or other physical processes). Cars, aircraft, and robots are prime examples, because they move physically in space in a way that is determined by discrete computerized control algorithms. Designing these algorithms to control CPSs is challenging due to their tight coupling with physical behavior. At the same time, it is vital that these algorithms be correct, since we rely on CPSs for safety-critical tasks like keeping aircraft from colliding. In this course we will strive to answer the fundamental question posed by Jeannette Wing: "How can we provide people with cyber-physical systems they can bet their lives on?"Please refer to http://www.cs.cmu.edu/~csd-grad/courseschedules16.html this link for the most recent schedule updates.', NULL, NULL),
(6, '15826', 'Multimedia Databases and Datamining : Multimedia DataBases and Datamining', 'Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates. DESCRIPTION The course covers advanced algorithms for learning, analysis, data management and visualization of large datasets. Topics include indexing for text and DNA databases, searching medical and multimedia databases by content, fundamental signal processing methods, compression, fractals in databases, data mining, privacy and security issues, rule discovery, data visualization, graph mining, stream mining.', 'Graphs', NULL),
(6, '15827', 'Security & Cryptography : Formal Foundations of Software Security This Section Cancelled', 'Classes will not begin until after the CSD Immigration Course', 'Graphs', NULL),
(6, '15851', 'Computation and Deduction', 'Please refer to http://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.Description: We will explore the theory of programming languages using deductive systems. We will use such systems to specify, implement, and verify properties of functional and logic programming languages. The deductive approach to the specification ofprogramming languages has become standard practice, and one of the goals of this course is to provide a good working knowledge of how to engineer such language descriptions. Throughout the course we will use Twelf as a uniform meta-language in which we can express specification, implementation, and meta-theory of the object languages we are considering. Animplementation of Twelf and examples will be available on-line for experimentation. PREREQUISITES: There are no formal pre-requisites, but an exposure to functional programming and type systems might be helpful. The course is open to enterprising undergraduates by permission of the instructor.', NULL, NULL),
(6, '15859', 'Special Topic: Introduction to Theoretical Cryptography', 'Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', 'Graphs', NULL),
(6, '15869', 'Special Topics in Graphics: : Physically Based Character Animation This Section Cancelled', 'Section B:DESCRIPTION:This course will explore research topics in physically based character animation, where the goal is to obtain a character performance that appears both natural and physically plausible. In particular, we will investigate how the physical properties of a character such as range of motion, weight distribution, and level of coordination constrain and suggest plausible motions for that character. We will explore theory and advances in motion controllers, strengths and limitations of motion optimization algorithms, opportunities for fast physics algorithms for interactive applications, the nature of natural motion and aspects of motion style. In addition to computer graphics literature, we will search biomechanics, human motor control, and evolutionary biology literature for insights obtained from these fields. The course should be appropriate for graduate students with some computer graphics and / or robotics experience and for advanced undergraduates who have taken 15-462 or equivalent. Section J: DESCRIPTION: The world around us is comprised of three-dimensional geometry: from the cars we drive and the clothes we wear, to the food we eat and the organs in our bodies. To a large extent, our ability to make sense of the world is therefore limited by our capacity to design, process, and analyze geometric data. The field of discrete differential geometry (DDG) applies ideas from smooth differential geometry to computational algorithms for analyzing and manipulating real-world geometric data. This course serves as a first course on differential geometry that treats both smooth and discrete objects from a single unified point of view. Emphasis will be on both rigorous analysis and real-world implementation of numerical algorithms.Prerequisites: linear algebra, vector calculus.Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', 'Graphs', NULL),
(6, '15874', 'Special Topics: Computational Neuroscience : Machine Learning from Neural Cortical Networks', 'DESCRIPTION: In the last few years, deep learning methods based on convolutional neural networks have produced state-of-the-art performance in object and speech recognition. These neural networks have also been found to provide a reasonable approximation for the neural representations in the primate visual systems. Yet, real biological neural networks are far more intricate and complex than the current neural networks. For example, only 5% of the synapses of a neuron in the real network in the visual cortex listen to bottom-up input signals yet current neural networks are primarily concerned with feed-forward computation. What are the functions of the other 95% of the synapses of a neuron? What could be the computational roles of the recurrent connections in the real biological circuits? What other learning rules are known or implementable in the real circuits? Can we develop new computational vision models and machine learning techniques from our knowledge of the cortical neural circuits? We will study current relevant machine learning, computer vision and biological papers to explore the answers to these questions. Students of all levels, from undergraduates to Ph.D. students are welcome, though priority will be given to more senior students. The course will involve paper presentation and discussion, research term projects by students, and lecture presentation by professors. Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', 'Neural Algorithms', NULL),
(6, '15891', 'V-Unit in Computer Science', 'Please refer to http://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', 'CS', NULL),
(6, '15896', 'Truth, Justice, and Algorithms', 'Truth, Justice, and Algorithms is an interdisciplinary course that covers selected theoretical topics at the interface of computer science and economics.The course''s topics include: computational social choice, e.g., voting rules as maximum likelihood estimators, the axiomatic approach to ranking systems and crowdsourcing, manipulation of elections and ways to circumvent it; cooperative games, focusing on solution concepts such as the core and the Shapley value, and their computation; fair division algorithms for allocating divisible and indivisible goods, and approximate notions of fairness; online matching algorithms (competitive analysis, not dating) and kidney exchange; noncooperative games, including Nash equilibrium and correlated equilibrium, their computation, connections to learning theory, Stackelberg security games, and the price of anarchy in congestion and routing games; and topics in social networks such as the diffusion of technologies and influence maximization. Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules16.html this link for the most recent schedule updates. Description:', 'Game Design', NULL),
(6, '15897', 'Advanced Topics in Parallel Computing:', 'Section A: In this special topics course on parallel computing, the students will learn about the foundations of parallel computing and complete a research project. The course will cover both theory and practice. The topics covered will include basic parallel algorithms for sequences (e.g., mapping, reductions), trees (e.g., tree contraction), and graphs (graph search, connectivity, graph contraction) as well as scheduling algorithms (e.g., work stealing) for mapping parallel computation to hardware for optimal efficiency and performance. There will be one midterm, several assignments (involving programming), and one project; the project will account for 50% of the grade. ** Project Ideas ** The project can be theoretical or practical. The ideal project would be one that adds parallelism to the students'' current research. For example, if the student does research in a field such as algorithms/graphics/robotics and he or she can design/analyze/implement a parallel algorithm (possibly for an open problem); if the student does research on a field such as programming languages or databases, she or he can design/implement language/query support for parallelism; if the student does research on machine learning, he or she can develop a framework for performing approximate inference in parallel. Projects can be done individually or in groups and will lead to a small paper. We envision the students in the class to review other project papers (as in a program committee) and provide feedback to the authors.Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules16.html for the most recent schedule updates.', 'Graphs', NULL),
(6, '15990', 'Computer Science Colloquium', 'None', 'CS', NULL),
(6, '15997', 'Graduate Reading and Research', 'None', 'Research', NULL),
(6, '15998', 'Practicum in Computer Science', 'None', 'CS', NULL),
(8, 'CS1109', ' Fundamental Programming Concepts', 'Staff.', NULL, NULL),
(8, 'CS1110', ' Introduction to Computing Using Python', '', NULL, 'python'),
(8, 'CS1112', ' Introduction to Computing Using MATLAB', '', NULL, 'matlab'),
(8, 'CS1114', ' [Introduction to Computing Using MATLAB and Robotics]', '', NULL, 'matlab'),
(8, 'CS1115', ' [Introduction to Computational Science and Engineering Using Matlab Graphical User Interfaces]', '', 'Graphs', 'matlab'),
(8, 'CS1130', ' Transition to Object', 'Staff.', NULL, NULL),
(8, 'CS1132', ' Transition to MATLAB', 'Staff.', NULL, 'matlab'),
(8, 'CS1133', ' Transition to Python', ' ', NULL, 'python'),
(8, 'CS1142', ' Introduction to MATLAB', 'Staff.', NULL, 'matlab'),
(8, 'CS1300', ' Introductory Design and Programming for the Web', 'For description, see . ', NULL, NULL),
(8, 'CS1610', ' [Computing in the Arts]', 'Staff.', NULL, NULL),
(8, 'CS1620', ' Visual Imaging in the Electronic Age', 'For description, see . ', NULL, NULL),
(8, 'CS1710', ' Introduction to Cognitive Science', '', NULL, NULL),
(8, 'CS1810', ' Topics in the Analysis and Transmission of Knowledge and Information', 'The distinction between knowledge and information lies within the realm of philosophy, yet in the current highly networked computer mediated world, noisy data and noisy communication is ubiquitous. This course explores the issues relating to transmission of content and extraction of information in the three contexts of human-human, human-computer, and computer-computer. We also explore how the very nature of the problem changes as we move from one-to-one communication to many-to-many environments. ', NULL, NULL),
(8, 'CS1830', ' Voting: Does Democracy Have a Voice?', 'For description, see . ', NULL, NULL),
(8, 'CS2024', ' C++ Programming', 'Staff.', NULL, 'c'),
(8, 'CS2043', ' UNIX Tools and Scripting', 'Staff.', NULL, NULL),
(8, 'CS2048', ' Introduction to iPhone and Apple Watch Development', 'T. Novikoff.', NULL, NULL),
(8, 'CS2049', ' Intermediate iPhone Development', 'Staff.', NULL, NULL),
(8, 'CS2110', ' Object', 'Staff.', NULL, NULL),
(8, 'CS2111', ' Programming Practicum', 'Staff.', NULL, NULL),
(8, 'CS2112', ' Object', 'Staff.', NULL, NULL),
(8, 'CS2300', ' Intermediate Design and Programming for the Web', 'Staff.', NULL, NULL),
(8, 'CS2770', ' Excursions in Computational Sustainability', 'C. Gomes, J. Conrad, B. Selman.', NULL, NULL),
(8, 'CS2800', ' Discrete Structures', 'Staff.', NULL, NULL),
(8, 'CS2850', ' Networks', 'Staff.', NULL, NULL),
(8, 'CS3110', ' Data Structures and Functional Programming', 'Staff.', NULL, NULL),
(8, 'CS3152', ' Introduction to Computer Game Architecture', 'Staff.', 'Game Design', NULL),
(8, 'CS3300', ' Data', '', NULL, NULL),
(8, 'CS3410', ' Computer System Organization and Programming', '', NULL, NULL),
(8, 'CS3420', ' Embedded Systems', 'J. Martinez.', 'Embedded Systems', NULL),
(8, 'CS3758', ' [Autonomous Mobile Robots]', 'H. Kress-Gazit.', NULL, NULL),
(8, 'CS4090', ' Teaching Experience in Computer Science', 'Staff.', 'CS', NULL),
(8, 'CS4110', ' [Programming Languages and Logics]', 'Staff.', NULL, NULL),
(8, 'CS4120', ' Introduction to Compilers', 'Staff.', NULL, NULL),
(8, 'CS4121', ' Practicum in Compilers', 'Staff.', NULL, NULL),
(8, 'CS4152', ' Advanced Topics in Computer Game Architecture', 'Staff.', 'Game Design', NULL),
(8, 'CS4154', ' Analytics', 'Staff.', NULL, NULL),
(8, 'CS4210', ' Numerical Analysis and Differential Equations', 'Staff.', NULL, NULL),
(8, 'CS4220', ' Numerical Analysis: Linear and Nonlinear Problems', 'Staff.', NULL, NULL),
(8, 'CS4300', ' Language and Information', 'C. Danescu-Niculescu-Mizil.', NULL, NULL),
(8, 'CS4320', ' Introduction to Database Systems', 'Staff.', 'Databases', NULL),
(8, 'CS4321', ' Practicum in Database Systems', 'Staff.', 'Databases', NULL),
(8, 'CS4410', ' Operating Systems', 'Staff.', 'Operating Systems', NULL),
(8, 'CS4411', ' Practicum in Operating Systems', 'Staff.', 'Operating Systems', NULL),
(8, 'CS4420', ' Computer Architecture', 'C. Batten.', 'Computer Architecture', NULL),
(8, 'CS4620', ' Introduction to Computer Graphics', 'Staff.', 'Graphs', NULL),
(8, 'CS4621', ' Computer Graphics Practicum', 'Staff.', 'Graphs', NULL),
(8, 'CS4654', ' Virtual Reality Design', 'D. Greenburg.', NULL, NULL),
(8, 'CS4670', ' Introduction to Computer Vision', 'Staff.', NULL, NULL),
(8, 'CS4700', ' Foundations of Artificial Intelligence', 'Staff.', 'Artificial Intelligence', NULL),
(8, 'CS4701', ' Practicum in Artificial Intelligence', 'Staff.', 'Artificial Intelligence', NULL),
(8, 'CS4740', ' Natural Language Processing', 'Staff.', 'Natural Language Processing', NULL),
(8, 'CS4744', ' Computational Linguistics', 'For description, see . ', NULL, NULL),
(8, 'CS4752', ' Robotic Manipulation', 'R. Knepper.', NULL, NULL),
(8, 'CS4754', ' Human Robot Interaction ', 'M. Jung.', NULL, NULL),
(8, 'CS4758', ' [Robot Learning]', 'Staff.', NULL, NULL),
(8, 'CS4775', ' Computational Genetics and Genomics', 'A. Williams.', NULL, NULL),
(8, 'CS4780', ' Machine Learning for Intelligent Systems', 'Staff.', 'Machine Learning', NULL),
(8, 'CS4786', ' Machine Learning for Data Science', 'Staff.', 'Machine Learning', NULL),
(8, 'CS4810', ' [Introduction to Theory of Computing]', 'Staff.', NULL, NULL),
(8, 'CS4812', ' [Quantum Information Processing]', 'P. Ginsparg.', NULL, NULL),
(8, 'CS4814', ' Introduction to Computational Complexity', 'D. Steurer.', NULL, NULL),
(8, 'CS4820', ' Introduction to Analysis of Algorithms', 'Staff.', NULL, NULL),
(8, 'CS4830', ' Introduction to Cryptography', 'Staff.', 'Graphs', NULL),
(8, 'CS4840', ' [Algorithms for Markets]', 'Staff.', NULL, NULL),
(8, 'CS4850', ' Mathematical Foundations for the Information Age', 'Staff.', NULL, NULL),
(8, 'CS4852', ' Networks II', 'A. Ghosh.', NULL, NULL),
(8, 'CS4860', ' Applied Logic', '', NULL, NULL),
(8, 'CS4999', ' Independent Reading and Research', 'Independent reading and research for undergraduates. ', 'Research', NULL),
(8, 'CS5091', ' Conversations in the Studio', 'G. Pass.', NULL, NULL),
(8, 'CS5092', ' Startup Ideas', 'G. Pass.', NULL, NULL),
(8, 'CS5093', ' Product Management', 'G. Pass.', NULL, NULL),
(8, 'CS5110', ' [Programming Languages and Logics]', 'Staff.', NULL, NULL),
(8, 'CS5114', ' [Network Programming Languages]', 'Staff.', NULL, NULL),
(8, 'CS5120', ' Introduction to Compilers', 'Staff.', NULL, NULL),
(8, 'CS5121', ' Practicum in Compilers', 'Staff.', NULL, NULL),
(8, 'CS5150', ' Software Engineering', 'Staff.', NULL, NULL),
(8, 'CS5152', ' Open', 'Students will collaborate with mentors from industry to learn how to become a part of the open-source community and contribute to open-source projects, with students actively committing to open-source projects throughout the semester. Lectures, in addition to discussing open-source processes and tools, will teach students how to be proactive members of larger systems, such as teams, projects, companies, and society at large, by delving into topics from psychology, sociology, business, economics, gender studies, ethnic studies, writing, speaking, and ethics. ', NULL, NULL),
(8, 'CS5191', ' Studio', 'G. Pass, R. Manohar.', NULL, NULL),
(8, 'CS5220', ' Applications of Parallel Computers', 'Staff.', 'Embedded Systems', NULL),
(8, 'CS5223', ' [Numerical Analysis: Linear and Nonlinear Problems]', 'Staff.', NULL, NULL),
(8, 'CS5300', ' The Architecture of Large ', 'A. Demers.', NULL, NULL),
(8, 'CS5304', ' Data Science in the Wild', 'Y. Kanza.', NULL, NULL),
(8, 'CS5306', ' Crowdsourcing and Human Computation', 'H. Hirsh', NULL, NULL),
(8, 'CS5320', ' Introduction to Database Systems', 'Staff.', 'Databases', NULL),
(8, 'CS5321', ' Practicum in Database Systems', 'Staff.', 'Databases', NULL),
(8, 'CS5356', ' Startup Systems Design and Engineering', 'S. Belongie.', NULL, NULL),
(8, 'CS5412', ' Cloud Computing', 'Staff.', NULL, NULL),
(8, 'CS5413', ' [High Performance Systems and Networking]', 'Staff.', 'Networking', NULL),
(8, 'CS5414', ' [Distributed Computing Principles]', 'Staff.', 'Distributed Applications', NULL),
(8, 'CS5420', ' Advanced Computer Architecture', 'J. Martinez.', 'Computer Architecture', NULL),
(8, 'CS5422', ' [Physical Computing]', 'Staff.', NULL, NULL),
(8, 'CS5430', ' System Security', 'Staff.', 'Security', NULL),
(8, 'CS5434', ' Defending Computer Networks', 'S. Staniford.', NULL, NULL),
(8, 'CS5435', ' Security and Privacy Concepts in the Wild', 'A. Juels.', 'Security', NULL),
(8, 'CS5436', ' Privacy in the Digital Age', 'V. Shmatikov.', NULL, NULL),
(8, 'CS5438', ' Security and Privacy: Practice and Case Studies', 'Staff.', 'Security', NULL),
(8, 'CS5450', ' [Computer Networking]', 'Staff.', 'Networking', NULL),
(8, 'CS5454', ' Mobile and Ubiquitous Systems', 'D. Estrin.', NULL, NULL),
(8, 'CS5460', ' Parallel and Distributed Computing', 'Staff.', 'Distributed Applications', NULL),
(8, 'CS5540', ' [Computational Techniques for Analyzing Clinical Data]', 'Staff.', NULL, NULL),
(8, 'CS5555', ' Health Tech, Data, and Systems', 'D. Estrin.', NULL, NULL),
(8, 'CS5620', ' Introduction to Computer Graphics', 'Staff.', 'Graphs', NULL),
(8, 'CS5621', ' Computer Graphics Practicum', 'Staff.', 'Graphs', NULL),
(8, 'CS5625', ' Interactive Computer Graphics', 'Staff.', 'Graphs', NULL),
(8, 'CS5643', ' [Physically Based Animation for Computer Graphics]', 'Staff.', 'Graphs', NULL),
(8, 'CS5660', ' [Signal Processing]', 'Staff.', NULL, NULL),
(8, 'CS5670', ' Introduction to Computer Vision', 'Staff.', NULL, NULL),
(8, 'CS5682', ' User Interface Design, Prototyping, & Evaluation', 'Staff.', NULL, NULL),
(8, 'CS5722', ' Heuristic Methods for Optimization', 'Staff.', 'Optimization', NULL),
(8, 'CS5724', ' Evolutionary Computation', 'Staff.', NULL, NULL),
(8, 'CS5740', ' Natural Language Processing', 'Staff.', 'Natural Language Processing', NULL),
(8, 'CS5752', ' Robotic Manipulation', 'Staff.', NULL, NULL),
(8, 'CS5761', ' [Hybrid Systems]', 'Staff.', NULL, NULL),
(8, 'CS5780', ' Machine Learning for Intelligent Systems', 'Staff.', 'Machine Learning', NULL),
(8, 'CS5785', ' Applied Machine Learning', 'Staff.', 'Machine Learning', NULL),
(8, 'CS5786', ' Machine Learning for Data Science', 'Staff.', 'Machine Learning', NULL),
(8, 'CS5830', ' Cryptography', 'Staff.', 'Graphs', NULL),
(8, 'CS5831', ' Security Protocols and Privacy', 'R. Pass.', 'Security', NULL),
(8, 'CS5840', ' [Algorithms for Markets]', 'Staff.', NULL, NULL),
(8, 'CS5846', ' [Decision Theory I]', 'For description, see . ', NULL, NULL),
(8, 'CS5860', ' [Introduction to Formal Methods]', 'Staff.', NULL, NULL),
(8, 'CS5998', ' Master of Engineering Internship', 'Staff.', NULL, NULL),
(8, 'CS5999', ' Master of Engineering Project', 'Staff.', NULL, NULL),
(8, 'CS6110', ' Advanced Programming Languages', 'Staff.', NULL, NULL),
(8, 'CS6112', ' [Foundations of Concurrency]', 'Staff.', NULL, NULL),
(8, 'CS6113', ' [Language', 'Staff.', NULL, NULL),
(8, 'CS6114', ' [Network Programming Languages]', 'Staff.', NULL, NULL),
(8, 'CS6115', ' [Certified Software Systems]', 'Staff.', NULL, NULL),
(8, 'CS6116', ' [Programming Languages and Logics Laboratory]', 'Staff.', NULL, NULL),
(8, 'CS6117', ' [Category Theory for Computer Scientists]', 'Staff.', NULL, NULL),
(8, 'CS6118', ' [Types and Semantics]', 'R. Tate.', NULL, NULL),
(8, 'CS6210', ' Matrix Computations', 'Staff.', NULL, NULL),
(8, 'CS6220', ' [Data', 'Staff.', NULL, NULL),
(8, 'CS6320', ' [Advanced Database Systems]', 'Staff.', 'Databases', NULL),
(8, 'CS6360', ' Educational Technology', 'Staff.', NULL, NULL),
(8, 'CS6410', ' Advanced Systems', 'Staff.', NULL, NULL),
(8, 'CS6431', ' Security and Privacy Technologies', 'Staff.', 'Security', NULL),
(8, 'CS6452', ' [Datacenter Networks and Services]', 'Staff.', NULL, NULL),
(8, 'CS6460', ' [Peer', 'Staff.', NULL, NULL),
(8, 'CS6620', ' [Advanced Interactive Graphics]', 'Staff.', 'Graphs', NULL),
(8, 'CS6630', ' Realistic Image Synthesis', 'Staff.', NULL, NULL),
(8, 'CS6640', ' [Computational Photography]', 'Staff.', 'Graphs', NULL),
(8, 'CS6644', ' [Modeling the World]', 'Staff.', NULL, NULL),
(8, 'CS6650', ' [Computational Motion]', 'Staff.', NULL, NULL),
(8, 'CS6670', ' Computer Vision', 'Staff.', NULL, NULL),
(8, 'CS6700', ' Advanced Artificial Intelligence', 'Staff.', 'Artificial Intelligence', NULL),
(8, 'CS6702', ' [Topics in Computational Sustainability]', 'Staff.', NULL, NULL),
(8, 'CS6740', ' Advanced Language Technologies', 'C. Cardie.', NULL, NULL),
(8, 'CS6741', ' Structured Prediction for Natural Language Processing', 'Y. Artzi.', 'Natural Language Processing', NULL),
(8, 'CS6742', ' Natural Language Processing and Social Interaction', 'Staff.', 'Natural Language Processing', NULL),
(8, 'CS6746', ' [Language Processing for Computational Social Science]', 'C. Danescu-Niculescu-Mizil.', NULL, NULL),
(8, 'CS6751', ' Introduction to Robotic Mobile Manipulation', 'Staff.', NULL, NULL),
(8, 'CS6756', ' [Advanced Topics in Robot Learning: 3D Perception]', 'This course focuses on learning techniques for 3D perception for robots with inexpensive RGBD cameras such as Kinect that give 3D data in addition to an image. We will study machine-learning algorithms (such as graphical models and sampling based methods) for perceiving the environment, which includes performing object detection, semantic labeling of the environment and human activity recognition. Particular robotic applications include navigation, manipulation, human-robot interaction and assistive robotics. Undergraduates and masters students need permission of the instructor to take this course. ', 'Graphs', NULL),
(8, 'CS6758', ' [Robot Learning]', 'Staff.', NULL, NULL),
(8, 'CS6764', ' Reasoning about Knowledge', 'Staff.', NULL, NULL),
(8, 'CS6766', ' Reasoning about Uncertainty', 'Staff.', NULL, NULL),
(8, 'CS6780', ' Advanced Machine Learning', 'Staff.', 'Machine Learning', NULL),
(8, 'CS6782', ' [Probabilistic Graphical Models]', 'Staff.', 'Graphs', NULL),
(8, 'CS6783', ' Machine Learning Theory', 'Staff.', 'Machine Learning', NULL),
(8, 'CS6784', ' [Advanced Topics in Machine Learning]', 'Staff.', 'Machine Learning', NULL),
(8, 'CS6788', ' [Advanced Topic Modeling]', 'D. Mimno.', NULL, NULL),
(8, 'CS6810', ' Theory of Computing', 'Staff.', NULL, NULL),
(8, 'CS6820', ' Analysis of Algorithms', 'Staff.', NULL, NULL),
(8, 'CS6822', ' [Advanced Topics in Theory of Computing]', 'Staff.', NULL, NULL),
(8, 'CS6825', ' The Science Base for the Information Age', 'Covers the evolving science base that supports the flow of ideas in scientific literature, the evolution of social groups in networks, and the extraction of information from the World Wide Web and other unstructured and noisy datasets. ', 'Networking', NULL),
(8, 'CS6830', ' Cryptography', 'Staff.', 'Graphs', NULL),
(8, 'CS6840', ' [Algorithmic Game Theory]', 'Staff.', 'Game Design', NULL),
(8, 'CS6850', ' The Structure of Information Networks', 'J. Kleinberg.', NULL, NULL),
(8, 'CS6860', ' Logics of Programs', 'Staff.', NULL, NULL),
(8, 'CS6862', ' [Automated Reasoning and Formal Methods]', 'Staff.', NULL, NULL),
(8, 'CS7090', ' Computer Science Colloquium', 'Staff.', 'CS', NULL),
(8, 'CS7190', ' Seminar in Programming Languages', 'Staff.', NULL, NULL),
(8, 'CS7192', ' Seminar in Programming Refinement Logics', 'Staff.', NULL, NULL),
(8, 'CS7290', ' Seminar on Scientific Computing and Numerics', 'Talks on various methods in scientific computing, the analysis of their convergence properties and computational efficiency, and their adaptation to specific applications. ', NULL, NULL),
(8, 'CS7390', ' Database Seminar', 'Staff.', 'Databases', NULL);
INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(8, 'CS7412', ' [Scalable Distributed Consistency: Models and Applications]', 'The emergence of massive cloud computing systems and large enterprise computing solutions provides a serious challenge: the most popular ways of scaling a system abandon consistency guarantees. Yet many applications (e.g. medical, financial) make sense only if we can prove that they do exactly what they should do. Students in this research-oriented course read papers on consistency mechanisms with a goal of understanding what forms of consistency matter and what options make sense in largescale systems. Students present papers, must participate in discussions, and submit weekly written summaries of the papers and their key findings. ', 'Embedded Systems', NULL),
(8, 'CS7490', ' Systems Research Seminar', 'Staff.', 'Research', NULL),
(8, 'CS7493', ' Computer Security Seminar', 'A. Myers.', 'Security', NULL),
(8, 'CS7594', ' Seminar on Computational Issues in Health and Medicine', 'An overview of computational issues that arise in the clinical practice of medicine. Topics include the role of IT in clinical practice; medical imaging problems in CT and MR; data mining; clinical decision support; workflow optimization; electronic medical records and health care IT standards. Lectures are given primarily by attending physicians from the Department of Radiology at Weill Cornell Medical College. Open to students at all levels. ', 'Optimization', NULL),
(8, 'CS7670', ' Special Topics in Computer Vision', 'Informal weekly seminar in which current topics in computer vision are discussed. ', NULL, NULL),
(8, 'CS7690', ' Computer Graphics Seminar', 'The Graphics/Vision Research Seminar discusses recent research in the areas of computer graphics and computer vision. The goal is to foster technical discussions and collaboration among the Cornell graphics and vision research community. ', 'Graphs', NULL),
(8, 'CS7790', ' Seminar in Artificial Intelligence', 'Staff.', 'Artificial Intelligence', NULL),
(8, 'CS7794', ' Seminar in Natural Language Understanding', 'Informal weekly seminar in which current topics in natural language understanding and computational linguistics are discussed. Intended for students and faculty actively involved in NLP or CL research. ', 'Natural Language Processing', NULL),
(8, 'CS7890', ' Seminar in Theory of Algorithms and Computing', 'Staff.', NULL, NULL),
(8, 'CS7893', ' [Cryptography Seminar]', 'Seminar for discussing recent or classical papers in cryptography. ', 'Graphs', NULL),
(8, 'CS7999', ' Independent Research', 'Staff.', 'Research', NULL),
(8, 'CS9999', ' Thesis Research', 'Staff.', 'Research', NULL),
(9, 'CS 101', 'Introduction to Higher Education for Computer Science Majors', ' Exploration of skills and resources that will help students to obtain a baccalaureate degree in the Department of computer Science. This course must be taken once during the first two quarters at Cal State L.A.. Graded CR/NC. NIS Account Required.', 'CS', NULL),
(9, 'CS 120', 'Introduction to Website Development', 'Prerequisite: Computer Literacy. Development of client-side web pages using hypertext markup language ([d][x]html), Cascading Style Sheets (CSS). Javascript, and computer animation software. Lecture 2 hours, laboratory 3 hours. Graded ABC/NC.', NULL, NULL),
(9, 'CS 122', 'Using Relational Databases and SQL', 'Prerequisite: Computer literacy. An introduction to relational databases and the SQL query language. Database modeling as collection of objects and their relationships; Entity relationship model. SQL as a query language. Grouping and other advanced queries. Lecture 2 hours, laboratory 3 hours. Graded ABC/ NC.', 'Databases', NULL),
(9, 'CS 160', 'Introduction to Computers', 'Prerequisite: GE mathematics requirement. History of computers; hardware, software including data base systems, word processors, spreadsheets, programming languages; social and ethical implications. Lecture 2 hours, laboratory 3 hours. Offered CR/NC only.', NULL, NULL),
(9, 'CS 190', 'BASIC Programming', 'Prerequisite: One year of high school algebra. Introduction to computer programming using BASIC language. Applications will assume a minimal mathematics background. Does not fulfill mathematics major requirement. Lecture 1 hour, laboratory 3 hours.', NULL, NULL),
(9, 'CS 201', 'Introduction to Programming', 'Prerequisite: MATH 104B or consent of the instructor. Algorithm development for structured programming; designing, coding, debugging, and documenting programs. Laboratory activities on problem analysis and software development. Lecture 4 hours, laboratory 3 hours. Graded ABC/ NC', NULL, NULL),
(9, 'CS 202', 'Introduction to Object Oriented Programming', 'Prerequisite: CS 201, recommended: MATH 206. Algorithm development for Object Oriented Programming; designing, coding, and documenting programs. Laboratory activities on problem analysis and software development. Lecture 4 hours, laboratory 3 hours. Graded ABC/NC', 'Object Oriented Programming', NULL),
(9, 'CS 203', 'Programming with Data Structures', 'Prerequisite: CS 202, recommended: MATH 207, MATH 248. Advanced programming techniques; elementary data structures such as dynamic arrays, linked lists, stacks, queues, and trees, sorting and searching algorithms. Laboratory activities on problem analysis and software development. (Lecture 4 hours, laboratory 3 hours) Graded ABC/ NC', NULL, NULL),
(9, 'CS 242', 'C Programming', 'Prerequisites: MATH 104B or consent of the instructor. Introduction to program design and problem solving using the C programming language. Programming topics include control structures, functions, arrays, pointers, and file I/O.', NULL, NULL),
(9, 'CS 245', 'Introduction to Computer Organization, Operating Systems and Networks', 'Prerequisite: CS 202. Essential information about computer organization, operating systems and computer networks for programmers. Topics include: computer organization, data representation, the Windows/UNIX/LINUX operating system; and computer networks. Lecture 2 hours, laboratory 3 hours. Graded ABC/NC', 'Networking', NULL),
(9, 'CS 290', 'Introduction to FORTRAN Programming', 'Prerequisite: MATH 206. Elementary computer programming using FORTRAN language. Lecture 1 hour, laboratory 3 hours. No credit toward Computer Science major.', 'CS', NULL),
(9, 'CS 301', 'Computer Ethics and the Societal Impact of Computing', 'Prerequisite: CS 203. Professional and ethical responsibilities of computer scientists, including: intellectual property, piracy, hacking, viruses, liability, privacy, and computer crime. Societal impact of computing, including: social networks, patents, 3D printing,  and economic transformations. Graded ABC/ NC.', 'Networking', NULL),
(9, 'CS 312', 'Data Structures and Algorithms', 'Prerequisites: CS 203, MATH 208, MATH 248. Methods for the design and analysis of correct and efficient computer algorithms and advanced data structures. Applications to classical problems of searching, sorting, graph optimization and combinatorial optimization.', 'Graphs', NULL),
(9, 'CS 320', 'Web and Internet Programming', 'Prerequisites: CS120, CS 122, CS 203. Server-side internet programming. Development of full-fledged Internet enterprise services and applications. Laboratory activities on application development (Lecture 2 hours, laboratory 3 hours).', NULL, NULL),
(9, 'CS 332C', 'Object-Oriented Programming with C++.', 'Prerequisite: CS 203. Breadth and depth of C++ programming concepts; control statements, functions, pointers, classes, application development using the object-oriented paradigm. Advanced topics such as I/0, templates, exception handling, Standard Template Library (STL).', NULL, 'c'),
(9, 'CS 332F', 'Functional Programming', 'Prerequisite: CS 203. Programming in functional nonprocedural programming language such as Haskell. Programming in a language (a) in which functions are values, (b) without assignments, (c) with very strong typing, (d) with lazy evaluation, and with other features common to the functional programming paradigm.', NULL, NULL),
(9, 'CS 332L', 'Logic Programming', 'Prerequisite: CS 203. Programming in a non-procedural logic programming language such as Prolog. Programming in a language that supports unification and backtracking and in which the execution of a program is the search for values that satisfy a declarative specification.', NULL, NULL),
(9, 'CS 337', 'Software Design', 'Prerequisite: CS 203. Methodologies and tools for requirements analysis and design of large complex software system; process models, project planning, quality assurance; Ethical issues in software design; group laboratory project; oral and written presentations. Lecture 2 hours, laboratory 3 hours.', NULL, NULL),
(9, 'CS 340', 'Assembly Language and Systems Programming', 'Prerequisite: CS 245. Assembly language; addressing techniques; subroutines; macros; system input/output; interrupts and traps; assemblers; linkers; loaders; macroprocessors.', NULL, NULL),
(9, 'CS 342', 'Object Oriented Programming Using C++', 'Prerequisite: CS 242. Concepts and techniques of object-oriented programming; structured design and modular construction; use of C to demonstrate structured programming; use of C++ to demonstrate fundamentals of object-oriented programming.', 'Object Oriented Programming', 'c'),
(9, 'CS 345', 'UNIX and Shell Programming', 'Prerequisites: CS 203. A theoretical and practical study of the UNIX operating system and shell programming. Topics: Shell commands and utilities, UNIX file system, UNIX shells, UNIX \\ graphical user interfaces, and shell programming.', 'Graphs', NULL),
(9, 'CS 370', 'Parallel and Distributed Programming', 'Prerequisites: CS 203, CS 245. Parallel programming techniques; abstract models of hardware and operating systems to support parallel programs.', 'Distributed Applications', NULL),
(9, 'CS 386', 'Introduction to Automata Theory', 'Prerequisites: CS 202 and MATH 248. Formal approach to automata theory; finite state machines, regular expressions, regular languages. Develops mathematical foundation for computer science.', 'CS', NULL),
(9, 'CS 398', 'Cooperative Education', 'Prerequisites: Courses appropriate to the work experience: approval by major department Computer Science coordinator. Integration of work experience with academic program, individually planned through coordinator. Minimum of 10 hours per week required for each unit. May be repeated to maximum of 12 units.', 'Object Oriented Programming', NULL),
(9, 'CS 422', 'Principles of Data Base Systems', 'Prerequisites: CS 122, and 312. Normal forms, database system architecture, query optimization, file structures, transaction management, data warehouses, object-oriented databases, databases for e-commerce.', 'Optimization', NULL),
(9, 'CS 437', 'Software Engineering', 'Prerequisites: CS 312, CS 320, CS 337 and completion of the GWAR. Methodologies and tools for the development, implementation, integration, testing, evaluation, and maintenance of software systems. Software quality assurance; ethical issues in software development. Group laboratory project and oral and written presentations. This course satisfies the upper division writing requirement. Lecture 4 hours, laboratory 3 hours.', NULL, NULL),
(9, 'CS 440', 'Introduction to Operating Systems', 'Prerequisites: CS 245, 312. Resource, memory and process management; concurrent processing; networking and distributed systems.', 'Networking', NULL),
(9, 'CS 447', 'Computer Networks Configuration and Management', 'Prerequisite: CS 440. Network topology, architecture, and related software. Topics covered include designing a LAN and an internetwork, developing access lists, configuring routing protocols, customize switch configurations and manage device configurations.', NULL, NULL),
(9, 'CS 450', 'Foundations of Computer Graphics', 'Prerequisites: CS 203, MATH 208, AND MATH 255. Programming in object oriented graphics environment implementing primitive operations in two and three dimensions. Image modeling using affine transformations, polygonal meshes and other topics. Lecture 4 hours, laboratory 3 hours.', 'Graphs', NULL),
(9, 'CS 451', 'Multimedia Software Systems', 'Perquisite: CS312 or CS 342. Introduction to multimedia information and processing. Topics: basic signal processing, color, space, formations of image, video, and audio data. Current standards and the state-of-the-art techniques for multimedia systems. Lecture 4 hours.', NULL, NULL),
(9, 'CS 454', 'Topics in Advanced Computer Science', 'Prerequisites: As needed for specific topic. Current topics of special interest to students in computer science, as announced in Schedule of Classes. May be repeated to a maximum of 20 units of credit as topic changes.', 'CS', NULL),
(9, 'CS 460', 'Artificial Intelligence', 'Prerequisite: CS 312. Knowledge representation; problem solving strategies and search algorithms; applications from such areas as theorem proving, expert systems, natural language processing, robotics, and pattern recognition.', 'Artificial Intelligence', NULL),
(9, 'CS 461', 'Machine Learning', 'Prerequisite: CS 312. Means that enable computers to perform tasks for which they were not explicitly programmed; learning paradigms include inductive generalization for examples, genetic algorithms, and connectionist systems such as neural nets.', 'Machine Learning', NULL),
(9, 'CS 470', 'Computer Networking Protocols', 'Prerequisite: CS 245, 312. Study of computer network layered architecture and protocols. Topics to be covered include: network architecture, data link layer, addressing, LAN, network layer, transport layer and network applications.', 'Networking', NULL),
(9, 'CS 480', 'Cryptography and Information Security', 'Prerequisites: CS 245 and CS 312. This course covers both principles and practice of cryptography and information security. Topics covered include basic concepts of cryptology, classical ciphers, modern symmetric ciphers (DES, IDEA, RC5), Advanced Encryption Standard (AES), public key cryptography, data integrity and digital signature schemes.', 'Graphs', NULL),
(9, 'CS 486', 'Computability and Intractability', 'Prerequisite: CS 386. Theory of Computing; nondeterminisms, decidability and unsolvable problems; NP completeness and intractable computations.', NULL, NULL),
(9, 'CS 488', 'Compilers', 'Prerequisites: CS 312, 332, 386. Compiler construction; lexical analysis, including regular languages and finite-state acceptors; syntactic analysis, including parsing techniques and grammars; code generation and optimization.', 'Optimization', NULL),
(9, 'CS 490', 'Computer Science Recapitulation', 'Prerequisite/corequisites: MATH 270, CS 386, 437, 440, EE 444. A recapitulation of the primary concepts of Computer Science in preparation for the Major Field Achievement Test.', 'CS', NULL),
(9, 'CS 491A', 'Software Design Laboratory', 'Prerequisites: CS 312, 320, 337, 386, and senior standing. Approaches to software design, including Design Patterns and other strategies for designing software systems. Each student will propose a substantial, individual software project, resulting in a preliminary report and project presentation. Laboratory 9 hours. Graded ABC/NC', NULL, NULL),
(9, 'CS 491B', 'Software Design Laboratory', 'Prerequisite: CS 491A. Software design, including Design Patterns and other strategies for designing software systems. Each student will complete the project initiated in CS 491A resulting in a formal report and project presentation. Laboratory 9 hours. Graded ABC/NC', NULL, NULL),
(9, 'CS 496A', 'Software Design Laboratory', 'Prerequisites: CS 312, 320, 337, 386, and senior standing. Approaches to software design, including Design Patterns and other  strategies for designing software systems. Students working individually  or as a group will propose a substantial software project, resulting in  a preliminary report and project presentation. Laboratory 6 hours.  Graded ABC/NC', NULL, NULL),
(9, 'CS 496B', 'Software Design Laboratory', 'Prerequisite: CS 496A.  Software design, including Design Patterns and other strategies for  designing software systems. Students will make further progress on the  project initiated in CS 496A resulting in an intermediate report and  project presentation. Laboratory 6 hours. Graded ABC/NC', NULL, NULL),
(9, 'CS 496C', 'Software Design Laboratory', 'Prerequisite: CS 496B.  Software design, including Design Patterns and other strategies for  designing software systems. Students will complete the project initiated  in CS 496AB resulting in a final formal report and project  presentation. Laboratory 6 hours. Graded ABC/NC', NULL, NULL),
(9, 'CS 499', 'Undergraduate Directed Study', 'Prerequisite: Consent of an instructor to act as sponsor. Project selected in conference with sponsor before registration; progress meetings held regularly, and a final report submitted. May be repeated for credit.', NULL, NULL),
(9, 'CS 512', 'Design and Analysis of Algorithms', 'Prerequisite: CS 312. Design of complex algorithms. Algorithms for solving frequently occurring problems in computer applications. Computationally intractable problems, heuristics and partial solutions. Optimization techniques. Analysis of algorithms for specific problems of interest.', 'Optimization', NULL),
(9, 'CS 520', 'Web Programming', 'Prerequisite: CS 320. Current issues in web programming. Topics include: semantic networks; architectures for web-based applications; dynamic and evolutionary system deployment.', 'Networking', NULL),
(9, 'CS 522', 'Advanced Database Systems', 'Prerequisites: CS 422, CS 491AB. Current topics in database systems: distributed databases, transactions, and concurrency control; nested and long-running transactions; semantic and object-oriented data models; engineering design databases; temporal, multi-media, and real-time databases.', 'Databases', NULL),
(9, 'CS 537', 'Advanced Software Engineering', 'Prerequisites: CS 437, CS 491AB. Managing software development projects; the capability maturity models and personal performance processes; software cost estimation; risk management; extreme programming. Engineering systems for survivability. Estimating system performance.', NULL, NULL),
(9, 'CS 540', 'Advanced Topics in Operating Systems', 'Prerequisite: CS 440. Asynchronous concurrent processes; mutual exclusion and deadlocks; virtual storage organization and management; multiprocessing; auxiliary storage management; distributed operating systems; performance measurement; operating systems security.', 'Security', NULL),
(9, 'CS 550', 'Advanced Computer Graphics', 'Prerequisites: CS 312, 450. An advanced course in computer graphics with emphasis on rendering, Polygonal meshes, Bezier curves and surfaces, line and back face removal, shading, lighting, and texture algorithms.', 'Graphs', NULL),
(9, 'CS 560', 'Advanced Topics in Artificial Intelligence', 'Prerequisite: CS 460. Examination of a sub field within artificial intelligence such as natural language processing, expert systems, robotics, data mining, computer vision, speech recognition, intelligent agents or others.', 'Distributed Applications', NULL),
(9, 'CS 565', 'Reliable Computing', 'Prerequisites: CS 312 and CS 386. Errors, faults, and failures. Software and system safety. Reliability metrics: mean time between failures. Techniques for fault tolerance: redundancy and robustness. Fault detection, isolation, correction, and recovery.', NULL, NULL),
(9, 'CS 570', 'Networks and Distributed Processing', 'Prerequisites: CS 470. Study of computer network architecture and protocols. Routing, congestion and flow control. Distributed algorithms, client-server models, remote procedure calls, load balancing, and security. Interprocess communication and protocols. Distributed transaction processing.', 'Distributed Applications', NULL),
(9, 'CS 575', 'Human Issues in Computing', 'Prerequisites: CS 386, CS 491AB. Methods and techniques for maximizing the usability of computer systems and practices User centered design, designing for diverse users, physiological, psychological, and sociological issues. Human factors in software development.', NULL, NULL),
(9, 'CS 580', 'Advanced Information Security', 'Prerequisite: CS480. Advanced course on information security. Topics covered include access control, security model, security policy, digital signatures, digital cash, Secure Electronic Transaction (SET), public key infrastructure, secure election protocols.', 'Security', NULL),
(9, 'CS 581', 'Computer and Network Security', 'Prerequisite: CS 447 or CS 470. This course exposes students to various techniques related to defending your computers and networks. Topics covered include Denial-Of- Service attacks, packet analyzers, host-based intrusion detection and honeypots etc.', 'Networking', NULL),
(9, 'CS 586', 'Theory of Computing', 'Prerequisite: CS 486. Mathematical models of computation. Recursive function theory and primitive recursion. Computability and logic. Church’s Thesis, Wegner’s interaction machines, and quantum computation.', NULL, NULL),
(9, 'CS 588', 'Languages and Translators', 'Prerequisite: CS 488. Advanced programming language and translator concepts. Language runtime systems such as the Java virtual machine. Term rewriting systems and XSL, Programming language semantics.', NULL, NULL),
(9, 'CS 590', 'Advanced Software Architecture', 'Prerequisite: CS 491AB. Design and development of large-scale, typically distributed, often multi-language, software systems. Integration of existing (legacy) systems. Multiple architectural views and their representation and documentation. Integrative and connective platforms,standards, and technologies.', NULL, NULL),
(9, 'CS 594', 'Graduate Seminar', 'Prerequisite: instructor consent. Special course offering on topics of current interest in computer science. May be repeated to a maximum of 8 units on different topics.', 'CS', NULL),
(9, 'CS 596', 'Comprehensive Examination', ' Permission needed from department. Examination of student’s ability to demonstrate mastery of the subject matter. Students should take the comprehensive exam during the quarter, in which they complete all Course work or shortly thereafter. Graded CR/NC.', NULL, NULL),
(9, 'CS 598', 'Graduate Directed Study', 'Prerequisite: instructor consent. Independent investigation and study of an advanced topic in computer science under direct supervision of an instructor. May be repeated to maximum of 4 units.', 'CS', NULL),
(9, 'CS 599A', 'Thesis or Project', 'Prerequisites: Completion of at least 20 units of 500 level CS courses and instructor consent to act as sponsor, department approval of topic prior to registration. Research project conducted in an area of advanced topics in computer science under direct supervision of an instructor. This research project shall be continued in CS 599B. Graded CR/NC.', 'Research', NULL),
(9, 'CS 599B', 'Thesis or Project', 'Prerequisites: CS 599A. Instructor consent to act as sponsor, completion of all other requirements for an MS degree in Computer Science. Continuation of research project conducted in CS 599A. Each student shall orally present his/hers research result in a public forum. Graded CR/NC.', 'Research', NULL),
(10, 'CSCI101', ' Fundamentals of Computer Programming (3.0 units)', 'Introduction to the design of solutions to computer solvable problems. Algorithm design, solution implementation using a high-level programming language, program correctness and verification.', NULL, NULL),
(10, 'CSCI103', ' Introduction to Programming (3.0 units)', 'Basic datatypes, assignments, control statements (if, switch, for, while), input/output (printf, scanf, cin, cout), functions, arrays, structures, recursion, dynamic memory, file handling. Programming in C/C++. Corequisites: CSCI 109 or EE 109.', NULL, NULL),
(10, 'CSCI104', ' Data Structures and Object Oriented Design (4.0 units)', 'Introduces the student to standard data structures (linear structures such as linked lists, (balanced) trees, priority queues, and hashtables), using the C++ programming language.Prerequisite: CSCI 103. Corequisite: CSCI 170.', NULL, NULL),
(10, 'CSCI109', ' Introduction to Computing (3.0 units)', 'Computing as a discipline, a body of knowledge, and a domain of science/engineering concerned with information and its transformation.', NULL, NULL),
(10, 'CSCI110', ' Introduction to Digital Logic (3.0 units)', 'Boolean algebra; number systems; Boolean function synthesis; binary arithmetic; codes; combinational logic devices; sequential circuits; state machine design and implementation. Duplicates credit in former EE 154.', NULL, NULL),
(10, 'CSCI170', ' Discrete Methods in Computer Science (4.0 units)', 'Sets, functions, series. Big-O notation and algorithm analysis.Propositional and first-order logic. Counting and discrete probability. Graphs and basic graph algorithms. Basic number theory. Prerequisites: CSCI 103L and CSCI 109. Duplicates credit in former CSCI 271.', 'Graphs', NULL),
(10, 'CSCI201', ' Principles of Software Development (4.0 units)', 'Object-oriented paradigm for programming-in-the-large in Java; writing sophisticated concurrent applications with animation and graphic user interfaces; using professional tools on team project. Prerequisite: CSCI 104L.', 'Graphs', NULL),
(10, 'CSCI270', ' Introduction to Algorithms and Theory of Computing (4.0 units)', 'Algorithm analysis. Greedy algorithms, Divide and Conquer, Dynamic Programming, graph algorithms. NP-completeness and basic recursion theory and undecidability. Sorting lower bounds. Number-theory based cryptography. Prerequisites: CSCI 104L and CSCI 170. Duplicates credit in former CSCI 303.', 'Graphs', NULL),
(10, 'CSCI280', ' Video Game Production (4.0 units)', 'History of video games; overview of game genres; phases of video game development (concept, preproduction, production, post-production); roles of artists, programmers, designers, and producers.', 'Game Design', NULL),
(10, 'CSCI281', ' Pipelines for Games and Interactives (3.0 units)', 'Explores the aesthetic development/technical implementation necessary to achieve unique, compelling, intuitive visual design in games. Students will develop group visual game design portfolios.', 'Game Design', NULL),
(10, 'CSCI310', ' Software Engineering (4.0 units)', 'Introduction to the software engineering process and software lifecycle. Covers project management, requirements, architecture, design, implementation, testing, and maintenance phase activities in team based projects. Prerequisites: CSCI 201L. Duplicates credit in CSCI 377.', NULL, NULL),
(10, 'CSCI350', ' Introduction to Operating Systems (4.0 units)', 'Basic issues in concurrency, deadlock control, synchronization scheduling, memory management, protection and access control, inter-process communication, and structured design. Laboratory experiences with Unix-like operating system. Prerequisites: CSCI 201L and EE 109 or EE 352. Duplicates credit in CSCI 402.', 'Operating Systems', NULL),
(10, 'CSCI352', ' Computer Organization and Architecture (3.0 units)', 'Computer organization and architecture. Concepts include: computer evolution and performance, system busses, cache memory, internal and external memory, input/output, operating system support, computer arithmetic. Prerequisite: CSCI 104.', NULL, NULL),
(10, 'CSCI353', ' Introduction to Internetworking (4.0 units)', 'Global Internet: design principles, layering, protocol design/analysis.Networked applications, Internet structure/architecture,Protocols for transport/congestion control, network layer/routing,link layer/MAC. Network security. Prerequisites: CSCI 201. Recommended preparation: Familiarity with C and C++.Duplicates credit in EE 450.', 'Networking', NULL),
(10, 'CSCI360', ' Introduction to Artificial Intelligence (4.0 units)', 'Concepts and algorithms underlying the understanding and construction of intelligent systems. Agents, problem solving, search,representation, reasoning, planning, machine learning. Prerequisites: CSCI 104L and CSCI 170. Duplicates credit in CSCI 460.', 'Artificial Intelligence', NULL),
(10, 'CSCI380', ' Video Game Programming (4.0 units)', 'Underlying concepts and principles required for programming video games (topics include vectors, transformations, 3-D math, geometric primitives, matrices). Prerequisite: CSCI 104 or ITP 365.', 'Game Design', NULL),
(10, 'CSCI401', ' Capstone', 'Group project with an outside stakeholder to develop real-world software solutions to large-scale problems.Topics include software engineering, professional preparation, and recent computer science research. Prerequisite: CSCI 270 and CSCI 310. (Duplicates credit in CSCI 477ab)', 'Research', NULL),
(10, 'CSCI402', ' Operating Systems (4.0 units)', 'Concurrency, deadlock control, synchronization, process and thread scheduling, memory management, file systems, security and access control, communication and networking, distributed file systems, data management. Prerequisites: CSCI 201 or CSCI 455; EE 352 or EE 357.', 'Networking', NULL),
(10, 'CSCI404', ' Capstone', 'Capstone class in which students create their own technology startup, leveraging comprehensive CS knowledge and best industry practices. Prerequisite: CSCI 201, CSCI 270, and ITP 466.', NULL, NULL),
(10, 'CSCI420', ' Computer Graphics (4.0 units)', 'Computer graphics, OpenGL, 2D and 3D transformations, Bezier splines, computer animation, rendering including ray tracing, shading and lighting, artistic rendering, virtual reality, visualization. Prerequisite: CSCI 104L and MATH 225. Duplicates credit in CSCI 480.', 'Graphs', NULL),
(10, 'CSCI423', ' Native Console Multiplayer Game Development (4.0 units)', 'Implementation of AAA style multiplayer game running on consoles and DX11. Console development in native C++, console SDKs, engine components, gameplay, networking, data prediction/replication. Prerequisite: CSCI 522 or ITP 380. Recommended preparation: ITP 485.', 'Game Design', NULL),
(10, 'CSCI424', ' Game Engine Tool Development (4.0 units)', 'Tool development for a C++ console game. Animation export, compression. FBX parsing. Level editing, object live update tools. Debugging tools. Texture compression. Data Pipeline. Prerequisite: ITP 380. Recommended preparation: ITP 485.', 'Game Design', NULL),
(10, 'CSCI425', ' Immersive Game Development (4.0 units)', 'Implementation of a console multiplayer game leveraging input devices such as Kinect, PSMove, Console + IPad/PSVita, Cloud Computing, to achieve creative design. Prerequisite: CSCI 423.', 'Game Design', NULL),
(10, 'CSCI430', ' Introduction to Computer and Network Security (4.0 units)', 'A broad overview of security threats and defenses, security systems and functionalities, as well as current security practices. Includes homeworks and in-class exercises to provide practical experience working with such systems. Prerequisite: CSCI 201.', 'Security', NULL),
(10, 'CSCI445', ' Introduction to Robotics (4.0 units)', 'Designing, building and programming mobile robots; sensors, effectors, basic control theory, control architectures, some advanced topics, illustrations of state-of-the-art. Teamwork; final project tested in a robot contest. Junior standing or higher. Prerequisites: CSCI 103.', NULL, NULL),
(10, 'CSCI450', ' Introduction to Computer Networks (3.0 units)', 'Network architectures; layered protocols, network service interface; local networks; long-haul networks; internal protocols;link protocols; addressing; routing; flow control; higher level protocols. Duplicates credit in CSCI 353.', 'Networking', NULL),
(10, 'CSCI452', ' Parallel and Distributed Computation (3.0 units)', 'Architectural principles underlying modern processors; introduction to parallel programming techniques, software performance optimization strategies, and application mapping to multi-core, accelerator and cloud platforms. Prerequisite: EE 355 or CSCI 201. Recommended preparation: EE 109 or EE 352.', 'Distributed Applications', NULL),
(10, 'CSCI454', ' Introduction to System-on-Chip (4.0 units)', 'Design flow, tools, and issues related to System/Network-on-Chip (S/Noc) design for real-time embedded systems with applications in mobile, cloud, aerospace, and medical electronics. Prerequisite: EE 354.', 'Embedded Systems', NULL),
(10, 'CSCI455', ' Introduction to Programming Systems Design (4.0 units)', 'Intensive introduction to programming principles, discrete mathematics for computing, software design and software engineering concepts. Not available for credit to computer sciencemajors, graduate or undergraduate.', 'CS', NULL),
(10, 'CSCI457', ' Computer Systems Organization (3.0 units)', 'Register Transfer level machine organization; performance; arithmetic; pipelined processors; exceptions, out-of-order and speculative execution, cache, virtual memory, multi-core multi-threaded processors, cache coherence. Prerequisites: EE 354L or graduate standing.', NULL, NULL),
(10, 'CSCI458', ' Numerical Methods (4.0 units)', 'Rounding errors in digital computation; solution of linear algebraic systems; Newton''s method for nonlinear systems; matrix eigenvalues; polynomial approximation; numerical integration; numerical solution of ordinary differential equations.', NULL, NULL),
(10, 'CSCI476', ' Cryptography', 'Introduction to modern Cryptography; Mathematical/algorithmic studies of methods for protecting information in computer and communication systems: Public-Key Cryptosystems, zero-knowledge proofs, data privacy. Prerequisites: CSCI 270.', 'Graphs', NULL),
(10, 'CSCI485', ' File and Database Management (4.0 units)', 'File input/output techniques, basic methods for file organization, file managers, principles of databases, conceptual data models, and query languages. Prerequisite: CSCI 201.', 'Databases', NULL),
(10, 'CSCI487', ' Programming Game Engines (4.0 units)', 'Techniques for building the core components of a game engine; 2-D/3-D graphics, collision detection, artificial intelligence algorithms, shading, programming input devices. Prerequisite: ITP 380.', 'Game Design', NULL),
(10, 'CSCI490', ' Directed Research (1.0-8.0 units, max 12)', 'Individual research and readings. Not available for graduate credit.', 'Research', NULL),
(10, 'CSCI491A', ' Final Game Project (4.0 units)', 'a: Design, iterative prototyping, and development of a 1st playable level. Open only to seniors.', 'Game Design', NULL),
(10, 'CSCI491B', ' Final Game Project (2.0 units)', 'b: Design, iterative stage 2 prototyping and development of a refined game.', 'Game Design', NULL),
(10, 'CSCI495', ' Senior Project (2.0 units)', 'An original project will be constructed applying computer technology (in either hardware or software) to produce a result useful in the physics classroom or laboratory.', NULL, NULL),
(10, 'CSCI499', ' Special Topics (2.0-4.0 units)', 'Selected topics in computer science.', 'CS', NULL),
(10, 'CSCI501', ' Numerical Analysis and Computation (3.0 units)', 'Linear equations and matrices, Gauss elimination, error estimates, iteration techniques; contractive mappings, Newton''s method; matrix eigenvalue problems; least-squares approximation, Newton-Cotes and Gaussian quadratures; finite difference methods. Prerequisite: linear algebra and calculus.', NULL, NULL),
(10, 'CSCI502A', ' Numerical Analysis (3.0 units)', 'Computational linear algebra; solution of general nonlinear systems of equations; approximation theory using functional analysis; numerical solution of ordinary and partial differential equations.', NULL, NULL),
(10, 'CSCI502B', ' Numerical Analysis (3.0 units)', 'Computational linear algebra; solution of general nonlinear systems of equations; approximation theory using functional analysis; numerical solution of ordinary and partial differential equations.', NULL, NULL),
(10, 'CSCI503', ' Parallel Programming (3.0 units)', 'Exploration of parallel programming paradigms, parallel computing architectures, hands-on parallel programming assignments, contemporary and historical examples and their impact, context with parallel algorithms. Recommended preparation: CSCI 104 or CSCI 455; EE 452 or EE 457.', NULL, NULL),
(10, 'CSCI505A', ' Applied Probability (3.0 units)', 'Populations, permutations, combinations, random variables, distribution and density functions, conditional probability and expectation,; binomial, poisson, and normal distributions; laws of large numbers, central limit theorem. Prerequisite: Consent of Instructor.', NULL, NULL),
(10, 'CSCI505B', ' Applied Probability (3.0 units)', 'Markov processes in discrete or continuous time; renewal processes; martingales; brownian motion and diffusion theory; random walks, inventory models, population growth, queuing models, shot noise.', NULL, NULL),
(10, 'CSCI510', ' Software Management and Economics (3.0 units)', 'Theories of management and their application to software projects. Economic analysis of software products and processes. Software cost and schedule estimation, planning and control.', NULL, NULL),
(10, 'CSCI512', ' Testing and Analysis of Software Systems (4.0 units)', 'Introduces students to the topic of automated testing and analysis of large-scale modern software systems. Recommended preparation: CSCI 571; Java programming skills; Linux system administration.', NULL, NULL),
(10, 'CSCI520', ' Computer Animation and Simulation (4.0 units)', 'Fundamental techniques of computer animation and simulation, knowledge and/or experience in the design, scripting, production and post-production stages of computer animation. Prerequisite: CSCI 420 or CSCI 580. Recommendedpreparation: Familiarity with calculus, linear algebra, and numerical computation; C/C++ programming skills.', NULL, NULL),
(10, 'CSCI522', ' Game Engine Development (4.0 units)', 'The principles of developing game engines targeted at modern PC and game console hardware.', 'Game Design', NULL),
(10, 'CSCI523', ' Networked Games (4.0 units)', 'Design and implementation of networked games, from the origins of the supporting technologies in distributed systems, visual simulations, networked virtual environments, and shipped games. Recommended preparation: CSCI 420 or CSCI 580 or an equivalent course in graphics.', 'Game Design', NULL),
(10, 'CSCI524', ' Networked Artificial Intelligence (4.0 units)', 'Networked game communication architectures, protocol development, architecting networked game AI clients/services. Character following, knowledge representation and reasoning, dynamic play strategies, search, learning, and planning. Recommended preparation: CSCI 420 or CSCI 580 or an equivalent course in graphics.', 'Game Design', NULL),
(10, 'CSCI526', ' Advanced Mobile Devices and Game Consoles (4.0 units)', 'Explore the complex engineering process required to design and build a real-time graphics engine to support physical realism on mobile devices. Recommended preparation: CSCI 420 or CSCI 580 or an equivalent course in graphics.', 'Game Design', NULL),
(10, 'CSCI529A', ' Advanced Game Projects (4.0 units)', 'Team projects intended to address the multifaceted technical and creative challenges that are inherent to comprehensive game development. Recommended preparation: CSCI 522 or CTIN 488.', 'Game Design', NULL),
(10, 'CSCI529B', ' Advanced Game Projects (2.0 units)', 'Provides students in various areas of game specialization the practice of design, iterative stage 2 prototyping and development of a refined game.', 'Game Design', NULL),
(10, 'CSCI530', ' Security Systems (4.0 units)', 'Protecting computer networks and systems using cryptography, authentication, authorization, intrusion detection and response. Includes lab to provide practical experience working with such systems.', 'Graphs', NULL),
(10, 'CSCI531', ' Applied Cryptography (3.0 units)', 'Intensive overview of cryptography for practitioners, historical perspective on early systems, number theoretic foundations of modern day cryptosystems and basic cryptanalysis.', 'Graphs', NULL),
(10, 'CSCI534', ' Affective Computing (3.0 units)', 'Overview of the theory of human emotion, techniques for recognizing and synthesizing emotional behavior, and design application. Recommended preparation: CSCI 561.', NULL, NULL),
(10, 'CSCI536', ' Linear Programming and Extensions (3.0 units)', 'Linear programming models for resource allocation; simplex and revised simplex methods; duality; sensitivity; transportation problems; selected extensions to large scale, multiobjective, and special structured models.', NULL, NULL),
(10, 'CSCI540', ' Self-Organization (3.0 units)', 'Massively distributed systems whose global behavior emerges from local interactions of components. Global to local compilation;Robot swarms; Formation of shapes/spatial patterns;Self-assembly; programmable matter. Recommended preparation: Graduate standing in science or engineering.', NULL, NULL),
(10, 'CSCI544', ' Applied Natural Language Processing (3.0 units)', 'Introduction to key components of human language technologies, including: information extraction, sentiment analysis, question answering, machine translation. Recommended preparation: Proficiency in programming, algorithms and data structures, basic knowledge of linear algebra.', 'Natural Language Processing', NULL),
(10, 'CSCI545', ' Robotics (4.0 units)', 'Fundamental skills for modeling and controlling of dynamic systems for robotic applications and graphics animations; control theory; kinematics; dynamics; sensor processing; real-time operating systems; robot labs. Recommended preparation: Basic knowledge in linear algebra (matrices and vectors), calculus, programming in C/C++ or any another language or permission of the instructor.', 'Graphs', NULL),
(10, 'CSCI548', ' Information Integration on the Web (4.0 units)', 'Foundations, techniques, and algorithms for information integration. Topics include Semantic Web, linked data, data integration, entity linkage, source modeling, and information extraction. Prerequisite: CSCI 561. Recommended preparation: CSCI 585 and some programming experience.', NULL, NULL),
(10, 'CSCI550', ' Advanced Data Stores (4.0 units)', 'Selected topics on highly available, elastic data stores. Topics include non-relational data models, simple interfaces and query languages, weak consistency and benchmarking techniques. Prerequisite: CSCI 485 or CSCI 585.', NULL, NULL),
(10, 'CSCI551', ' Computer Communications (4.0 units)', 'Protocol design for computer communication networks, network routing, transport protocols, internet working. Prerequisite: CSCI 353 or (EE 450 and (CSCI 350 or CSCI 402). Recommended preparation: C-language programming.', 'Networking', NULL),
(10, 'CSCI552', ' Asynchronous VLSI Design (3.0 units)', 'Asynchronous channels and architectures; implementation design styles; controller synthesis; hazards, and races; Petri-nets; performance analysis, and optimization; globally asynchronous locally synchronous design. Open only to graduate students.', 'Optimization', NULL),
(10, 'CSCI553', ' Computational Solution of Optimization Problems (3.0 units)', 'Computer algorithms for system optimization. Search techniques, gradient methods, parameter optimization in control systems. Optimization with constraints; linear and nonlinear programming. Random search techniques.', 'Optimization', NULL),
(10, 'CSCI555', ' Advanced Operating Systems (4.0 units)', 'Advanced topics in operating system research: new OS structures, novel memory management, communication, filesystem, process management, reliability and security techniques. Prerequisite: CSCI 350 or CSCI 402.', 'Security', NULL),
(10, 'CSCI556', ' Introduction to Cryptography (3.0 units)', 'Modern secret codes. Public key cryptosystems of Rivest-Shamir-Adleman, Diffie-Hellman and others. The underlying number theory and computational complexity theory.', 'Graphs', NULL),
(10, 'CSCI557', ' Computer Systems Architecture (3.0 units)', 'Computer architecture from a design perspective: Pipelined processors, speculative execution, VLIW, vector processors, memory systems, interconnection networks, shared-memory and message-passing multiprocessors, chip multiprocessors.', 'Networking', NULL),
(10, 'CSCI558', ' Internetwork and Distributed Systems Laboratory (3.0 units)', 'Students complete laboratory exercises in operating system and network management, distributed systems, TCP/IP, SNMP, NFS, DNS, etc. Term project required. Recommended preparation: 551, 555', 'Distributed Applications', NULL),
(10, 'CSCI559', ' Mathematical Pattern Recognition (3.0 units)', 'Distribution free classification, discriminant functions, training algorithms; statistical classification, parametric and nonparametric techniques; artificial neural networks. Corequisites: EE 441 and EE 503.', 'Networking', NULL),
(10, 'CSCI561', ' Foundations of Artificial Intelligence (4.0 units)', 'Foundations of symbolic intelligent systems, search, logic, knowledge representation, planning, learning. Recommended preparation: good programming and algorithm analysis skills', 'Artificial Intelligence', NULL),
(10, 'CSCI565', ' Compiler Design (4.0 units)', 'Formal grammars; parsing methods and lexical analysis; code generation; local and global code optimization; and dynamic allocation.', 'Optimization', NULL),
(10, 'CSCI567', ' Machine Learning (4.0 units)', 'Statistical methods for building intelligent and adaptive systems that improve performance from experiences; Focus on theoretical understanding of these methods and their computational implications. Recommended preparation: Undergraduate level training or coursework in linear algebra, multivariate calculus, basic probability and statistics; an undergraduate level course in Artificial Intelligence may be helpful but is not required.', 'Distributed Applications', NULL),
(10, 'CSCI568', ' Requirements Engineering (3.0 units)', 'Techniques for successful requirements analysis & requirements engineering (RE) of software-intensive systems. Systematic process of developing requirements through co-operative problem analysis, representation, and validation.', NULL, NULL),
(10, 'CSCI570', ' Analysis of Algorithms (4.0 units)', 'Explores fundamental techniques such as recursion, Fourier transform ordering, dynamic programming for efficient algorithm construction. Examples include arithmetic, algebraic, graph, pattern matching, sorting, searching algorithms.', 'Graphs', NULL),
(10, 'CSCI571', ' Web Technologies (4.0 units)', 'Advanced study of programming languages with application to the Web. Languages for client-side and server-side processing. Examples taken from: HTML, Java, JavaScript, Perl, XML and others. Recommended preparation: knowledge of at least two programming languages', NULL, NULL),
(10, 'CSCI572', ' Information Retrieval and Web Search Engines (4.0 units)', 'Examines key aspects of information retrieval as they apply to search engines; web crawling, indexing, querying and quality of results are studied. Prerequisite: CSCI 571. Recommended preparation: Familiarity with programming in multiple languages, C, C++, and/or Java and experience with a database system, e.g. MySQL or Oracle.', NULL, NULL),
(10, 'CSCI574', ' Computer Vision (3.0 units)', 'Description and recognition of objects, shape analysis, edge and region segmentation, texture, knowledge based systems, image understanding.', NULL, NULL),
(10, 'CSCI575', ' Wireless and Mobile Networks Design and Laboratory (3.0 units)', 'Mobile ad hoc networks: ad hoc and geographic routing, resource discovery, medium access control, IP-mobility, mobility modeling, wired-wireless networks. Lab: wireless LAN measurement, mobile-IP, ad hoc routing. Recommended preparation: programming, network simulation', 'Graphs', NULL),
(10, 'CSCI576', ' Multimedia Systems Design (4.0 units)', 'State-of-the-art technology for networked multimedia systems such as: system design, I/O technologies, data management, data compression, networking and telecommunications. Design of real-world multimedia solution. Recommended preparation: familiarity with C or C++', 'Networking', NULL),
(10, 'CSCI577A', ' Software Engineering (4.0 units)', 'A: Software life-cycle processes; planning considerations for product definition, development, test, implemetation, maintenance. Team project. Graduate standing.', NULL, NULL),
(10, 'CSCI577B', ' Software Engineering (4.0 units)', 'b: Software development, test, implemetation, and maintenance methods. CASE tools and software envirnments. Software product engineering, configuration management, quaility engineering, documentation. Application via projects.', NULL, NULL),
(10, 'CSCI578', ' Software Architectures (4.0 units)', 'Study of concepts, principles and scope of software system architectures, including architectural styles, languages, connectors, middleware, dynamism, analysis, testing and domain-specific approaches.', NULL, NULL),
(10, 'CSCI580', ' 3-D Graphics and Rendering (4.0 units)', 'Course outlines the process of creating images from 3D models. Includes transformations, shading, lighting, rastorization, texturing, and other topics.', 'Graphs', NULL),
(10, 'CSCI585', ' Database Systems (4.0 units)', 'Database system architecture; conceptual database models; semantic, object-oriented, logic-based, and relational databases; user and program interfaces; database system implementation; integrity, security, concurrency and recovery. Recommended preparation: Knowledge of relational databases, SQL, relational algebra and physical database design is required. Open only to graduate students.', 'Databases', NULL),
(10, 'CSCI586', ' Database Systems Interoperability (3.0 units)', 'Federated and multi-database systems, database networking, conceptual and schematic diversity, information sharing and exchange, knowledge discovery, performance issues.', 'Networking', NULL),
(10, 'CSCI587', ' Geospatial Information Management (4.0 units)', 'Techniques to efficiently store, manipulate, index and query geospatial information in support of real-world geographical and decision-making applications. Prerequisite: CSCI 485 or CSCI 585.', 'Graphs', NULL);
INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(10, 'CSCI589', ' Software Engineering for Embedded Systems (4.0 units)', 'Software engineering methods and techniques for embedded, resource constrained, and mobile environments. Applications to real-time operating systems and wireless networking systems. Class project.', 'Embedded Systems', NULL),
(10, 'CSCI590', ' Directed Research (1.0-12.0 units)', 'Research leading to the master''s degree. Maximum units which may be applied to the degree to be determined by the department. Graded CR/NC.', 'Research', NULL),
(10, 'CSCI591', ' Computer Science Research Colloquium (1.0 units, max 2)', 'Exploration and critical assessment of research activities in computer science. Course will serve as a forum for current research presentations from academia and industry. Graded CR/NC.', 'Research', NULL),
(10, 'CSCI594A', ' Master''s Thesis (2.0 units)', 'Credit on acceptance of thesis. Graded IP/CR/NC.', NULL, NULL),
(10, 'CSCI594B', ' Master''s Thesis (2.0 units)', 'Credit on acceptance of thesis. Graded IP/CR/NC.', NULL, NULL),
(10, 'CSCI594Z', ' Master''s Thesis (0.0 units)', 'Credit on acceptance of thesis. Graded IP/CR/NC.', NULL, NULL),
(10, 'CSCI596', ' Scientific Computing and Visualization (4.0 units)', 'Hands-on training on the basics of parallel computing and scientific visualization in the context of computer simulations in science and engineering. Recommended preparation: CSCI 455 and MATH 458 .', NULL, NULL),
(10, 'CSCI598', ' Professional Writing and Communication for Computer Scientis (1.0 unit)', 'Instruction in discipline-specific workplace writing and communication skills for computer science graduate students. Open only to graduate students in Computer Science.', 'CS', NULL),
(10, 'CSCI599', ' Special Topics (2.0-4.0 units, max 9)', 'Course content to be selected each semester from recent developments in computer science.', 'CS', NULL),
(10, 'CSCI626', ' Computational Social Sciences (4.0 units)', 'Discussion of advances in computational social sciences, including automated text and network analysis. Recommended preparation: PSYC 625.', NULL, NULL),
(10, 'CSCI651', ' Advanced Computer Communications (4.0 units)', 'Computer communication protocols and systems, including classic and contemporary literature. The emphasis is on conceptual issues in the design and implementation of computer internetworks. Prerequisite: EE 450 and CSCI 350 or CSCI 402.', 'Networking', NULL),
(10, 'CSCI657', ' Advanced Distributed Systems (4.0 units)', 'The foundations and modern applications of distributed systems. Topics include: logical time, fault tolerance, group communication, consensus, consistency, transactions, and peer-to-peer. Recommended preparation: Proficiency in a high-level language, ideally C++, and familiarity with git. Open only to Computer Science doctoral students.', 'Distributed Applications', NULL),
(10, 'CSCI658', ' Diagnosis and Design of Reliable Digital Systems (3.0 units)', 'Fault models; test generation; fault simulation; self-checking and self-testing circuits; design for testability; fault tolerant design techniques; case studies.', NULL, NULL),
(10, 'CSCI662', ' Advanced Natural Language Processing (4.0 units)', 'Computational models of natural language. Formalisms for describing structures of human language, and algorithms for learning language structures from data. Recommended preparation: Proficiency in programming, algorithms and data structures, discrete math, probability theory, and calculus. Open only to doctoral students. (Duplicates credit in former CSCI 562)', 'Natural Language Processing', NULL),
(10, 'CSCI670', ' Advanced Analysis of Algorithms (4.0 units)', 'Fundamental techniques for design and analysis of algorithms. Dynamic programming; network flows; theory of NP-completeness; linear programming; approximation, randomized, and online algorithms; basic cryptography. Prerequisite: CSCI 570. Recommended preparation: familiarity with algorithms and discrete mathematics. Open only to doctoral students.', 'Graphs', NULL),
(10, 'CSCI671', ' Randomized Algorithms (4.0 units)', 'Standard techniques in the design and analysis of randomized algorithms and random structures. Topics include tail bounds, Markov Chains, VC-dimension, probabilistic method. Prerequisite: CSCI 570 or CSCI 670. Recommended preparation: Basic background in probability and linear algebra.', NULL, NULL),
(10, 'CSCI685', ' Advanced Topics in Database Systems (4.0 units)', 'Advanced techniques in database management. Topics include optimization, cache management, data mining and knowledge discovery, decision support, spatial indexes, parallel and distributed systems, extendible storage. Prerequisite: CSCI 485 or CSCI 585.', 'Databases', NULL),
(10, 'CSCI686', ' Advanced Big Data Analytics (4.0 units)', 'Advanced statistical inference and data mining techniques for data analytics, including: topic modeling, structure learning, time-series analysis, learning with less supervision, and massive-scale data analytics. Prerequisite: CSCI 567.', NULL, NULL),
(10, 'CSCI697', ' Seminar in Computer Science Research (1.0 units, max 2)', 'Introduction of Ph.D. students to the broad range of computer science research. Two semesters registration required. Open to Computer Science doctoral students only. Graded CR/NC. Duplicates credit in former CSCI 597.', 'Research', NULL),
(10, 'CSCI698', ' Practicum in Teaching Computer Science (1.0 units, max 2)', 'Practical principles for the long-term development of effective teaching in Computer Science. Intended for teaching assistants for classes offered by the Computer Science department. Graded CR/NC. Open only to Computer Science doctoral students.', 'CS', NULL),
(10, 'CSCI790', ' Research (1.0-12.0 units)', 'Research leading to the doctorate. Maximum units which may be applied to the degree to be determined by the department. Graded CR/NC.', 'Research', NULL),
(10, 'CSCI794A', ' Doctoral Dissertation (2.0 units)', 'Credit on acceptance of Dissertation. Graded CR/NC.', NULL, NULL),
(10, 'CSCI794B', ' Doctoral Dissertation (2.0 units)', 'Credit on acceptance of Dissertation. Graded CR/NC.', NULL, NULL),
(10, 'CSCI794C', ' Doctoral Dissertation (2.0 units)', 'Credit on acceptance of Dissertation. Graded CR/NC.', NULL, NULL),
(10, 'CSCI794D', ' Doctoral Dissertation (2.0 units)', 'Credit on acceptance of Dissertation. Graded CR/NC.', NULL, NULL),
(10, 'CSCI794Z', ' Doctoral Dissertation (0.0 units)', 'Credit on acceptance of Dissertation. Graded CR/NC.', NULL, NULL),
(16, 'CMSC100', 'Bits and Bytes of Computer Science', 'Students are introduced to the field (and disciplines) of computer science within a small classroom setting. They will learn to make a successful transition from high school to the university, while exploring study skills, student success plans and research opportunities.', 'Research', NULL),
(16, 'CMSC106', 'Introduction to C Programming', 'Design and analysis of programs in C. An introduction to computing using structured programming concepts. Intended for students with no or minimal programming experience.', NULL, 'c'),
(16, 'CMSC122', 'Introduction to Computer Programming via the Web', 'Introduction to computer programming in the context of developing full featured dynamic web sites. Uses a problem solving approach to teach basics of program design and implementation using JavaScript; relates these skills to creation of dynamic web sites; then explores both the potential and limits of web-based information sources for use in research. Intended to help relate a student''s major to these emerging technologies.', 'Research', NULL),
(16, 'CMSC131', 'Object-Oriented Programming I', 'Introduction to programming and computer science. Emphasizes understanding and implementation of applications using object-oriented techniques. Develops skills such as program design and testing as well as implementation of programs using a graphical IDE. Programming done in Java.', 'Graphs', NULL),
(16, 'CMSC132', 'Object-Oriented Programming II', 'Introduction to use of computers to solve problems using software engineering principles. Design, build, test, and debug medium -size software systems and learn to use relevant tools. Use object-oriented methods to create effective and efficient problem solutions. Use and implement application programming interfaces (APIs). Programming done in Java.', NULL, NULL),
(16, 'CMSC198A', 'Special Topics in Computer Science for Non-Majors', NULL, 'CS', NULL),
(16, 'CMSC216', 'Introduction to Computer Systems', 'Machine representation of data including integers and floating point. Modern computer architectural features and their interaction with software (registers, caches). Interaction between user programs and the OS: system class, process, and thread management. Optimizing software to improve runtime performance using both compilers and hand turning.', NULL, NULL),
(16, 'CMSC250', 'Discrete Structures', 'Fundamental mathematical concepts related to computer science, includin finite and infinite sets, relations, functions, and propositional logic. Introduction to other techniques, modeling and solving problems in computer science. Introduction to permutations, combinations, graphs, and trees with selected applications.', 'Graphs', NULL),
(16, 'CMSC250H', 'Discrete Structures', 'Fundamental mathematical concepts related to computer science, includin finite and infinite sets, relations, functions, and propositional logic. Introduction to other techniques, modeling and solving problems in computer science. Introduction to permutations, combinations, graphs, and trees with selected applications.', 'Graphs', NULL),
(16, 'CMSC289I', 'Rise of the Machines: Artificial Intelligence Comes of Age', NULL, 'Artificial Intelligence', NULL),
(16, 'CMSC289J', 'Computational Approaches in Language Science', NULL, NULL, NULL),
(16, 'CMSC298A', 'Special Topics in Computer Science', NULL, 'CS', NULL),
(16, 'CMSC320', 'Introduction to Data Science', 'An introduction to the data science pipeline, i.e., the end-to-end process of going from unstructured, messy data to knowledge and actionable insights. Provides a broad overview of several topics including statistical data analysis, basic data mining and machine learning algorithms, large-scale data management, cloud computing, and information visualization.', 'Machine Learning', NULL),
(16, 'CMSC330', 'Organization of Programming Languages', 'The semantics of programming languages and their run-time organization. Several different models of languages are discussed, including procedural (e.g., C, Pascal), functional (e.g., ML, LISP), rule-based (e.g., Prolog), and object-oriented (e.g., C++, Smalltalk). Run-time structures, including dynamic versus static scope rules, storage for strings, arrays, records, and object inheritance are explored.', NULL, NULL),
(16, 'CMSC351', 'Algorithms', 'A systematic study of the complexity of some elementary algorithms related to sorting, graphs and trees, and combinatorics. Algorithms are analyzed using mathematical techniques to solve recurrences and summations.', 'Graphs', NULL),
(16, 'CMSC389B', 'Special Topics in Computer Science; When Computers Meet Biology', NULL, 'CS', NULL),
(16, 'CMSC389J', 'Special Topics in Computer Science; Introduction to Advanced Javascript', NULL, 'CS', 'javascript'),
(16, 'CMSC389P', 'Special Topics in Computer Science; Introduction to PHP, MySQL, and Apache', NULL, 'CS', 'php'),
(16, 'CMSC389T', 'Special Topics in Computer Science; Advanced Discrete Structures', NULL, 'CS', NULL),
(16, 'CMSC390', 'Honors Paper', 'Special study or research directed toward preparation of honors paper.', 'Research', NULL),
(16, 'CMSC396H', 'Computer Science Honors Seminar', 'Overview of computer science research activities, techniques, and tools. Diverse research areas will be covered, including systems, networks, artificial intelligence, human-computer interaction, software engineering, graphics, vision, and theory.', 'Graphs', NULL),
(16, 'CMSC402', 'Bioinformatic Algorithms and Methods for Functional Genomics and Proteomics', 'An introduction to the fundamental concepts in the computational analysis of biological systems with applications to: functional genomics, population genetics, proteomics and epigenetics. Computational concepts covered: network and graph algorithms, combinatorial algorithms, machine learning, large data/network visualization, statistical modeling and inference, probabilistic graphical models, sparse methods in data analysis, numerical optimization. No prior knowledge of biology required.', 'Graphs', NULL),
(16, 'CMSC411', 'Computer Systems Architecture', 'Input/output processors and techniques. Intra-system communication, buses, caches. Addressing and memory hierarchies. Microprogramming, parallelism, and pipelining.', NULL, NULL),
(16, 'CMSC412', 'Operating Systems', 'A hands-on introduction to operating systems, including topics in: multiprogramming, communication and synchronization, memory management, IO subsystems, and resource scheduling polices. The laboratory component consists of constructing a small kernel, including functions for device IO, multi-tasking, and memory management.', 'Operating Systems', NULL),
(16, 'CMSC414', 'Computer and Network Security', 'An introduction to the topic of security in the context of computer systems and networks. Identify, analyze, and solve network-related security problems in computer systems. Fundamentals of number theory, authentication, and encryption technologies, as well as the practical problems that have to be solved in order to make those technologies workable in a networked environment, particularly in the wide-area Internet environment.', 'Cryptology', NULL),
(16, 'CMSC417', 'Computer Networks', 'Computer networks and architectures. The OSI model including discussion and examples of various network layers. A general introduction to existing network protocols. Communication protocol specification, analysis, and testing.', 'Networking', NULL),
(16, 'CMSC420', 'Data Structures', 'Description, properties, and storage allocation of data structures including lists and trees. Algorithms for manipulating structures. Applications from areas such as data processing, information retrieval, symbol manipulation, and operating systems.', 'Operating Systems', NULL),
(16, 'CMSC421', 'Introduction to Artificial Intelligence', 'Areas and issues in artificial intelligence, including search, inference, knowledge representation, learning, vision, natural languages, expert systems, robotics. Implementation and application of programming languages (e.g. LISP, PROLOG, SMALLTALK), programming techniques (e.g. pattern matching, discrimination networks) and control structures (e.g. agendas, data dependencies).', 'Distributed Applications', NULL),
(16, 'CMSC422', 'Introduction to Machine Learning', 'Machine Learning studies representations and algorithms that allow machines to improve their performance on a task from experience. This is a broad overview of existing methods for machine learning and an introduction to adaptive systems in general. Emphasis is given to practical aspects of machine learning and data mining.', 'Machine Learning', NULL),
(16, 'CMSC424', 'Database Design', 'Students are introduced to database systems and motivates the database approach as a mechanism for modeling the real world. An in-depth coverage of the relational model, logical database design, query languages, and other database concepts including query optimization, concurrency control; transaction management, and log based crash recovery. Distributed and Web database architectures are also discussed.', 'Databases', NULL),
(16, 'CMSC425', 'Game Programming', 'An introduction to the principles and practice of computer game programming and design. This includes an introduction to game hardware and systems, the principles of game design, object and terrain modeling, game physics, artificial intelligence for games, networking for games, rendering and animation, and aural rendering. Course topics are reinforced through the design and implementation of a working computer game.', 'Game Design', NULL),
(16, 'CMSC426', 'Image Processing', 'An introduction to basic techniques of analysis and manipulation of pictorial data by computer. Image input/output devices, image processing software, enhancement, segmentation, property measurement, Fourier analysis. Computer encoding, processing, and analysis of curves.', NULL, NULL),
(16, 'CMSC430', 'Introduction to Compilers', 'Topics include lexical analysis, parsing, intermediate representations, program analysis, optimization, and code generation.', 'Optimization', NULL),
(16, 'CMSC433', 'Programming Language Technologies and Paradigms', 'Programming language technologies (e.g., object-oriented programming), their implementations and use in software design and implementation.', NULL, NULL),
(16, 'CMSC434', 'Introduction to Human-Computer Interaction', 'Assess usability by quantitative and qualitative methods. Conduct task analyses, usability tests, expert reviews, and continuing assessments of working products by interviews, surveys, and logging. Apply design processes and guidelines to develop professional quality user interfaces. Build low-fidelity paper mockups, and a high-fidelity prototype using contemporary tools such as graphic editors and a graphical programming environment (eg: Visual Basic, Java).', 'Graphs', NULL),
(16, 'CMSC435', 'Software Engineering', 'State-of-the-art techniques in software design and development. Laboratory experience in applying the techniques covered. Structured design, structured programming, top-down design and development, segmentation and modularization techniques, iterative enhancement, design and code inspection techniques, correctness, and chief-programmer teams. The development of a large software project.', NULL, NULL),
(16, 'CMSC436', 'Programming Handheld Systems', 'Fundamental principles and concepts that underlie the programming of handheld systems, such as mobile phones, personal digital assistants, and tablet computers. Particular emphasis will be placed on concepts such as limited display size, power, memory and CPU speed; and new input modalities, where handheld systems differ substantially from non-handheld systems, and thus require special programming tools and approaches. Students will apply these concepts and principles in the context of an existing handset programming platform.', NULL, NULL),
(16, 'CMSC451', 'Design and Analysis of Computer Algorithms', 'Fundamental techniques for designing efficient computer algorithms, proving their correctness, and analyzing their complexity. General topics include sorting, selection, graph algorithms, and basic algorithm design paradigms (such as divide-and-conquer, dynamic programming and greedy algorithms), lower bounds and NP-completeness.', 'Graphs', NULL),
(16, 'CMSC452', 'Elementary Theory of Computation', 'Alternative theoretical models of computation, types of automata, and their relations to formal grammars and languages.', NULL, NULL),
(16, 'CMSC456', 'Cryptology', 'Importance in protecting data in communications between computers. The subject lies on the border between mathematics and computer science. Mathematical topics include number theory and probability, and computer science topics include complexity theory.', 'Cryptology', NULL),
(16, 'CMSC460', 'Computational Methods', 'Basic computational methods for interpolation, least squares, approximation, numerical quadrature, numerical solution of polynomial and transcendental equations, systems of linear equations and initial value problems for ordinary differential equations. Emphasis on methods and their computational properties rather than their analytic aspects. Intended primarily for students in the physical and engineering sciences.', NULL, NULL),
(16, 'CMSC466', 'Introduction to Numerical Analysis I', 'Floating point computations, direct methods for linear systems, interpolation, solution of nonlinear equations.', NULL, NULL),
(16, 'CMSC474', 'Introduction to Computational Game Theory', 'Game theory deals with interactions among agents (either human or computerized) whose objectives and preferences may differ from the objectives and preferences of the other agents. It will also provide a comprehensive introduction to game theory, concentrating on its computational aspects.', 'Game Design', NULL),
(16, 'CMSC475', 'Combinatorics and Graph Theory', 'General enumeration methods, difference equations, generating functions. Elements of graph theory, matrix representations of graphs, applications of graph theory to transport networks, matching theory and graphical algorithms.', 'Graphs', NULL),
(16, 'CMSC498', 'Selected Topics in Computer Science', NULL, 'CS', NULL),
(16, 'CMSC498A', 'Selected Topics in Computer Science', NULL, 'CS', NULL),
(16, 'CMSC498F', 'Selected Topics in Computer Science; Robotics and Perception', NULL, 'CS', NULL),
(16, 'CMSC498J', 'Selected Topics in Computer Science; Social Media Computing', NULL, 'CS', NULL),
(16, 'CMSC498R', 'Selected Topics in Computer Science; Introduction to Cryptology', NULL, 'Cryptology', NULL),
(16, 'CMSC498W', 'Selected Topics in Computer Science; Introduction to Virtual and Augmented Reality', NULL, 'CS', NULL),
(16, 'CMSC499A', 'Independent Undergraduate Research', NULL, 'Research', NULL),
(16, 'CMSC660', 'Scientific Computing I', 'Monte Carlo simulation, numerical linear algebra, nonlinear systems and continuation method, optimization, ordinary differential equations. Fundamental techniques in scientific computation with an introduction to the theory and software for each topic.', 'Optimization', NULL),
(16, 'CMSC661', 'Scientific Computing II', 'Fourier and wavelet transform methods, numerical methods for elliptic partial differential equations, numerical linear algebra for sparse matrices, Finite element methods, numerical methods for time dependent partial differential equations. Techniques for scientific computation with an introduction to the theory and software for each topic. Course is part of a two course sequence (660 and 661), but can be taken independently.', NULL, NULL),
(16, 'CMSC662', 'Computer Organization and Programming for Scientific Computing', 'This course presents fundamentals issues of computer hardware, software parallel computing, and scientific data management for programming for scientific computation.', NULL, NULL),
(16, 'CMSC664', 'Advanced Scientific Computing II', 'In the sequence CMSC 663, CMSC 664 students work on a year-long individual project to develop software for a scientific task in a high performance computing environment. Lectures will be given on code development and validation, parallel algorithms for partial differential equations, nonlinear systems, optimization.', 'Optimization', NULL),
(16, 'CMSC666', 'Numerical Analysis I', 'Interpolation and approximation, numerical integration, solution algorithms for nonlinear systems of equations, numerical optimization.', 'Optimization', NULL),
(16, 'CMSC701', 'Computational Genomics', NULL, NULL, NULL),
(16, 'CMSC702', 'Computational Systems Biology', NULL, NULL, NULL),
(16, 'CMSC711', 'Computer Networks', 'Priciples, design, and performance evaluation of computer networks. Network architectures including the ISO model and local area networks (LANs). Communication protocols and network topology.', 'Networking', NULL),
(16, 'CMSC722', 'Artificial Intelligence Planning', 'Automated planning of actions to accomplish some desired goals. Basic algorithms, important systems, and new directions in the field of artificial intelligence planning systems.', 'Distributed Applications', NULL),
(16, 'CMSC723', 'Computational Linguistics I', 'Fundamental methods in natural language processing. Topics include: finite-state methods, context-free and extended context-free models of syntax; parsing and semantics interpretation; n-gram and Hidden Markov models, part-of-speech tagging; natural language applications such as machine translation, automatic summarization, and question answering.', 'Natural Language Processing', NULL),
(16, 'CMSC724', 'Database Management Systems', 'Theoretical and implementation issues in advanced database systems. Topics include distributed databases, parallel databases, database client-server architectures, multimedia access methods, advanced query optimization techniques, data semantics and models, object-oriented databases, and deductive and expert database systems.', 'Databases', NULL),
(16, 'CMSC726', 'Machine Learning', 'An introduction to modern statistical data analysis using machine learning techniques. The course quickly surveys elementary statistical models (decision trees, nearest neighbors and linear regression) and moves on to more complex algorithms such as support vector machines, boosting, neural networks, structured prediction, apprenticeship learning, online learning, bandits, recommender systems and reinforcement learning. Throughout an emphasis is placed on mathematical rigor.', 'Machine Learning', NULL),
(16, 'CMSC737', 'Fundamentals of Software Testing', 'Examine fundamental software testing and related program analysis techniques. In particular, the important phases of testing will be reviewed, emphasizing th significance of each phase when testing different types of software. Concepts include: test generation, oracles, prioritization and coverage, regression and mutation testing, and program analysis.', NULL, NULL),
(16, 'CMSC751', 'Parallel Algorithms', 'A presentation of the theory of parallel computers and parallel processing. Models of parallel processing and the relationships between these models. Techniques for the design and analysis of efficient parallel algorithms including parallel prefix, searching, sorting, graph problems, and algebraic problems. Theoretical limits of parallelism, inherently sequential problems, and the theory of P-completeness.', 'Graphs', NULL),
(16, 'CMSC754', 'Computational Geometry', 'Introduction to algorithms and data structures for computational problems in discrete geometry (for points, lines, and polygons) primarily in two and three dimensions. Topics include triangulations and planar subdivisions, geometric search and intersection, convex hulls, Voronoi diagrams, Delaunay triangulations, line arrangements, visibility, and motion planning.', NULL, NULL),
(16, 'CMSC764', 'Advanced Numerical Optimization', 'Modern numerical methods for solving uncontrained and constrained nonlinear optimization problems in finite dimensions. Design of computational algorithms and the analysis of their properties.', 'Optimization', NULL),
(16, 'CMSC773', 'Computational Linguistics II', 'Natural language processing with a focus on corpus-based statistical techniques. Topics inlcude: stochastic language modeling, smoothing, noisy channel models, probabilistic grammars and parsing; lexical acquisition, similarity-based methods, word sense disambiguation, statistical methods in NLP applications; system evaluation.', 'Natural Language Processing', NULL),
(16, 'CMSC798', 'Graduate Seminar in Computer Science', NULL, 'CS', NULL),
(16, 'CMSC798A', 'Graduate Seminar in Computer Science', NULL, 'CS', NULL),
(16, 'CMSC798E', 'Graduate Seminar in Computer Science', NULL, 'CS', NULL),
(16, 'CMSC798F', 'Graduate Seminar in Computer Science; How to Conduct Great Research', NULL, 'Research', NULL),
(16, 'CMSC799', 'Master''s Thesis Research', NULL, 'Research', NULL),
(16, 'CMSC818', 'Advanced Topics in Computer Systems', NULL, NULL, NULL),
(16, 'CMSC818A', 'Advanced Topics in Computer Systems; Advanced Topics in Computer Systems', NULL, NULL, NULL),
(16, 'CMSC818D', 'Advanced Topics in Computer Systems; Human Factors in Security and Privacy', NULL, 'Security', NULL),
(16, 'CMSC818E', 'Advanced Topics in Computer Systems; Distributed and Cloud-Based Storage System', NULL, 'Distributed Applications', NULL),
(16, 'CMSC818G', 'Advanced Topics in Computer Systems; Information-Centric Design of Systems', NULL, NULL, NULL),
(16, 'CMSC828', 'Advanced Topics in Information Processing', NULL, NULL, NULL),
(16, 'CMSC828A', 'Advanced Topics in Information Processing', NULL, NULL, NULL),
(16, 'CMSC828C', 'Advanced Topics in Information Processing; Logic and Artificial Intelligence', NULL, 'Artificial Intelligence', NULL),
(16, 'CMSC828E', 'Advanced Topics in Information Processing; From Data to Insights', NULL, NULL, NULL),
(16, 'CMSC828G', 'Advanced Topics in Information Processing; Image Understanding', NULL, NULL, NULL),
(16, 'CMSC828K', 'Advanced Topics in Information Processing; Robotics and Perception', NULL, NULL, NULL),
(16, 'CMSC838', 'Advanced Topics in Programming Languages', NULL, NULL, NULL),
(16, 'CMSC838A', 'Advanced Topics in Programming Languages', NULL, NULL, NULL),
(16, 'CMSC838G', 'Advanced Topics in Programming Languages; Software Security', NULL, 'Security', NULL),
(16, 'CMSC858', 'Advanced Topics in Theory of Computing', NULL, NULL, NULL),
(16, 'CMSC858A', 'Advanced Topics in Theory of Computing', NULL, NULL, NULL),
(16, 'CMSC858F', 'Advanced Topics in Theory of Computing; Network Design', NULL, NULL, NULL),
(16, 'CMSC858K', 'Advanced Topics in Theory of Computing; Introduction to Quantum Information Processing', NULL, NULL, NULL),
(16, 'CMSC858X', 'Advanced Topics in Theory of Computing; Biological Network Analysis', NULL, NULL, NULL),
(16, 'CMSC878', 'Advanced Topics in Numerical Methods; Fast Multipole Methods: Fundamentals and Applications', NULL, 'Embedded Systems', NULL),
(16, 'CMSC878A', 'Advanced Topics in Numerical Methods', NULL, NULL, NULL),
(16, 'CMSC898', 'Pre-Candidacy Research', NULL, 'Research', NULL),
(16, 'CMSC899', 'Doctoral Dissertation Research', NULL, 'Research', NULL),
(17, '151030600L', 'Visualization, Simulation and Interaction - Virtual Reality I', 'Technology of Virtual Reality. Human factors, Creation of virtual worlds, Lighting models, Display- and acoustic- systems, Tracking, Haptic/tactile interaction, Motion platforms, Virtual prototypes, Data exchange, VR Complete systems, Augmented reality, Collaboration systems; VR and Design; Implementation of the VR in the industry; Human Computer Interfaces (HCI).', NULL, NULL),
(17, '151053200L', 'Nonlinear Dynamics and Chaos I', 'Basic facts about nonlinear systems; stability and near-equilibrium dynamics; bifurcations; dynamical systems on the plane; non-autonomous dynamical systems; chaotic dynamics.', NULL, NULL),
(17, '151053400L', 'Advanced Dynamics', 'Lagrangian dynamics - Principle of virtual work and virtual power - holonomic and non holonomic contraints - 3D rigid body dynamics - equilibrium - linearization - stability - vibrations - frequency response', NULL, NULL),
(17, '151056600L', 'Recursive Estimation', 'Estimation of the state of a dynamic system based on a model and observations in a computationally efficient way.', NULL, NULL),
(17, '151060700L', 'Optimal & Learning Control for Autonomous Robots', 'The students will learn the fundamentals of optimal and learning control. They will learn how these fundamental ideas can be applied to real world problems encountered in autonomous and articulated robots.', NULL, NULL),
(17, '151063000L', 'Nanorobotics', 'Nanorobotics is an interdisciplinary field that includes topics from nanotechnology and robotics. The aim of this course is to expose students to the fundamental and essential aspects of this emerging field.', NULL, NULL),
(17, '151064100L', 'Introduction to Robotics and Mechatronics', 'The aim of this lecture is to expose students to the fundamentals of mechatronic and robotic systems. Over the course of these lectures, topics will include how to interface a computer with the real world, different types of sensors and their use, different types of actuators and their use.', NULL, NULL),
(17, '151085400L', 'Autonomous Mobile Robots', 'The objective of this course is to provide the basics required to develop autonomous mobile robots and systems. Main emphasis is put on mobile robot locomotion and kinematics, envionmen perception, and probabilistic environment modeling, localizatoin, mapping and navigation. Theory will be deepened by exercises with small mobile robots and discussed accross application examples.', NULL, NULL),
(17, '151090600L', 'Frontiers in Energy Research', 'Doctoral students at ETH Zurich working in the broad area of energy present their research to their colleagues, to their advisors and to the scientific community.', 'Research', NULL),
(17, '151100100L', 'Master''s Thesis Mechanical Engineering', 'Master''s programs are concluded by the master''s thesis. The thesis is aimed at enhancing the student''s capability to work independently toward the solution of a theoretical or applied problem. The subject of the master''s thesis, as well as the project plan and roadmap, are proposed by the tutor and further elaborated with the student.', NULL, NULL),
(17, '151100500L', 'Master''s Thesis Process Engineering', 'Master''s programs are concluded by the master''s thesis. The thesis is aimed at enhancing the student''s capability to work independently toward the solution of a theoretical or applied problem. The subject of the master''s thesis, as well as the project plan and roadmap, are proposed by the tutor and further elaborated with the student.', NULL, NULL),
(17, '151100600L', 'Master''s Thesis Micro- and Nanosystems', 'Master''s programs are concluded by the master''s thesis. The thesis is aimed at enhancing the student''s capability to work independently toward the solution of a theoretical or applied problem. The subject of the master''s thesis, as well as the project plan and roadmap, are proposed by the tutor and further elaborated with the student.', NULL, NULL),
(17, '151100900L', 'Master''s Thesis Nuclear Engineering', 'Master''s programs are concluded by the master''s thesis. The thesis is aimed at enhancing the student''s capability to work independently toward the solution of a theoretical or applied problem. The subject of the master''s thesis, as well as the project plan and roadmap, are proposed by the tutor and further elaborated with the student.', NULL, NULL),
(17, '151101400L', 'Semester Project Robotics, Systems and Control', 'The semester project is designed to train the students in the solution of specific engineering problems. This makes use of the technical and social skills acquired during the master''s program. Tutors propose the subject of the project, elaborate the project plan, and define the roadmap together with their students, as well as monitor the overall execution.', NULL, NULL),
(17, '151101500L', 'Industrial Internship Robotics, Systems and Control', 'The main objective of the 12-week internship is to expose master''s students to the work environment in an engineering company or in a research lab outside of the ETH domain. During this period, students have the opportunity to be involved in on-going projects at the host institution.', 'Research', NULL),
(17, '151101600L', 'Master''s Thesis Robotics, Systems and Control', 'Master''s programs are concluded by the master''s thesis. The thesis is aimed at enhancing the student''s capability to work independently toward the solution of a theoretical or applied problem. The subject of the master''s thesis, as well as the project plan and roadmap, are proposed by the tutor and further elaborated with the student.', NULL, NULL),
(17, '151111500L', 'Aircraft Aerodynamics and Flight Mechanics', 'Equations of motion. Aircraft flight perfomance, flight envelope. Aircraft static stability and control, longituadinal and lateral stbility. Dynamic longitudinal and lateral stability. Flight test. Wind tunnel test.', NULL, NULL),
(17, '227012400L', 'Embedded Systems', 'Computer systems for controlling industrial devices are called embedded systems (ES). Specifically the following topics will be covered: Design methodology, software design, real-time scheduling and operating systems, architectures, distributed embedded systems, low-power and low-energy design, architecture synthesis.', 'Embedded Systems', NULL),
(17, '227012600L', 'Advanced Topics in Networked Embedded Systems', 'The seminar will cover advanced topics in networked embedded systems. A particular focus are cyber-physical systems and sensor networks in various application domains.', 'Embedded Systems', NULL),
(17, '227020700L', 'Nonlinear Systems and Control', 'Introduce students to the area of nonlinear systems and their control. Familiarize them with tools for modelling and analysis of nonlinear systems. Provide an overview of the various nonlinear controller design methods.', NULL, NULL),
(17, '227021600L', 'Control Systems II', 'Introduction to basic and advanced concepts of modern feedback control.', NULL, NULL),
(17, '227022100L', 'Model Predictive Control', 'System complexity and demanding performance render traditional control inadequate. Applications from the process industry to the communications sector increasingly use MPC. The last years saw tremendous progress in this interdisciplinary area. The course first gives an overview of basic concepts and then uses them to derive MPC algorithms. There are exercises and invited speakers from industry.', NULL, NULL),
(17, '227022400L', 'Stochastic Systems', 'Probability. Stochastic processes. Stochastic differential equations. Ito. Kalman filters. St Stochastic optimal control. Applications in financial engineering.', NULL, NULL),
(17, '227024800L', 'Power Electronic Systems II', 'This course details structures, operating ranges, and control concepts of modern power electronic systems to provide a deeper understanding of power electronic circuits and power components. Most recent concepts of high switching frequency AC/DC converters and AC/AC matrix inverters are presented. Simulation exercises, implemented in GeckoCIRCUITS, are used to consolidate the concepts discussed.', NULL, NULL),
(17, '227052800L', 'Power System Dynamics, Control and Operation', 'Dynamic processes in power systems, load-frequency control, voltage control, stability, line protection.', NULL, NULL),
(17, '227052900L', 'Liberalized Electric Power Systems and Smart Grids', 'This class begins by discussing the paths from monopolies towards liberalized electric power markets with the grid as natural monopoly. After going through detailed mainly transmission grid constrained market models, SmartGrids models and approaches are introduced for the future distribution grid.', NULL, NULL),
(17, '227055800L', 'Principles of Distributed Computing', 'We study the fundamental issues underlying the design of distributed systems: communication, coordination, fault-tolerance, locality, parallelism, self-organization, symmetry breaking, synchronization, uncertainty. We explore essential algorithmic ideas and lower bound techniques.', 'Distributed Applications', NULL),
(17, '227055900L', 'Seminar in Distributed Computing', 'In this seminar participating students present and discuss recent research papers in the area of distributed computing. The seminar consists of algorithmic as well as systems papers in distributed computing theory, peer-to-peer computing, ad hoc and sensor networking, or multi-core computing.', 'Distributed Applications', NULL),
(17, '227069007L', 'Advanced Topics in Control (Spring 2016)', 'This class will introduce students to advanced, research level topics in the area of automatic control. Coverage varies from semester to semester, repetition for credit is possible, upon consent of the instructor. During the Spring Semester 2016 the class will concentrate on distributed systems and control.', 'Research', NULL),
(17, '227069400L', 'Game Theory and Control', 'Game theory is the study of strategic decision making, and was used to solve problems in economics by John Nash (A Beautiful Mind) and others. We study concepts and methods in game theory, and show how these can be used to solve optimal control problems. The course covers noncooperative dynamic games and Nash equilibria, and emphasises their use in control applications.', 'Game Design', NULL),
(17, '227069600L', 'Predictive Control of Power Electronics Systems', 'Bridging the gap between modern control methods and power electronics, this course focuses on the most commonly used predictive control methods applied to power electronics systems. This includes emerging model predictive control methods both without and with a modulator, as well as more traditionally used predictive methods, such as time-optimal control and deadbeat control.', NULL, NULL),
(17, '227094510L', 'Cell and Molecular Biology for Engineers II', 'The course gives an introduction into cellular and molecular biology, specifically for students with a background in engineering. The focus will be on the basic organization of eukaryotic cells, molecular mechanisms and cellular functions. Textbook knowledge will be combined with results from recent research and technological innovations in biology.', 'Research', NULL),
(17, '227103400L', 'Computational Vision', 'This course focuses on neural computations that underlie visual perception. We study how visual signals are processed in the retina, LGN and visual cortex. We study the morpholgy and functional architecture of cortical circuits responsible for pattern, motion, color, and three-dimensional vision.', NULL, NULL),
(17, '227150100L', 'Master''s Thesis', 'The Master Program finishes with a 6-months Master Thesis which is directed by a Professor of the Department or a Professor of another Department who is associated with the D-ITET. Students gain the ability to conduct independent scientific research on a specific research problem.', 'Research', NULL),
(17, '251010000L', 'Computer Science Colloquium', 'Invited talks on the entire spectrum of Computer Science. External guests are welcome. A detailed program is published at the beginning of every semester.', 'CS', NULL),
(17, '252000200L', 'Data Structures and Algorithms', 'This course is about fundamental algorithm design paradigms (such as induction, divide-and-conquer, backtracking, dynamic programming), classic algorithmic problems (such as sorting and searching), and data structures (such as lists, hashing, search trees). The connection between algorithms and data structures is explained for geometric and graph problems.', 'Graphs', NULL),
(17, '2520002AAL', 'Data Structures and Algorithms', 'This course is about fundamental algorithm design paradigms (such as induction, divide-and-conquer, backtracking, dynamic programming), classic algorithmic problems (such as sorting and searching), and data structures (such as lists, hashing, search trees). The connection between algorithms and data structures is explained for geometric and graph problems.', 'Graphs', NULL),
(17, '252001400L', 'Digital Circuits', 'The class provides an introduction to the design of digital circuitry. The class covers the basics of the technical foundations of gates. An introduction to hardware description languages and their use in the design process follows.', NULL, NULL),
(17, '252002400L', 'Parallel Programming', 'Introduction to parallel programming: deterministic and non-deterministic programs, models for parallel computation, synchronization, communication, and fairness.', NULL, NULL),
(17, '252005500L', 'Information Theory', 'The course covers the fundamental concepts of Shannon''s information theory. The most important topics are: Entropy, information, data compression, channel coding, codes.', NULL, NULL),
(17, '252005800L', 'Formal Methods and Functional Programming', 'In this course, participants will learn about new ways of specifying, reasoning about, and developing programs and computer systems. The first half will focus on using functional programs to express and reason about computation. The second half presents methods for developing and verifying programs represented as discrete transition systems.', NULL, NULL),
(17, '252006200L', 'Operating Systems and Networks', 'This is an introductory course on computer networks and operating systems, with a particular focus on networking in the Internet and monolithic operating systems like Linux and Windows. Network and OS programming at different levels is an integral part of the course.', 'Networking', NULL),
(17, '252006300L', 'Data Modelling and Databases', 'Data modelling (ER and UML class diagrams), relational data model, relational design theory (normal forms), SQL, database integrity, security, transactions and data warehousing (OLAP).', 'Databases', NULL),
(17, '252021100L', 'Information Security', 'This course provides an introduction to Information Security. The focus is on fundamental concepts and models, basic cryptography, protocols and system security, and privacy and data protection. While the emphasis is on foundations, case studies will be given that examine different realizations of these ideas in practice.', 'Graphs', NULL),
(17, '252021500L', 'Information Systems', 'The course goes beyond relational technologies to examine the range of different database technologies available today. It also introduces the basic concepts of information retrieval and discusses the design decisions behind modern information system architectures.', NULL, NULL),
(17, '252021600L', 'Software Architecture and Engineering', 'This course introduces both theoretical and applied aspects of software engineering and analysis. It covers: - Software Architecture - Informal and formal Modeling - Design Patterns - Code Refactoring - Program Testing - Dynamic Program Analysis - Static Program Analysis', NULL, NULL),
(17, '252022000L', 'Learning and Intelligent Systems', 'The course introduces the foudations of learning and making predictions based on data.', NULL, NULL),
(17, '252023200L', 'Software Design', 'The course Software Design presents and discusses design patterns regularly used to solve problems in object oriented design and object oriented programming. The presented patterns are illustrated with examples from the Java libraries and are applied in a project.', 'Object Oriented Programming', NULL),
(17, '252031200L', 'Ubiquitous Computing', 'Ubiquitous computing integrates tiny wirelessly connected computers and sensors into the environment and everyday objects. Main topics: The vision of ubiquitous computing, trends in technology, smart cards, RFID, Personal Area Networks (Bluetooth), sensor networks, location awareness, privacy and security, application areas, economic and social impact.', 'Networking', NULL),
(17, '252035500L', 'Object Databases', 'The course examines the principles and techniques of providing data management in object-oriented programming environments. After introducing the basics of object storage and management, we will cover semantic object models and their implementation. Finally, we discuss advanced data management services such as version models for temporal and engineering databases and for software configuration.', 'Databases', NULL),
(17, '252037400L', 'Web Engineering', 'The course teaches students about the basic principles of web engineering by examining the various technologies used in modern web sites in detail together with the step-by-step processes used to develop state-of-the art web sites.', NULL, NULL),
(17, '252040700L', 'Cryptography Foundations', 'Fundamentals and applications of cryptography. Cryptography as a mathematical discipline: reductions, constructive cryptography paradigm, security proofs. The discussed primitives include cryptographic functions, pseudo-randomness, symmetric encryption and authentication, public-key encryption, key agreement, and digital signature schemes. Selected cryptanalytic techniques.', 'Graphs', NULL),
(17, '252040800L', 'Cryptographic Protocols', 'The course presents a selection of hot research topics in cryptography. The choice of topics varies and may include provable security, interactive proofs, zero-knowledge protocols, secret sharing, secure multi-party computation, e-voting, etc.', 'Graphs', NULL),
(17, '252049100L', 'Satisfiability of Boolean Formulas - Combinatorics and Algorithms', 'Basics (CNF, resolution), extremal properties (probabilistic method, derandomization, Local Lemma, partial satisfaction), 2-SAT algorithms (random walk, implication graph), NP-completeness (Cook-Levin), cube (facial structure, Kraft inequality, Hamming balls, covering codes), SAT algorithms (satisfiability coding lemma, Paturi-Pudlák-Zane, Hamming ball search, Schöning), constraint satisfaction.', 'Graphs', NULL),
(17, '252050000L', 'Bachelor''s Thesis', 'The Bachelor Programme concludes with the Bachelor Thesis. This project is supervised by a professor. Writing up the Bachelor Thesis encourages students to show independence and to produce structured work.', NULL, NULL),
(17, '252052600L', 'Statistical Learning Theory', 'The course covers advanced methods of statistical learning : PAC learning and statistical learning theory;variational methods and optimization, e.g., maximum entropy techniques, information bottleneck, deterministic and simulated annealing; clustering for vectorial, histogram and relational data; model selection; graphical models.', 'Graphs', NULL),
(17, '252053800L', 'Shape Modeling and Geometry Processing', 'This course covers some of the latest developments in geometric modeling and digital geometry processing. Topics include surface modeling based on triangle meshes, mesh generation, surface reconstruction, mesh fairing and simplification, discrete differential geometry and interactive shape editing.', NULL, NULL),
(17, '252057000L', 'Game Programming Laboratory', 'The goal of this course is the in-depth understanding of the technology and programming underlying computer games. Students gradually design and develop a computer game in small groups and get acquainted with the art of game programming.', 'Game Design', NULL);
INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(17, '252057900L', '3D Vision', 'The course covers camera models and calibration, feature tracking and matching, camera motion estimation via simultaneous localization and mapping (SLAM) and visual inertial odometry (VIO), epipolar and mult-view geometry, structure-from-motion, (multi-view) stereo, augmented reality, and image-based (re-)localization.', NULL, NULL),
(17, '252070000L', 'Internship', 'Internship in a computer science company, which is admitted by the CS Department at ETH. Minimum 10 weeks fulltime employment.', 'CS', NULL),
(17, '252080700L', 'Information Systems Laboratory', 'The purpose of this laboratory course is to practically explore modern techniques to build large-scale distributed information systems. Participants will work in groups of three or more students, and develop projects in several phases.', NULL, NULL),
(17, '252081700L', 'Distributed Systems Laboratory', 'This course involves the participation in a substantial development and/or evaluation project involving distributed systems technology. There are projects available in a wide range of areas: from web services to ubiquitous computing including as well wireless networks, ad-hoc networks, and distributed application on mobile phones.', 'Distributed Applications', NULL),
(17, '252082000L', 'Case Studies from Practice', 'The course is designed to provide students with an understanding of "real-life" challenges in business settings and teach them how to address these.', NULL, NULL),
(17, '252083200L', 'Informatics', 'The fundamental elements of imperative programming languages (variables, assignments, conditional statements, loops, procedures, pointers, recursion) are explained on the basis of C++. Simple data structures (lists, trees) and fundamental algorithms (searching, sorting) are discussed and implemented. Finally, the concept of object oriented programming is briefly explained.', 'Object Oriented Programming', NULL),
(17, '2520835AAL', 'Computer Science I', 'The course covers the fundamental concepts of computer programming with a focus on systematic algorithmic problem solving. Teached language is C++. No programming experience is required.', 'CS', NULL),
(17, '252083600L', 'Computer Science II', 'Introduction to basic problem solving methods, algorithms, and data structures. Topics: divide and conquer, recursion, sorting algorithms, backtracking, game tree search, data structures (lists, stacks, queues, binary trees), discrete simulation, concurrency. In the assignments and exercises, the programming language Java is used.', 'Game Design', NULL),
(17, '252084001L', 'Introductory Programming in MATLAB', 'The lecture "Introductory Programming in MATLAB" provides a basic knowledge about imperative programming. Additionally, the students learn how to apply imperative programming in modeling of domain specific systems.', NULL, 'matlab'),
(17, '252084200L', 'Introduction to Programming and Problem Solving', 'Introduction to programming in Java and to problem solving using standard algorithms and data structures.', NULL, NULL),
(17, '252084600L', 'Computer Science II', 'Together with the introductory course Informatics I this course provides the foundations of programming and databases. This course particularly covers algorithms and data structures and basics about design and implementation of databases. Programming language used in this course is Java.', 'CS', NULL),
(17, '252091200L', 'Experimental Computer Systems', 'This graduate seminar provides doctoral students in computer science a chance to discuss their research. Enrollement requires permission of the instructor. Credit units are granted only to active participants.', 'Research', NULL),
(17, '252092400L', 'OMS Case Study II', 'This doctoral seminar consists of a series of talks and discussions covering the history and foundations of OMS, related work and on-going OMS developments and applications.', NULL, NULL),
(17, '252092600L', 'Advanced Seminar on Distributed Systems', 'Latest Topics in the area of Distributed Systems will be discussed.', 'Distributed Applications', NULL),
(17, '252093200L', 'Seminar on Cryptography', 'Latest Topics in Cryptography will be discussed.', 'Graphs', NULL),
(17, '252093400L', 'Algorithms and Complexity (FS)', 'This seminar treats selected problems of current interest in the area of algorithms and complexity.', NULL, NULL),
(17, '252140300L', 'Introduction to Quantum Information Processing', 'Followed by an introduction to the basic principles of quantum physics, such as superposition, interference, or entanglement, a variety of subjects are treated: Quantum algorithms, teleportation, quantum communication complexity and "pseudo-telepathy", quantum cryptography, as well as the main concepts of quantum information theory.', 'Graphs', NULL),
(17, '252142400L', 'Models of Computation', 'This course surveys many different models of computation: Turing Machines, Cellular Automata, Finite State Machines, Graph Automata, Circuits, Tilings, Lambda Calculus, Fractran, Chemical Reaction Networks, Hopfield Networks, String Rewriting Systems, Tag Systems, Diophantine Equations, Register Machines, Primitive Recursive Functions, and more.', 'Graphs', NULL),
(17, '252300200L', 'Algorithms for Database Systems', 'Query processing, optimization, stream-based systems, distributed and parallel databases, non-standard databases.', 'Databases', NULL),
(17, '252300500L', 'Introduction to Natural Language Processing', 'This course presents an introduction to general topics and techniques used in natural language processing today, primarily focusing on statistical approaches. The course provides an overview of the primary areas of research in language processing as well as a detailed exploration of the models and techniques used both in research and in commercial natural language systems.', 'Natural Language Processing', NULL),
(17, '252310000L', 'Computer Supported Cooperative Work', 'Computer-Supported Cooperative Work (CSCW) is the study of how people work together using computer technology. It is a multi-disciplinary research field dealing with the social, theoretical, practical and technical aspects of collaboration and how the use of technology can affect groups, organisations and communities. The diversity of the CSCW field is reflected in the range of topics covered.', 'Object Oriented Programming', NULL),
(17, '252312500L', 'Principles of Interaction Design', 'The course allows students to explore user-centred design processes and to get hands-on experience in engineering interactive systems with a focus on multi-device environments.', NULL, NULL),
(17, '252360002L', 'Ubiquitous Computing Seminar', 'Seminar on various topics from the broader areas of Pervasive Computing, Ubiquitous Computing, Human Computer Interaction, and Distributed Systems.', NULL, NULL),
(17, '252410200L', 'Seminar on Randomized Algorithms and Probabilistic Methods', 'The aim of the seminar is to study papers which bring the students to the forefront of today''s research topics. This semester we will study selected papers of the conference Symposium on Discrete Algorithms (SODA16).', 'Research', NULL),
(17, '252420200L', 'Seminar in Theoretical Computer Science', 'Presentation of recent publications in theoretical computer science, including results by diploma, masters and doctoral candidates.', 'CS', NULL),
(17, '252422000L', 'A Taste of Research: Algorithms and Combinatorics', 'Students work together with lecturers on open problems in algorithms and combinatorics.', 'Research', NULL),
(17, '252430200L', 'Seminar Algorithmic Game Theory', 'In the seminar we will get familiar with the current original research in the area of algorithmic game theory by reading and presenting selected research papers in that area.', 'Game Design', NULL),
(17, '252480000L', 'Quantum Information and Cryptography', 'In this advanced seminar, various topics are treated in the intersection of quantum physics, information theory, and cryptography.', 'Graphs', NULL),
(17, '252481000L', 'ZISC Information Security Colloquium', 'Series of invited lectures about current topics in information security. Schedule according to announcement on the lecture web page.', 'Security', NULL),
(17, '252525100L', 'Computational Science', 'Class participants study and make a 40 minute presentation (in English) on fundamental papers of Computational Science. A preliminary discussion of the talk (structure, content, methodology) with the responsible professor is required. The talk has to be given in a way that the other seminar participants can understand it and learn from it. Participation throughout the semester is mandatory.', NULL, NULL),
(17, '252570400L', 'Advanced Methods in Computer Graphics', 'This seminar covers advanced topics in computer graphics with a focus on the latest research results. Topics include modeling, rendering, animation, physical simulation, computational photography, and others.', 'Graphs', NULL),
(17, '252570600L', 'Mathematical Foundations of Computer Graphics and Vision', 'This course presents the fundamental mathematical tools and concepts used in computer graphics and vision. Each theoretical topic is introduced in the context of practical vision or graphic problems, showcasing its importance in real-world applications.', 'Graphs', NULL),
(17, '262050000L', 'Lab Rotation in Experimental Biology', 'Flexible, short research project (lab rotation) with an emphasis on experimental biology.', 'Research', NULL),
(17, '262060000L', 'Lab Rotation in Computer Science', 'Flexible, short research project (lab rotation) with emphasis on computer science/theory.', 'Research', NULL),
(17, '262070000L', 'Lab Rotation in Bioinformatics', 'Flexible, short research project within the field of computational biology/bioinformatics.', 'Research', NULL),
(17, '262080000L', 'Master''s Thesis', 'The Master Thesis is the result of an independent scientific research and/or constructive development project in the chosen area of specialization.', 'Research', NULL),
(17, '262510000L', 'Protein Biophysics (University of Zurich)', 'The course includes a general introduction into protein structure and biophysics as well as into the usage of molecular dynamics simulations and other computational methods, protein structure and X-ray techniques, protein NMR for determining protein structure and dynamics as well as for folding studies and protein thermodynamics.', NULL, NULL),
(17, '262511000L', 'Protein Crystallography and Protein Structure Validation (University of Zurich)', 'The lecture introduces two methods for the structure determination of biological macromolecules and cellular components: X-ray crystallography and electron microscopy (EM).', 'Graphs', NULL),
(17, '263000800L', 'Computational Intelligence Lab', 'This laboratory course teaches fundamental concepts in computational science and machine learning based on matrix factorization. This method provides a powerful framework of numerical linear algebra that encompasses many important techniques, such as dimension reduction, clustering, combinatorial optimization and sparse coding.', 'Artificial Intelligence', NULL),
(17, '263060000L', 'Research in Computer Science', 'Independent project work under the supervision of a Computer Science Professor.', 'Research', NULL),
(17, '263080000L', 'Master''s Thesis', 'Independent project work supervised by a Computer Science professor. Duration 6 months.', 'CS', NULL),
(17, '263210000L', 'Research Topics in Software Engineering', 'This seminar introduces students to the latest research trends in programming languages and systems: - automated program analysis and synthesis techniques (e.g., new algorithms, combinations with machine learning) - applications of these techniques to challenges in systems, security, and others. More information: http://www.srl.inf.ethz.ch/rse2016.php', 'Machine Learning', NULL),
(17, '263230000L', 'How To Write Fast Numerical Code', 'This course introduces the student to the foundations and state-of-the-art techniques in developing high performance software for numerical functionality such as linear algebra and others. The focus is on optimizing for the memory hierarchy and for special instruction sets. Finally, the course will introduce the recent field of automatic performance tuning.', NULL, NULL),
(17, '263281000L', 'Advanced Compiler Design', 'This course covers advanced topics in compiler design: SSA intermediate representation and its use in optimization, just-in-time compilation, profile-based compilation, exception handling in modern programming languages.', 'Optimization', NULL),
(17, '263291000L', 'Program Analysis and Synthesis', 'This course covers modern automated program analysis and synthesis techniques, including: (i) core theoretical foundations, and (ii) applications of these foundations for solving useful practical challenges. The techniques are widely applicable and are increasingly being used in a wide range of areas (e.g., systems, networks, security, etc). More info: http://www.srl.inf.ethz.ch/pa.php', 'Networking', NULL),
(17, '263320000L', 'Advanced Topics in Information Retrieval and Natural Language Processing', 'The seminar will explore advanced topics in the areas of information retrieval and natural language processing.', 'Natural Language Processing', NULL),
(17, '263350100L', 'Advanced Computer Networks', 'This course covers a set of advanced topics in computer networks. The focus is on principles, architectures, and protocols used in modern networked systems, such as the Internet itself, wireless and mobile networks, and large-scale peer-to-peer systems.', 'Networking', NULL),
(17, '263370000L', 'User Interface Engineering', 'An in-depth introduction to the core concepts of post-desktop user interface engineering. Current topics in UI research, in particular non-desktop based interaction, mobile device interaction, augmented and mixed reality, and advanced sensor and output technologies.', 'Research', NULL),
(17, '263383000L', 'Software Defined Networking: The Data Centre Perspective', 'Software Defined Networks (SDN) is a change supported not only by research but also industry and redifens how traditional network management and configuration is been done.', 'Networking', NULL),
(17, '263420300L', 'Geometry: Combinatorics and Algorithms', 'This seminar is held once a year and complements the course Geometry: Combinatorics & Algorithms. Students of the seminar will present original research papers, some classic and some of them very recent. The seminar is a good preparation for a master, diploma, or semester thesis in the area.', 'Research', NULL),
(17, '263460000L', 'Formal Methods for Information Security', 'The course focuses on formal methods for the modelling and analysis of security protocols for critical systems, ranging from authentication protocols for network security to electronic voting protocols and online banking.', 'Security', NULL),
(17, '264580006L', 'Doctoral Seminar in Visual Computing (FS16)', 'This graduate seminar provides doctoral students in computer science a chance to read and discuss current research papers.', 'Research', NULL),
(17, '264581100L', 'Programming Systems Seminar', 'This graduate seminar provides doctoral students in computer science a chance to read and discuss current research papers. Enrollment requires permission of the instructors. Credit units are granted only to active participants.', 'Research', NULL),
(17, '264581200L', 'Writing for Publication in Computer Science (WPCS)', 'This short course is designed to help junior researchers in Computer Science develop the skills needed to write their first research articles.', 'Research', NULL),
(17, '271010200L', 'Teaching Internship Including Examination Lessons in Computer Science', 'Students apply the insights, abilities and skills they have acquired within the context of an educational institution. They observe 10 lessons and teach 20 lessons independently. Two of them are as assessed as Examination Lessons.', 'CS', NULL),
(17, '272010200L', 'Subject Didactics of Computer Science II', 'This course deals primarily with didactic aspects of computer science and its key contributions to general education nurturing the youths'' development of a unique and indispensable way of thinking while at the same time leading to their understanding of our world and to higher education entrance qualifications.', 'CS', NULL),
(17, '272010300L', 'Mentored Work Subject Didactics Computer Science A', 'In their mentored work on subject didactics, students put into practice the contents of the subject-didactics lectures and go into these in greater depth. Under supervision, they compile tuition materials that are conducive to learning and/or analyse and reflect on certain topics from a subject-based and pedagogical angle.', 'CS', NULL),
(17, '272010400L', 'Mentored Work Subject Didactics Computer Science B', 'In their mentored work on subject didactics, students put into practice the contents of the subject-didactics lectures and go into these in greater depth. Under supervision, they compile tuition materials that are conducive to learning and/or analyse and reflect on certain topics from a subject-based and pedagogical angle.', 'CS', NULL),
(17, '272020200L', 'Professional Exercises', 'In the course Professional Exercises the students achieve additional school-relevant experiences. The students carry out individually specified, practice related projects, in which they support, document or reflect on learning processes.', NULL, NULL),
(17, '272020300L', 'Teaching Internship in Computer Science', 'The teaching practice takes in 50 lessons: 30 are taught by the students, and the students sit in on 20 lessons. The teaching practice lasts 4-6 weeks. It gives students the opportunity to implement the contents of their specialist-subject, educational science and subject-didactics training in the classroom. Students also conduct work assignments in parallel to their teaching practice.', 'CS', NULL),
(17, '272020400L', 'Teaching Internship in Computer Science II', 'This is a supplement to the Teaching Internship required to obtain a Teaching Diploma in the corresponding subject. It is aimed at enlarging the already acquired teaching experience. Students observe 10 lessons and teach 15 lessons independently.', 'CS', NULL),
(17, '272020501L', 'Examination Lesson I in Computer Science', 'In the context of an examination lesson conducted and graded at a high school, the candidates provide evidence of the subject-matter-based and didactic skills they have acquired in the course of their training.', 'CS', NULL),
(17, '272020502L', 'Examination Lesson II in Computer Science', 'In the context of an examination lesson conducted and graded at a high school, the candidates provide evidence of the subject-matter-based and didactic skills they have acquired in the course of their training.', 'CS', NULL),
(17, '272030000L', 'Algorithmics for Hard Problems', 'This course unit looks into algorithmic approaches to the solving of hard problems. The seminar is accompanied by a comprehensive reflection upon the significance of the approaches presented for computer science tuition at high schools.', 'CS', NULL),
(17, '272030100L', 'Methods for Design of Random Systems', 'The students should get a deep understanding of the notion of randomness and its usefulness. Using basic elements probability theory and number theory the students will discover randomness as a source of efficiency in algorithmic. The goal is to teach the paradigms of design of randomized algorithms.', NULL, NULL),
(17, '272030200L', 'Approximation and Online Algorithms', 'This lecture deals with approximative algorithms for hard optimization problems and algorithmic approaches for solving online problems as well as the limits of these approaches.', 'Optimization', NULL),
(17, '272040000L', 'Mentored Work Specialised Courses in the Respective Subject with Educational Focus Computer Sc A', 'In the mentored work on their subject specialisation, students link high-school and university aspects of the subject, thus strengthening their teaching competence with regard to curriculum decisions and the future development of the tuition. They compile texts under supervision that are directly comprehensible to the targeted readers - generally specialist-subject teachers at high-school level.', NULL, NULL),
(17, '272040100L', 'Mentored Work Specialised Courses in the Respective Subject with Educational Focus Computer Sc B', 'In the mentored work on their subject specialisation, students link high-school and university aspects of the subject, thus strengthening their teaching competence with regard to curriculum decisions and the future development of the tuition. They compile texts under supervision that are directly comprehensible to the targeted readers - generally specialist-subject teachers at high-school level.', NULL, NULL),
(17, '363060000L', 'Master''s Thesis', 'In the Master Thesis students prove their ability to independent, structured and scientific working. The master''s thesis is supervised by the tutor and normally deals with a subject contained in the major fields. The research will be performed normally within a private company or at the ETH Zurich.', 'Research', NULL),
(17, '376121700L', 'Rehabilitation Engineering I: Motor Functions', '“Rehabilitation engineering” is the application of science and technology to ameliorate the handicaps of individuals with disabilities in order to reintegrate them into society. The goal of this lecture is to present classical and new rehabilitation engineering principles and examples applied to compensate or enhance especially motor deficits.', NULL, NULL),
(17, '401021200L', 'Analysis II', 'Multivariable differential and integral calculus, ordinary differential equations, implicit functions, constrained extrema, vector calculus.', NULL, NULL),
(17, '401067400L', 'Numerical Methods for Partial Differential Equations', 'Derivation, properties, and implementation of fundamental numerical methods for a few key partial differential equations: convection-diffusion, heat equation, wave equation, conservation laws. Implementation in Python in one dimension and in C++ in 2D.', NULL, NULL),
(17, '401068610L', 'High Performance Computing for Science and Engineering (HPCSE) for Engineers II', '', NULL, NULL),
(17, '401305205L', 'Graph Theory', 'Basic notions, . Trees, spanning trees, Caley formula, Vertex and edge connectivity, blocks, 2-connectivity, Maders theorem, Mengers theorem, Euleraing graphs, Hamilton cycle, Dirac theorem, Matchings, theorem of Hall, Konig, Tutte, Planar graph, Euler''s formula, Basic non-planar graphs, Graph colorings, greedy, brooks theorem, 5-colorings of planar graphs', 'Graphs', NULL),
(17, '401363200L', 'Computational Statistics', '"Computational Statistics" deals with modern methods of data analysis (aka "data science") for prediction and inference. An overview of existing methodology is provided and also by the exercises, the student is taught to choose among possible models and about their algorithms and to validate them using graphical methods and simulation based approaches.', 'Graphs', NULL),
(17, '401390311L', 'Geometric Integer Programming', 'Integer programming is the task of minimizing a linear function over all the integer points in a polyhedron. This lecture introduces the key concepts of an algorithmic theory for solving such problems.', NULL, NULL),
(17, '401390809L', 'Polyhedral Computation', 'Polyhedral computation deals with various computational problems associated with convex polyhedra in general dimension. Typical problems include the representation conversion problem (between halfspace and generator representations), the polytope volume computation, the construction of hyperplane arrangements and zonotopes, the Minkowski addition of convex polytopes.', NULL, NULL),
(17, '401490400L', 'Combinatorial Optimization', 'Combinatorial Optimization deals with efficiently finding a provably strong solution among a finite set of options. This course discusses key combinatorial structures and techniques to design efficient algorithms for combinatorial optimization problems. We put a strong emphasis on polyhedral methods, which proved to be a powerful and unifying tool throughout combinatorial optimization.', 'Optimization', NULL),
(17, '401590000L', 'Optimization Seminar', 'Lectures on current topics in optimization.', 'Optimization', NULL),
(17, '402003800L', 'Physics', 'Introduction to physics with emphasis on mechanics, relativity, thermodynamics und electromagnetism. Demonstrations, examples and exercises illustrate the basic concepts.', NULL, NULL),
(17, '4060242AAL', 'Analysis II', 'Mathematical tools of an engineer', NULL, NULL),
(17, '4060603AAL', 'Stochastics (Probability and Statistics)', 'Introduction to basic methods and fundamental concepts of statistics and probability theory for non-mathematicians. The concepts are presented on the basis of some descriptive examples. The course will be based on the book "Statistics for research" by S. Dowdy et.al. and on the book "Introductory Statistics with R" by P. Dalgaard.', 'Statistics', NULL),
(17, '551030701L', 'Biomolecular Structure and Mechanism II: Large Cellular Machines', 'This Concept Course will cover advanced topics in Molecular Biology with particular emphasis on the structure and function of large cellular assemblies.', NULL, NULL),
(17, '551031400L', 'Microbiology (Part II)', 'Advanced lecture class providing a broad overview on bacterial cell structure, genetics, metabolism, symbiosis and pathogenesis.', NULL, NULL),
(17, '551031800L', 'Immunology II', 'Introduction into the cellular and molecular basis of the immune system and immune responses against diverse pathogens, tumors, transplants, and self (autoimmunity)', NULL, NULL),
(17, '551036400L', 'Functional Genomics', 'Functional genomics is key to understanding the dynamic aspects of genome function and regulation. Functional genomics approaches use the wealth of data produced by large-scale DNA sequencing, gene expression profiling, proteomics and metabolomics. Today functional genomics is becoming increasingly important for the generation and interpretation of quantitative biological data.', NULL, NULL),
(17, '636000200L', 'Synthetic Biology I', 'Theoretical & practical introduction into the design of dynamic biological systems at different levels of abstraction, ranging from biological fundamentals of systems design (introduction to bacterial gene regulation, elements of transcriptional & translational control, advanced genetic engineering) to engineering design principles (standards, abstractions) mathematical modelling & systems design.', NULL, NULL),
(17, '636070200L', 'Statistical Models in Computational Biology', 'The course offers an introduction to graphical models and their application to complex biological systems. Graphical models combine a statistical methodology with efficient algorithms for inference in settings of high dimension and uncertainty. The unifying graphical model framework is developed and used to examine several classical and topical computational biology methods.', 'Graphs', NULL),
(17, '636070400L', 'Computational Biology and Bioinformatics Seminar', 'Computational biology and bioinformatics aim at an understanding of living systems through computation. The seminar combines student presentations and current research project presentations to review the rapidly developing field from a computer science perspective. Areas: DNA sequence analysis, proteomics, optimization and bio-inspired computing, and systems modeling, simulation and analysis.', 'Optimization', NULL),
(17, '636070600L', 'Spatio-Temporal Modelling in Biology', 'This course focuses on modeling spatio-temporal problems in biology, in particular on the cell and tissue level. A wide range of mathematical techniques will be presented as part of the course, including concepts from non-linear dynamics (ODE and PDE models), stochastic techniques (SDE, Master equations, Monte Carlo simulations), and thermodynamic descriptions.', NULL, NULL),
(17, '701170800L', 'Infectious Disease Dynamics', 'This course introduces into current research on the population biology of infectious diseases. The course discusses the most important mathematical tools and their application to relevant diseases of human, natural or managed populations.', 'Research', NULL),
(17, '851010101L', 'Introduction to Practical Philosophy', 'Practical philosophy deals in a descriptive and evaluative way with the realm of the practical, that is, with action, practices, norms of action, and values held by people and societies. Ethics and political philosophy are branches of practical philosophy. This introductory course will treat some of the main questions and introduce students to the thinking of central figures in the field.', NULL, NULL),
(17, '851023200L', 'Social Psychology of Effective Teamwork', 'The lecture covers the main topics of social interactions in groups as a basis for effective teamwork in organisations: group; group structure; group dynamics and performance; group analysis; examples of applications.', NULL, NULL),
(17, '851023601L', 'Introduction to Vocational Pedagogy, Part 1 (University of Zurich)', 'Vocational education, i.e. vocational and economic education, is a sub-discipline of educational science which deals with the integration of young people in the world of work. The lectures cover the conditions associated with its historical development, concepts and models, and also more recent research results.', 'Research', NULL),
(17, '851023602L', 'Introduction to Vocational Pedagogy, Part 2 (University of Zurich)', 'This module focuses on the Swiss system of vocational education with the tuition locations of school, company and a third location (e.g. intercompany learning centres). Alongside alternative forms of vocational education, the Swiss dual system features at the centre of the module. Going beyond the fundamentals, current approaches, developments and endeavours to achieve a reform are covered.', NULL, NULL),
(17, '851023801L', 'Support and Diagnosis of Knowledge Acquisition Processes (EW3)', 'In this seminar students learn advanced techniques to support and to diagnose knowledge acquisition processes in school.', NULL, NULL),
(17, '851023802L', 'Support and Diagnosis of Skills Acquisition Processes in Physical Education (EW3 Sport)', 'In this seminar students learn advanced techniques to support and to diagnose motor skill acquisition processes in physical education (sport). Students will also be introduced practically to specific psychomotor techniques and self-regulation strategies.', NULL, NULL),
(17, '851024001L', 'Designing Learning Environments for School (EW2 TD)', 'Teaching is a complex skill. The lecture comprises (a) presentations about the theoretical background of this skill, (b) discussions of practical aspects, and (c) practical exercises.', NULL, NULL),
(17, '851024017L', 'Designing Learning Environments for School (EW2 TC)', 'Teaching is a complex skill. The lecture comprises (a) presentations about the theoretical background of this skill, (b) discussions of practical aspects, and (c) practical exercises.', NULL, NULL),
(17, '851024019L', 'Effective Learning Environments (EW 5)', 'Das Buch "Lernwirksam unterrichten" (Felten/Stern) wurde durchgearbeitet und die Fragen auf dem Netz wurden beantwortet (http://www.ifvll.ethz.ch/education/ew5). In einer gern kurz nach der Prüfungslektion einzeln oder in Kleingruppen stattfindenden einstündigen Besprechung mit Elsbeth Stern werden für das Unterrichten relevante lernpsychologische Erkenntnisse diskutiert.', NULL, NULL),
(17, '851024020L', 'The Concept of "Flow" and Its Significance for Physical Education in Schools', 'Das von Csikszentmihalyi entworfene Flow-Konzept bietet ein interessantes Rahmenmodell für einen motivierten, erlebnisorientierten und lernwirksamen Sportunterricht in der Schule. Im Rahmen der Lehrveranstaltungen werden ausgewählte Aspekte (u.a. Flowerleben, Motivation, Aufmerksamkeitslenkung, Feedback) diskutiert und in die eigene Bewegungspraxis im Lehr-Lern-Kontext umgesetzt.', NULL, NULL),
(17, '851024021L', 'Teaching Science as Inquiry', 'Teaching science as inquiry is the pedagogy of engaging students in designing and carrying out investigations. By engaging in these investigations, students are learning about the nature of scientific inquiry in addition to learning science subject matter. Related to learning about the nature of scientific inquiry, there is overlap with the learner developing understandings of nature of science.', NULL, NULL),
(17, '851024023L', 'Follow Up Course TC', 'The follow-up qualification of the Teaching Certificate (TC) includes vocational education required by the "Berufsbildungsverantwortliche des Staatssekretariats für Bildung, Forschung und Innovation" (SBFI). Students who enrolled for the Teaching Certificate before Fall semester 2011 and who passed all courses of this study program, are allowed to work in schools specialized on vocational educatio', NULL, NULL),
(17, '851024201L', 'Coping with Psychosocial Demands of Teaching (EW4)', 'In this class, students will learn concepts and skills for coping with psychosocial demands of teaching', NULL, NULL),
(17, '851024202L', 'Outdoor Education: Concepts and Practice (EW4)', 'In this course we introduce and discuss concepts of leadership in outdoor education and put them into practice in various outdoor situations and events.', NULL, NULL),
(17, '851024203L', 'Introduction to General Pedagogy', 'The basics of educational science and the field of activity of the school are conveyed in as much as they are of relevance to the field of activity of the teachers. Basic knowledge is taught methodically by the lecturers which is further deepened by the reading of selected texts and corresponding work assignments in individual and small groups.', NULL, NULL),
(17, '851024205L', 'How to Develop and to Implement Teaching Projects in Outdoor Education', 'Topics in natural Science are frequently tought outside the classroom. Along the River Reuss, students develop outdoor teaching-projects in their subjects and combine them with other subjects. We also give instruction on principles of organisation of outdoor projects and leadership in school: Students are involved in the practical realization of the camp and programme alongside the Reuss.', NULL, NULL),
(17, '851024206L', 'Cognitively Activating Instructions in MINT Subjects', 'This seminar focuses on teaching units in chemistry, physics and mathematics that have been developed at the MINT Learning Center of the ETH Zurich. In the first meeting, the mission of the MINT Learning Center will be communicated. Furthermore, in groups of two, the students will intensively work on, refine and optimize a teaching unit following a goal set in advance.', NULL, NULL),
(17, '851024207L', 'Human Intelligence', 'The focus will be on the book "Intelligenz: Grosse Unterschiede und ihre Folgen" by Stern and Neubauer. Participation at the first meeting is obligatory. It is required that all participants read the complete book. Furthermore, in two meetings of 90 minutes, concept papers developed in small groups (5 - 10 students) will be discussed.', 'Artificial Intelligence', NULL),
(17, '851024208L', 'Research Methods in Educational Science', 'Literature from learning sciences will be read and discussed. Research methods will be in focus. At the first meeting all participants will be allocated to working groups and two further meetings will be set up with the groups. In the small groups students will write critical short essays about the read literature. The essays will be presented and discussed in the plenum at the third meeting.', 'Research', NULL),
(17, '851024209L', 'Student Research Projects: Practical Research on Learning and Instruction', 'In teams, participants in this seminar conduct their own research project. Each team is advised by one of the researchers serving as lecturers in this course. Basic conceptual and methodological issues are the topic of a series of plenary meetings; however, the major part of the work is done in small-group meetings with the advising researcher, and in self-directed research projects.', 'Research', NULL),
(17, '851024210L', 'Principles of Science and Sustainability Education (University of Zurich)', 'This lecture introduces the empirical, theoretical and political foundations of science teaching. Central aspects will be science literacy and competencies, structure of science teaching, educational reconstruction of science phenomena, genderaspects and sustainable development in science teaching.', NULL, NULL),
(17, '851025003L', 'Teaching, Learning and Assessing Scientific Inquiry and Nature of Science', 'This seminar will help to develop an understanding of the research on the teaching, learning and assessment of nature of science and scientific inquiry. There will be a review of the literature. Classroom tested approaches to assess students'' learning will be explored. Participants will develop a variety of models for teaching students about nature of science and scientific inquiry.', 'Research', NULL),
(17, '851058514L', 'Evaluation Research', 'The course will provide an overview on different kinds of evaluation in education, especially higher education (e. g., course evaluation, study programme evaluation, peer review, multi-stage evaluation procedures). The course will focus on the reliability, fairness, and validity of the different kind of evaluation procedures.', 'Research', NULL),
(17, '851074000L', 'Internet Architecture & Policy', 'This course examines and critiques the design of the Internet, with a focus on the connection between the engineering features and principles of the network and the legal, economic, and political concerns which have followed its evolution.', NULL, NULL),
(18, '234106', 'Introduction to Computer Science R', NULL, 'CS', NULL),
(18, '234107', 'Numerical Analysis', NULL, NULL, NULL),
(18, '234111', 'Introduction to Computer Science', NULL, 'CS', NULL),
(18, '234112', 'Introduction to Computer - C', NULL, NULL, NULL),
(18, '234114', 'Introduction to Computer Science', NULL, 'CS', NULL),
(18, '234117', 'Introduction to computer science H', NULL, 'CS', NULL),
(18, '234118', 'Computer Organization and Programming', NULL, NULL, NULL),
(18, '234122', 'Introduction to Systems Programming', NULL, NULL, NULL),
(18, '234123', 'Operating Systems', NULL, 'Operating Systems', NULL),
(18, '234127', 'Introduction to computing with MATLAB', NULL, NULL, 'matlab'),
(18, '234141', 'Combinatorics for CS', NULL, NULL, NULL),
(18, '234145', 'Digital Systems', NULL, NULL, NULL),
(18, '234218', 'Data Structures 1', NULL, NULL, NULL),
(18, '234247', 'Algorithms 1', NULL, NULL, NULL),
(18, '234262', 'Logic Design', NULL, NULL, NULL),
(18, '234267', 'Digital Computers Structure (MAMAS)', NULL, NULL, NULL),
(18, '234270', 'Software Project Management', NULL, NULL, NULL),
(18, '234293', 'Logic and set theory for CS', NULL, NULL, NULL),
(18, '234301', 'Project in Data Processing H', NULL, NULL, NULL),
(18, '234311', 'Yearly Project in Software Engineering-Stage A', NULL, NULL, NULL),
(18, '234312', 'Yearly Project in Software Engineering-Stage B', NULL, NULL, NULL),
(18, '234313', 'Industrial Project', NULL, NULL, NULL),
(18, '234319', 'Programming Languages', NULL, NULL, NULL),
(18, '234322', 'Information Storage Systems', NULL, NULL, NULL),
(18, '234325', 'Computer Graphics', NULL, 'Graphs', NULL),
(18, '234326', 'Project in Computer Graphics H', NULL, 'Graphs', NULL),
(18, '234329', 'Project in Image Processing and Analysis', NULL, NULL, NULL),
(18, '234900', 'Workshop in Competitive Programming', NULL, NULL, NULL),
(18, '236268', 'Constructive Computer Architecture', NULL, 'Computer Architecture', NULL),
(18, '236299', 'Intro. to Natural Language Processing', NULL, 'Natural Language Processing', NULL),
(18, '236303', 'Project in natural language processing', NULL, 'Natural Language Processing', NULL),
(18, '236304', 'Logic for computer science 2', NULL, 'CS', NULL),
(18, '236309', 'Introduction to Coding Theory', NULL, NULL, NULL),
(18, '236313', 'Complexity Theory', NULL, NULL, NULL),
(18, '236315', 'Algebraic Methods in Computer Science', NULL, 'CS', NULL),
(18, '236321', 'Software Engineering Methods', NULL, NULL, NULL),
(18, '236323', 'Data Processing Laboratory', NULL, NULL, NULL),
(18, '236327', 'Signal and Image Processing by Computer', NULL, NULL, NULL),
(18, '236329', 'Digital Geometry Processing', NULL, NULL, NULL),
(18, '236330', 'Introduction to optimization', NULL, 'Optimization', NULL),
(18, '236331', 'Computability and Definability', NULL, NULL, NULL),
(18, '236334', 'Introduction to Computer Networks', NULL, NULL, NULL),
(18, '236340', 'Computer Communications Project', NULL, NULL, NULL),
(18, '236341', 'Internet Networking', NULL, 'Networking', NULL),
(18, '236342', 'Introduction to Software Verification', NULL, NULL, NULL),
(18, '236343', 'Computability Theory', NULL, NULL, NULL),
(18, '236345', 'Automatic Verification of Programs', NULL, NULL, NULL),
(18, '236347', 'Program analysis and synthesis', NULL, NULL, NULL),
(18, '236348', 'Introduction to Human-Computer Interaction', NULL, NULL, NULL),
(18, '236349', 'Project in Computer Security', NULL, 'Security', NULL),
(18, '236350', 'Computer Security', NULL, 'Security', NULL),
(18, '236353', 'Automata and Formal Languages', NULL, NULL, NULL),
(18, '236357', 'Distributed Algorithms A', NULL, 'Distributed Applications', NULL),
(18, '236358', 'Advanced Topics in Distributed Algorithms', NULL, 'Distributed Applications', NULL),
(18, '236359', 'Algorithms 2', NULL, NULL, NULL),
(18, '236360', 'Theory of Compilation', NULL, NULL, NULL),
(18, '236363', 'Database Management Systems', NULL, 'Databases', NULL),
(18, '236366', 'Project in operating systems', NULL, 'Operating Systems', NULL),
(18, '236368', 'Formal Specifications For Complex Systems', NULL, NULL, NULL),
(18, '236369', 'Managing Data on the World-wide Web', NULL, NULL, NULL),
(18, '236370', 'Concurrent and Distributed Programming', NULL, 'Distributed Applications', NULL),
(18, '236371', 'Project in Parallel and Distributed Computation', NULL, 'Distributed Applications', NULL),
(18, '236374', 'Probabilistic methods and algorithms', NULL, NULL, NULL),
(18, '236376', 'Operating systems engineering', NULL, 'Operating Systems', NULL),
(18, '236381', 'Project in VLSI B', NULL, NULL, NULL),
(18, '236499', 'Project in Firewalls', NULL, NULL, NULL),
(18, '236500', 'Cryptanalysis', NULL, 'Cryptology', NULL),
(18, '236501', 'Introduction to Artificial Intelligence', NULL, 'Artificial Intelligence', NULL),
(18, '236502', 'Project in Artificial Intelligence', NULL, 'Artificial Intelligence', NULL),
(18, '236503', 'Project in CS Advanced Programming A', NULL, NULL, NULL),
(18, '236504', 'Project in software', NULL, NULL, NULL),
(18, '236506', 'Cryptology', NULL, 'Cryptology', NULL),
(18, '236510', 'Database management sys. implementations', NULL, 'Databases', NULL),
(18, '236512', 'Project in software development systems', NULL, NULL, NULL),
(18, '236518', 'Communication Complexity', NULL, NULL, NULL),
(18, '236520', 'Coding for Storage Systems', NULL, NULL, NULL),
(18, '236521', 'Approximation algorithms', NULL, NULL, NULL),
(18, '236522', 'Algorithms in Computational Biology', NULL, NULL, NULL),
(18, '236523', 'Introduction to Bioinformatics', NULL, NULL, NULL),
(18, '236524', 'Projects in Bioinformatics', NULL, NULL, NULL),
(18, '236601', 'Advanced Topics in Computer Science 1', NULL, 'CS', NULL),
(18, '236602', 'Advanced Topics in Computer Science 2', NULL, 'CS', NULL),
(18, '236603', 'Advanced Topics in Computer Science 3', NULL, 'CS', NULL),
(18, '236604', 'Advanced Topics in Computer Science 4', NULL, 'CS', NULL),
(18, '236605', 'Advanced Topics in Computer Science 5', NULL, 'CS', NULL),
(18, '236606', 'Advanced Topics in Computer Science 6', NULL, 'CS', NULL),
(18, '236610', 'Advanced Topics in Computer Science 10', NULL, 'CS', NULL),
(18, '236611', 'Advanced Topics in Computer Science 11', NULL, 'CS', NULL),
(18, '236613', 'Advanced Topics in Cryptology L', NULL, 'Cryptology', NULL),
(18, '236620', 'Advanced Topics in Algorithms L', NULL, NULL, NULL),
(18, '236628', 'Advanced Topics in Computer Graphics L', NULL, 'Graphs', NULL),
(18, '236629', 'Advanced Topics in Computer Graphics L+T', NULL, 'Graphs', NULL),
(18, '236634', 'Advanced Topics in Computer Communication Networks L', NULL, NULL, NULL),
(18, '236640', 'Advanced Topics in Quantum Information L', NULL, NULL, NULL),
(18, '236646', 'Advanced Topics in Theoretical Computer Science L', NULL, 'CS', NULL),
(18, '236650', 'Advanced Topics in Software Engineering L', NULL, NULL, NULL),
(18, '236652', 'Advanced Topics in Information Security L', NULL, 'Security', NULL),
(18, '236653', 'Advanced Topics in Information Security L+T', NULL, 'Security', NULL),
(18, '236698', 'Secure Quality Programs', NULL, NULL, NULL),
(18, '236700', 'Software design', NULL, NULL, NULL),
(18, '236703', 'Object Oriented Programming', NULL, 'Object Oriented Programming', NULL),
(18, '236714', 'Select. topics in automat. theorem proving', NULL, NULL, NULL),
(18, '236716', 'Geometric Modeling', NULL, NULL, NULL),
(18, '236719', 'Computational Geometry', NULL, NULL, NULL),
(18, '236754', 'Project in Intelligent Systems', NULL, NULL, NULL),
(18, '236755', 'Distributed Algorithms B', NULL, 'Distributed Applications', NULL),
(18, '236756', 'Introduction to machine learning', NULL, 'Machine Learning', NULL),
(18, '236757', 'Project in machine learning', NULL, 'Machine Learning', NULL),
(18, '236779', 'Foundations of Algorithms for Massive Datasets', NULL, NULL, NULL),
(18, '236780', 'Algorithms for Dynamic Memory Management', NULL, NULL, NULL),
(18, '236801', 'Seminar in Computer Science 1', NULL, 'CS', NULL),
(18, '236802', 'Seminar in Computer Science 2', NULL, 'CS', NULL),
(18, '236803', 'Seminar in Computer Science 3', NULL, 'CS', NULL),
(18, '236804', 'Seminar in Computer Science 4', NULL, 'CS', NULL),
(18, '236813', 'Seminar in Algorithms', NULL, NULL, NULL),
(18, '236815', 'Seminar in Computer Vision', NULL, NULL, NULL),
(18, '236816', 'Seminar in Computer Graphics', NULL, 'Graphs', NULL),
(18, '236818', 'Seminar in Bioinformatics', NULL, NULL, NULL),
(18, '236823', 'Seminar in Quantum Information processing', NULL, NULL, NULL),
(18, '236825', 'Seminar in Distributed Algorithms', NULL, 'Distributed Applications', NULL),
(18, '236826', 'Seminar in Databases', NULL, 'Databases', NULL),
(18, '236827', 'Seminar in Computer Systems', NULL, NULL, NULL),
(18, '236828', 'Project in Computer Systems', NULL, NULL, NULL),
(18, '236861', 'Geometric Computer Vision', NULL, NULL, NULL),
(18, '236862', 'Sparse Representations and Applications in Signal and Image Processing', NULL, 'Embedded Systems', NULL),
(18, '236873', 'Computer Vision', NULL, NULL, NULL),
(18, '236874', 'Project in computer vision', NULL, NULL, NULL),
(18, '236990', 'Inroduction to Quantum Information Processing', NULL, NULL, NULL),
(18, '238739', 'Discrete Algorithmic Geometry', NULL, NULL, NULL),
(18, '238900', 'Theory Research Seminar', NULL, 'Research', NULL),
(18, '238901', 'Logic and Combinatorics Research Seminar', NULL, 'Research', NULL),
(19, 'CSE2231', ' Software II: Software Development and Design', 'Data representation using hashing, search trees, and linked data structures; algorithms for sorting; using trees for language processing; component interface design; best practices in Java.\n																																									Prereq: 2221. Concur: 2321. Not open to students with credit for 2231.01, 321, or 421.', NULL, NULL),
(19, 'CSE223101', ' Software II', 'Transition from quarters to semesters, RESOLVE-C++ to Java; data representation using hashing, search trees, and linked data structures; sorting; using trees for language processing; component interface design; best practices in Java.\n																																																																																					Prereq: 222 or 222H. Concur: 2321. Not open to students with credit for 321.', NULL, NULL),
(19, 'CSE2321', ' Foundations I: Discrete Structures', 'Propositional and first-order logic; basic proof techniques; graphs, trees; analysis of algorithms; asymptotic analysis; recurrence relations.\n																																																																																																																																	Prereq: 1232, 1233, 2221, 214, 222, or 230, and Math 1151 or 152. Concur (for students with credit for 2221): 2231. Not open to students with credit for 625 or 680.', 'Graphs', NULL),
(19, 'CSE2331', ' Foundations II: Data Structures and Algorithms', 'Design/analysis of algorithms and data structures; divide-and-conquer; sorting and selection, search trees, hashing, graph algorithms, string matching; probabilistic analysis; randomized algorithms; NP-completeness.\n																																																																																																																																																																													Prereq: 2231 or 321, and 2321 or Math 566, and Stat 3460, 3470, or 427. Concur: Math 3345. Not open to students with credit for 5331 (680).', 'Graphs', NULL),
(19, 'CSE2431', ' Systems II: Introduction to Operating Systems', 'Introduction to operating system concepts: process, CPU scheduling, memory management, file system and storage, and multi-threaded programming.\n																																																																																																																																																																																																																									Prereq: 2451 or 459.21, and 2421, 360, or ECE 2560 (265). Not open to students with credit for 5431 (660).', 'Operating Systems', NULL);
INSERT INTO `uvs` (`UV_university`, `UV_code`, `UV_name`, `UV_description`, `UV_section`, `UV_tech`) VALUES
(19, 'CSE2501', ' Social, Ethical, and Professional Issues in Computing', 'Social, ethical, and professional issues facing computing professionals; ethical principles; discussion of case studies.\n																																																																																																																																																																																																																																																																					Prereq: 1222, 1223, 2231, 214, 222, or 230, and 2321 or Math 366, and Gen Ed Writing Level 2. Not open to students with credit for 5501 (601).', NULL, NULL),
(19, 'CSE3232', ' Software Requirements Analysis', 'Information systems analysis; object-oriented analysis models and tools; use cases, system modeling using UML; requirements specification development; term project.\n																																																																																																																																																																																																																																																																																																																	Prereq: 3241 or 3901 or 3902 or 3903 (560) or 5241 (670). Not open to students with credit for 5232 (616).', NULL, NULL),
(19, 'CSE3321', ' Automata and Formal Languages', 'Machine-based and grammatical models of computation; finite automata and regular languages, pushdown automata and context-free languages, Turing machines; non-determinism; Church''s Thesis.\n																																																																																																																																																																																																																																																																																																																																																													Prereq: 2231 or 321, and 2421 or 360, and 2331 or Math 566. Not open to students with credit for 5321 (625).', NULL, NULL),
(19, 'CSE3421', ' Introduction to Computer Architecture', 'Organization of hardware and software in modern computer systems, including instruction set design, processor control, ALU design, pipelining, multicores and accelerators, and memory subsystem design.\n																																																																																																																																																																																																																																																																																																																																																																																																									Prereq: 2231 or 321, and 2421, 2560, 265, or 360, and 2000 or 261. Not open to students with credit for 5421 (675.01) or 675.02.', 'Computer Architecture', NULL),
(19, 'CSE3461', ' Computer Networking and Internet Technologies', 'Computer networks, communication protocols, Internet TCP/IP and applications, wireless communications and network security.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																					Prereq: 2451, and 2421 or ECE 2560 (265). Concur: 2431. Not open to students with credit for 5461 (677).', 'Networking', NULL),
(19, 'CSE3541', ' Computer Game and Animation Techniques', 'Fundamental algorithms and mathematics in production of computer animation and video games, emphasizing control and rendering of animated characters.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	Prereq: 3901 or 3902 or 3903 (560). Not open to students with credit for 5541 (683).', 'Game Design', NULL),
(19, 'CSE3902', ' Project: Design, Development, and Documentation of Interactive Systems', 'Intensive group project involving design, development, and documentation of an interactive software system, a 2D interactive game; communication skills emphasized; builds programming maturity.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													Prereq: 2231 or 321, and 2321 or Math 366, and 2421, 360, or ECE 2560 (265), and CSE 2451, 459.21, or 459.22, and second level writing course.', 'Game Design', NULL),
(19, 'CSE4191', ' Professional Practice in Industry', 'Preparation and submission of a comprehensive report based on actual employment experience in a co-op job in industry.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									Prereq: Permission of the CSE Advising Office. Repeatable to a maximum of 8 completions. This course is progress graded (S/U).', NULL, NULL),
(19, 'CSE4193H', ' Individual Studies in Computer Science and Engineering', 'Designed to give the student an opportunity to pursue special studies not otherwise offered.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					Prereq: Honors standing, and permission of instructor. Repeatable to a maximum of 10 cr hrs or 10 completions. This course is graded S/U.', 'CS', NULL),
(19, 'CSE4194H', ' Group Studies in Computer Science and Engineering', 'Designed to give the student an opportunity to pursue special studies not otherwise offered.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	Prereq: Honors standing, and permission of instructor. Repeatable to a maximum of 10 cr hrs or 10 completions.', 'CS', NULL),
(19, 'CSE4252', ' Programming in C++', 'Syntax and pragmatics of C++ programming; C++ types, arrays, classes, pointers; objects and classes; compile-time vs. run-time picture; inheritance; template classes.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													Prereq: 2231. Not open to students with credit for 459.22. This course is graded S/U.', NULL, 'c'),
(19, 'CSE4254', ' Programming in Lisp', 'Lisp programming for students well-versed in programming with another language.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									Prereq: 2231. Not open to students with credit for 459.31. This course is graded S/U.', NULL, NULL),
(19, 'CSE4471', ' Information Security', 'Introduction to security of digital information; threats and attacks; regulations; risk management; attack detection and response; cryptography; forensics; technical training and certifications.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					Prereq: 2231 and 2321, or 321. Not open to students with credit for 551.', 'Graphs', NULL),
(19, 'CSE4998H', ' Undergraduate Research in Computer Science and Engineering', 'Opportunity for undergraduate student to conduct research in Computer Science and Engineering.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	Prereq: Honors standing, and permission of instructor. Repeatable to a maximum of 10 cr hrs or 10 completions. This course is graded S/U.', 'Research', NULL),
(19, 'CSE4999H', ' Computer Science and Engineering Research for Thesis', 'Supervised research and project work arranged individually for honors students.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													Prereq: Honors standing, and permission of instructor. Repeatable to a maximum of 10 cr hrs or 10 completions. This course is graded S/U.', 'Research', NULL),
(19, 'CSE5022', ' Software I: Software Components', 'Intellectual foundations of software engineering; design-by-contract principles; mathematical modeling of software functionality; component-based software from client perspective; layered data representation. Previous programming experience in any language required.\r\nPrereq: At least one term of Calculus. Not open to students with credit for 2221, 2231, 4221, 321, or 502. Not open to students enrolled in a CSE or CIS major.', NULL, NULL),
(19, 'CSE5023', ' Software II: Software Development and Design', 'Data representation using hashing, search trees, and linked data structures; algorithms for sorting; using trees for language processing; component interface design; best practices in Java.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									Prereq: 2221 or 5022. Not open to students with credit for 2231, 2231.01, 321, or 421.', NULL, NULL),
(19, 'CSE5032', ' Foundations I: Discrete Structures', 'Propositional and first-order logic; basic proof techniques; graphs, trees; analysis of algorithms; asymptotic analysis; recurrence relations.\r\nPrereq: 5022 or equiv. Not open to students with credit for 2321, 625, or 680.', 'Graphs', NULL),
(19, 'CSE5042', ' Systems I: Introduction to Low', 'Introduction to computer architecture at machine and assembly language level; pointers and addressing; C programming at machine level; computer organization.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					Prereq: 2122, 2123, 2231 or 321; and 2321, Math 2566, or 366. Not open to students with credit for 2421 or 360.', 'Computer Architecture', NULL),
(19, 'CSE5043', ' Overview of Computer Systems For Non', 'Introduction to computer architecture and organization at machine and assembly level; pointers and addressing using C programming; introduction to operating system concepts: process, memory management, file system and storage, and multi-threaded programming.\r\nPrereq: 5022 or equiv, and 5032 or equiv. Not open to students with credit for 2421, 5042, 2431, 3430, 360, or 660. Not open to CSE/CIS majors.', 'Computer Architecture', NULL),
(19, 'CSE5052', ' Survey of Artificial Intelligence for Non', 'Survey of the basic concepts and techniques in artificial intelligence, including problem solving, knowledge representation, and machine learning.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	Prereq: 1211, 1221, 1222, 1223, or 2221, or Grad standing. Not open to students with credit for 3521 (630), 4521, or 5521, or students enrolled in a CSE or CIS major.', 'Distributed Applications', NULL),
(19, 'CSE519401', ' Group Studies in Computer Science and Engineering', 'Designed to give the student an opportunity to pursue special studies not otherwise offered.\r\nPrereq: Permission of instructor. Repeatable to a maximum of 10 cr hrs or 10 completions.', 'CS', NULL),
(19, 'CSE519402', ' Group Studies in Computer Science and Engineering', 'Designed to give the student an opportunity to pursue special studies not otherwise offered.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													Prereq: Permission of instructor. Repeatable to a maximum of 10 cr hrs of 10 completions. This course is graded S/U.', 'CS', NULL),
(19, 'CSE5231', ' Software Engineering Techniques', 'Software engineering issues, techniques, methodologies and technologies; software lifecycle activities: requirements analysis, architecture, design, testing, deployment, maintenance; project management; enterprise software systems; frameworks.\r\nPrereq: 3901 or 3902 or 3903 (560). Not open to students with credit for 3231 (757).', NULL, NULL),
(19, 'CSE5232', ' Software Requirements Analysis', 'Information systems analysis; object-oriented analysis models and tools; use cases, system modeling using UML; requirements specification development; term project.\n																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									Prereq: 3241 or 3901 or 3902 or 3903 (560) or 5241 (670). Not open to students with credit for 3232 (616).', NULL, NULL),
(19, 'CSE5234', ' Distributed Enterprise Computing', 'Current application and middleware frameworks for distributed enterprise computing; XML; Enterprise Java; SOAP and REST web services; AJAX and JSON; enterprise service bus; Hadoop; mobile computing.\r\nPrereq: 2431 or 5431 (660). Not open to students with credit for 769.', 'Distributed Applications', NULL),
(19, 'CSE5235', ' Applied Enterprise Architectures and Services', 'Modeling/analysis of complex enterprise architectures; enterprise patterns (workflow, broker, warehousing); methods for service performance (lean, ontologies, data mining, etc.); emerging topics in semantic cyber-infrastructures, social computation.\nPrereq: 5911 (758 and 762), 5912 (786), 5913 (682), 5914 (731), 5915 (772), or 778.', NULL, NULL),
(19, 'CSE5236', ' Mobile Application Development', 'Mobile application development frameworks; Architecture, design and engineering issues, techniques, methodologies for mobile application development.\r\nPrereq: 3901 or 3902 or 3903 (560).', 'Game Design', NULL),
(19, 'CSE5239', ' Intermediate Studies in Software Engineering', 'Intermediate-level topics in software engineering.\nRepeatable to a maximum of 12 cr hrs.', NULL, NULL),
(19, 'CSE5241', ' Introduction to Database Systems', 'Database systems use; logical design; entity-relationship model; normalization; query languages and SQL; relational algebra and calculus; object relational databases; XML; active databases; database design project.\r\nPrereq: 2133 or 2231 or 2233 (314) or 321, and 2321 or Math 2366 (366). Not open to students with credit for 3241 (670).', 'Databases', NULL),
(19, 'CSE5242', ' Advanced Database Management Systems', 'Transaction management; query processing and optimization; organization of database systems, advanced indexing, multi-dimensional data, similarity-based analysis, performance evaluation, new database applications.\nPrereq: 3241 or 5241, and 2421 or 5042. Not open to students with credit for 770.', 'Databases', NULL),
(19, 'CSE5243', ' Introduction to Data Mining', 'Knowledge discovery, data mining, data preprocessing, data transformations; clustering, classification, frequent pattern mining, anomaly detection, graph and network analysis; applications.\r\nPrereq: 3241 or 5241, and 2331, 5331, Stat 3301, or ISE 3200. Not open to students with credit for 674.', 'Graphs', NULL),
(19, 'CSE5245', ' Introduction to Network Science', 'Introduction to Network Science; Global and Local Network Measures;  PageRank; Community Discovery Algorithms; Network Models; Understanding the role of network analysis in Web and Social network applications.\nPrereq: 2331.', NULL, NULL),
(19, 'CSE5249', ' Intermediate Studies in Databases', 'Intermediate-level topics in databases.\r\nRepeatable to a maximum of 12 cr hrs.', 'Databases', NULL),
(19, 'CSE5321', ' Automata and Formal Languages', 'Machine-based and grammatical models of computation; finite automata and regular languages, pushdown automata and context-free languages, Turing machines; non-determinism; Church''s Thesis; halting problem.\nPrereq: 2231 or 321, and 2421 or 360, and 2331 or Math 566. Not open to students with credit for 3321 (625).', NULL, NULL),
(19, 'CSE5329', ' Intermediate Studies in Computation Theory', 'Intermediate-level topics in computation theory.\r\nRepeatable to a maximum of 12 cr hrs.', NULL, NULL),
(19, 'CSE5331', ' Foundations II: Data Structures and Algorithms', 'Design/analysis of algorithms and data structures; divide-and-conquer; sorting and selection, search trees, hashing, graph algorithms, string matching; probabilistic analysis; randomized algorithms; NP-completeness.\nPrereq: 2231 or 321, and 2321 or Math 366, and 2566 (566), and Stat 3470 (427). Not open to students with credit for 2331 (680).', 'Graphs', NULL),
(19, 'CSE5339', ' Intermediate Studies in Algorithms', 'Intermediate-level topics in algorithms.\r\nRepeatable to a maximum of 12 cr hrs.', NULL, NULL),
(19, 'CSE5341', ' Principles of Programming Languages', 'Formal languages and grammars; recursive descent parsing; data types, expressions, control structures, parameter passing; compilers and interpreters; memory management; functional programming principles.\nPrereq: 2231, 2331 (680) and 2421, and 3901 (560), 3902, or 3903. Not open to students with credit for 3341 (655).', NULL, NULL),
(19, 'CSE5343', ' Compiler Design and Implementation', 'Lexical and syntax analysis using compiler generation tools; type checking; intermediate code; control-flow analysis; dataflow analysis; code optimizations; code generation; compiler project.\r\nPrereq: 3901 (560), 3902, or 3903, and 3341 (655). Not open to students with credit for 756.', 'Optimization', NULL),
(19, 'CSE5349', ' Intermediate Studies in Programming Languages', 'Intermediate-level topics in programming languages.\nRepeatable to a maximum of 12 cr hrs.', NULL, NULL),
(19, 'CSE5351', ' Introduction to Cryptography', 'Foundations of cryptography; mathematical formulations/proofs of security goals; theory and practical constructions of encryption schemes, MACs, digital signatures; zero-knowledge proof systems; cryptographic protocols.\r\nPrereq: 2331 (680), 5331, Math 4573 (573), or 4580 (580), and Stat 3460 (427) or 3470. Not open to students with credit for 723 or 794Q.', 'Graphs', NULL),
(19, 'CSE5359', ' Intermediate Studies in Cryptography', 'Intermediate-level topics in cryptography.\nRepeatable to a maximum of 12 cr hrs.', 'Graphs', NULL),
(19, 'CSE5361', ' Numerical Methods', 'Numerical methods for scientific computation: computer arithmetic, rounding errors, machine precision, machine representation, root-finding, interpolation, integration, linear systems, splines, smoothing, curve-fitting, linear programming.\r\nPrereq: 2231, and Math 2568 (268) or 571, and 1151 (151). Not open to students with credit for 541.', NULL, NULL),
(19, 'CSE5421', ' Introduction to Computer Architecture', 'Organization of hardware and software in modern computer systems, including instruction set design, processor control, ALU design, pipelining, multicores and accelerators, and memory subsystem design.\nPrereq: 2231 or 321, and 2421 (360) or ECE 2560 (265), and 2000 or 261. Not open to students with credit for 3421 (675.01 or 675.02).', 'Computer Architecture', NULL),
(19, 'CSE5429', ' Intermediate Studies in Computer Architecture', 'Intermediate-level topics in computer architecture.\r\nRepeatable to a maximum of 12 cr hrs.', 'Computer Architecture', NULL),
(19, 'CSE5431', ' Systems II: Introduction to Operating Systems', 'Introduction to operating system concepts: process, CPU scheduling, memory management, file system and storage, and multi-threaded programming.\nPrereq: 2451, and 2421, 360, or ECE 2560 (265). Not open to students with credit for 2431 or 660.', 'Operating Systems', NULL),
(19, 'CSE5432', ' Mobile Handset Systems and Networking', 'Mobile handset architecture: processors, memory, I/O devices, sensors, virtual machine and power management; different ranges of wireless communication technologies; TCP/IP over wireless; mobile social networking.\r\nPrereq: 2451 or 459.21, and 2421 or ECE 2560 (265).', 'Networking', NULL),
(19, 'CSE5433', ' Operating Systems Laboratory', 'Introduction to the internals of operating systems; designing and implementing components within commercial operating systems: system calls, CPU scheduling, context switching, process management, memory management, file systems.\nPrereq: 2431 or 5431; or 660, and 2451 or 459.21. Not open to students with credit for 662.', 'Operating Systems', NULL),
(19, 'CSE5434', ' Comparative Operating Systems', 'A careful examination of a number of representative computer operating systems.\r\nPrereq: 2431 (660) or 5431. Not open to students with credit for 741.', 'Operating Systems', NULL),
(19, 'CSE5439', ' Intermediate Studies in Operating Systems', 'Intermediate-level topics in operating systems.\nRepeatable to a maximum of 12 cr hrs.', 'Operating Systems', NULL),
(19, 'CSE5441', ' Introduction to Parallel Computing', 'Parallel programming models; sequential and parallel performance issues; high-performance computer architecture; design, analysis, implementation and performance evaluation of parallel algorithms.\r\nPrereq: 2231, 2321 and 2451, and Math 2568 (568) or 571, and 2421 or ECE 2560 (265); or Grad standing. Not open to students with credit for 621.', 'Computer Architecture', NULL),
(19, 'CSE5449', ' Intermediate Studies in Parallel Computing', 'Intermediate-level topics in parallel computing.\nRepeatable to a maximum of 12 cr hrs.', NULL, NULL),
(19, 'CSE5461', ' Computer Networking and Internet Technologies', 'Computer networks, communication protocols, Internet TCP/IP and applications, wireless communications and network security.\r\nPrereq: 2451, and 2421 or ECE 2560 (265). Concur: 2431. Not open to students with credit for 3461 (677).', 'Networking', NULL),
(19, 'CSE5462', ' Network Programming', 'IP-based socket programming in C/C++, TinyOS programming in NesC.\nPrereq: 3461 (677) or 5461 or ECE 3367.', NULL, NULL),
(19, 'CSE5463', ' Introduction to Wireless Networking', 'Fundamental concepts in cellular design, Wireless-LANs, MANETs, and sensor networks will be explored. Specific topics will include propagation, fading, cellular-design, power-management, routing, scheduling, and control.\r\nPrereq: 3461 (677) or 5461 or ECE 3367, or Grad standing in Engineering or Math and Physical Sciences. Cross-listed in ECE 5101.', 'Networking', NULL),
(19, 'CSE5469', ' Intermediate Studies in Computer Networking', 'Intermediate-level topics in computer networking.\nRepeatable to a maximum of 12 cr hrs.', 'Networking', NULL),
(19, 'CSE5472', ' Information Security Projects', 'Team-based projects: solve information security problems (mobile/static host/network hardening, intrusion detection and vulnerability scanning, forensics); results communicated through report writing and presentation.\r\nPrereq: 3901 (560) or 3902 or 3903, and 3461 or 5461 or 5471. Not open to students with credit for 652.', 'Security', NULL),
(19, 'CSE5473', ' Network Security', 'Security threats and services, elements of cryptography, protocols for security services, network and internet security, advanced security issues and technologies.\nPrereq: 3461 (677) or 5461. Not open to students with credit for 651.', 'Graphs', NULL),
(19, 'CSE5479', ' Intermediate Studies in Computer Security', 'Intermediate-level topics in computer security.\r\nRepeatable to a maximum of 12 cr hrs.', 'Security', NULL),
(19, 'CSE5501', ' Social, Ethical, and Professional Issues in Computing', 'Social, ethical, and professional issues facing computing professionals; ethical principles; discussion of case studies.\nPrereq: 1222 or 1223 or 2231 or 214 or 222 or 230, and 2321 or Math 366, and Gen Ed Writing Level 2. Not open to students with credit for 2501 (601).', NULL, NULL),
(19, 'CSE5521', ' Survey of Artificial Intelligence I: Basic Techniques', 'Survey of the basic concepts and techniques in artificial Intelligence, including problem solving, knowledge representation, and machine learning.\r\nPrereq: 2331, or 222 and Math 366. Not open to students with credit for 3521 (630).', 'Distributed Applications', NULL),
(19, 'CSE5522', ' Survey of Artificial Intelligence II: Advanced Techniques', 'Survey of advanced concepts, techniques, and applications of artificial intelligence, including knowledge representation, learning, natural language understanding, and vision.\nPrereq: 3521 (630) or 5521, or Grad standing. Not open to students with credit for 730.', 'Distributed Applications', NULL),
(19, 'CSE5523', ' Machine Learning and Statistical Pattern Recognition', 'Introduction to basic concepts of machine learning and statistical pattern recognition; techniques for classification, clustering and data representation and their theoretical analysis.\r\nPrereq: 3521, 5521, or 5243, and 5522, Stat 3460, or 3470. Not open to students with credit for 735.', 'Machine Learning', NULL),
(19, 'CSE5524', ' Computer Vision for Human', 'Computer vision algorithms for use in human-computer interactive systems; image formation, image features, segmentation, shape analysis, object tracking, motion calculation, and applications.\nPrereq: 2331, or Sr or Grad standing. Not open to students with credit for 634.', NULL, NULL),
(19, 'CSE5525', ' Foundations of Speech and Language Processing', 'Fundamentals of natural language processing, automatic speech recognition and speech synthesis; lab projects concentrating on building systems to process written and/or spoken language.\nPrereq: 3521 or 5521, and 5522, Stat 3460, or 3470. Not open to students with credit for 733.', 'Natural Language Processing', NULL),
(19, 'CSE5526', ' Introduction to Neural Networks', 'Survey of fundamental methods and techniques of neural networks; single- and multi-layer perceptrons; radial-basis function networks; support vector machines; recurrent networks; supervised and unsupervised learning.\nPrereq: 3521 or 5521. Not open to students with credit for 779.', 'Neural Algorithms', NULL),
(19, 'CSE5531', ' Introduction to Cognitive Science', 'Interdisciplinary survey of the fields of artificial intelligence, linguistics, neuroscience, philosophy of mind, and psychology; various aspects of cognitive perception, representation, and computation.\nPrereq: At least 12 cr hrs in at least two of these four subjects (only 6 cr hrs from any one subject): CSE, Ling, Philos, Psych. Not open to students with credit for 612, Linguist 612, Philos 612, or Psych 612. Cross-listed in Ling, Philos, or Psych.', 'Distributed Applications', NULL),
(19, 'CSE5539', ' Intermediate Studies in Artificial Intelligence', 'Intermediate-level topics in artificial intelligence.\nRepeatable to a maximum of 12 cr hrs.', 'Distributed Applications', NULL),
(19, 'CSE5541', ' Computer Game and Animation Techniques', 'Fundamental algorithms and mathematics in the production of computer animation and video games, emphasizing the control and rendering of animated characters.\nPrereq: 3901 or 3902 or 3903 (560). Not open to students with credit for 3541 (683).', 'Game Design', NULL),
(19, 'CSE5542', ' Real', 'Comprehensive list of topics in real-time rendering using OpenGL and GLSL, including coordinate systems, transformations, viewing, illumination, texture mapping, and shader-based algorithms.\nPrereq: 3901 (560) or 3902 or 3903, and Math 2568 (568) or 571. Not open to students with credit for 781.', NULL, NULL),
(19, 'CSE5543', ' Geometric Modeling', 'Common algorithmic and mathematical techniques for modeling geometric objects in computer graphics and CAD applications; sample based modeling, mesh generation, and hierarchical representations.\nPrereq: Math 2568 (568) or 571. Not open to students with credit for 784.', 'Graphs', NULL),
(19, 'CSE5544', ' Introduction to Data Visualization', 'Principles and methods for visualizing data from measurements and calculations in physical and life sciences, and transactional and social disciplines; information visualization; scientific visualization.\nPrereq: 5361, Stat 3301, 3541, or 5541. Not open to students with credit for 694L.', 'Graphs', NULL),
(19, 'CSE5545', ' Advanced Computer Graphics', 'Advanced topics in computer graphics; image synthesis, lighting and rendering, sampling and material properties, volume rendering.\nPrereq: 3541 or 5541 or 581. Not open to students with credit for 782.', 'Graphs', NULL),
(19, 'CSE5559', ' Intermediate Studies in Computer Graphics', 'Intermediate-level topics in computer graphics.\nRepeatable to a maximum of 12 cr hrs.', 'Graphs', NULL),
(19, 'CSE5891', ' Proseminar in Cognitive Science', 'Provides an in-depth examination of cognitive science from an interdisciplinary perspective.\nPrereq: Permission of instructor. Repeatable to a maximum of 6 cr hrs. Cross-listed in Ling, Philos, Psych, and SphHrng.', NULL, NULL),
(19, 'CSE5911', ' Capstone Design: Software Applications', 'Capstone design project: application of software engineering techniques, methodologies and technologies in software lifecycle activities using enterprise software frameworks; teamwork, written and oral communication.\nPrereq: 2501 (601) or 5501, and 3901 (560) or 3902 or 3903, and 3231 (757) or 5231. Not open to students with credit for 758 or 762.', 'Embedded Systems', NULL),
(19, 'CSE5912', ' Capstone Design: Game Design and Development', 'Capstone design project; conceptual and technical design and implementation of interactive game, integrating custom code and toolkits; teamwork, written and oral communication skills.\nPrereq: 2501 (601) or 5501, and 3901 (560) or 3902 or 3903, and 3541 (581) or 5541. Not open to students with credit for 786.', 'Game Design', NULL),
(19, 'CSE5913', ' Capstone Design: Computer Animation', 'Capstone design project: conceptual and technical design and implementation of computer animation incorporating animation elements; teamwork, written and oral communication skills.\nPrereq: 2501 (601) or 5501, and 3901 (560) or 3902 or 3903, and 3541 (581) or 5541 (683). Not open to students with credit for 682.', NULL, NULL),
(19, 'CSE5914', ' Capstone Design: Knowledge', 'Capstone design project; conceptual and technical design; theory and practice of knowledge-based systems; teamwork, written and oral communication skills.\nPrereq: 2501 (601) or 5501, and 3901 (560) or 3902 or 3903, and 3521 (630) or 5521. Not open to students with credit for 731.', NULL, NULL),
(19, 'CSE5915', ' Capstone Design: Information Systems', 'Capstone design project; information system principles: database design methods and tools, indexing, searching, application development, testing, evaluation; teamwork, written and oral communication skills.\nPrereq: 2501 (601) or 5501, and 3901 (560) or 3902 or 3903, and 3241 (670) or 5241. Not open to students with credit for 772.', NULL, NULL),
(19, 'CSE6193', ' Individual Studies in Computer Science and Engineering', 'Designed to give the student an opportunity to pursue special studies not otherwise offered.\nPrereq: Permission of instructor. Repeatable to a maximum of 10 cr hrs or 10 completions. This course is graded S/U.', 'CS', NULL),
(19, 'CSE6231', ' Formal Foundations of Software Engineering', 'Formal approaches to program semantics and software properties; software specification and verification; model checking; static analysis; systematic testing.\nPrereq: 3321 (625) or 5321, and 3341 (655) or 5341.', NULL, NULL),
(19, 'CSE6249', ' Advanced Studies in Databases', 'Advanced-level topics in databases.\nRepeatable to a maximum of 24 cr hrs or 8 completions. This course is graded S/U.', 'Databases', NULL),
(19, 'CSE6329', ' Advanced Studies in Computation Theory', 'Advanced-level topics in computation theory.\nRepeatable to a maximum of 24 cr hrs or 8 completions. This course is graded S/U.', NULL, NULL),
(19, 'CSE6332', ' Advanced Algorithms', 'Advanced graph algorithms, string algorithms, linear programming, matrix operations, Fourier transforms, randomized algorithms, approximation algorithms, geometric algorithms.\nPrereq: 6331 (780). Not open to students with credit for 790 or 794A.', 'Graphs', NULL),
(19, 'CSE6339', ' Advanced Studies in Algorithms', 'Advanced-level topics in algorithms.\nRepeatable to a maximum of 24 cr hrs or 8 completions. This course is graded S/U.', NULL, NULL),
(19, 'CSE6349', ' Advanced Studies in Programming Languages', 'Advanced-level topics in programming languages.\nRepeatable to a maximum of 24 cr hrs or 8 completions. This course is graded S/U.', NULL, NULL),
(19, 'CSE6421', ' Computer Architecture', 'Principles and tradeoffs behind the design of modern computer architectures, including instruction-level parallelism, memory system design, advanced cache architectures, cache coherence, multiprocessors, energy-efficient and embedded architectures.\nPrereq: 3431 (660) or 5431, and 3421 (675), 5421, or ECE 5362 (662). Not open to students with credit for 775.', 'Embedded Systems', NULL),
(19, 'CSE6429', ' Advanced Studies in Computer Architecture', 'Advanced-level topics in computer architecture.\nRepeatable to a maximum of 24 cr hrs or 8 completions. This course is graded S/U.', 'Computer Architecture', NULL),
(19, 'CSE6439', ' Advanced Studies in Operating Systems', 'Advanced-level topics in operating systems.\nRepeatable to a maximum of 24 cr hrs or 8 completions. This course is graded S/U.', 'Operating Systems', NULL),
(19, 'CSE6449', ' Advanced Studies in Parallel Computing', 'Advanced-level topics in parallel computing.\nRepeatable to a maximum of 24 cr hrs or 8 completions. This course is graded S/U.', NULL, NULL),
(19, 'CSE6469', ' Advanced Studies in Computer Networking', 'Advanced-level topics in computer networking.\nRepeatable to a maximum of 24 cr hrs or 8 completions. This course is graded S/U.', 'Networking', NULL),
(19, 'CSE6539', ' Advanced Studies in Artificial Intelligence', 'Advanced-level topics in artificial intelligence.\nRepeatable to a maximum of 24 cr hrs or 8 completions. This course is graded S/U.', 'Distributed Applications', NULL),
(19, 'CSE6998', ' MS Research in Computer Science and Engineering', 'MS research in Computer Science and Engineering.\nRepeatable to a maximum of 10 completions. This course is graded S/U.', 'Research', NULL),
(19, 'CSE8193', ' Individual Studies in Computer Science and Engineering', 'Designed to give the student an opportunity to pursue special studies not otherwise offered.\nPrereq: Permission of instructor. Repeatable to a maximum of 10 completions. This course is graded S/U.', 'CS', NULL),
(19, 'CSE8998', ' PhD Research in Computer Science and Engineering', 'PhD research in Computer Science and Engineering.\nRepeatable to a maximum of 10 completions. This course is graded S/U.', 'Research', NULL);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `university`
--
ALTER TABLE `university`
 ADD PRIMARY KEY (`U_id`), ADD UNIQUE KEY `U_name` (`U_name`), ADD KEY `U_country` (`U_country`);

--
-- Indexes for table `uvs`
--
ALTER TABLE `uvs`
 ADD PRIMARY KEY (`UV_university`,`UV_code`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `university`
--
ALTER TABLE `university`
MODIFY `U_id` int(6) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=102;
--
-- Constraints for dumped tables
--

--
-- Constraints for table `uvs`
--
ALTER TABLE `uvs`
ADD CONSTRAINT `uvs_ibfk_1` FOREIGN KEY (`UV_university`) REFERENCES `university` (`U_id`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
