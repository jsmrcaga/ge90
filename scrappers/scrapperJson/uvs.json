{"undergraduate":[{"courses":[{"name":"CO112-Hardware","description":"To provide Computing Science students with a sound introduction to the fundamental principles and devices used in the design of digital computers, and to the way in which primitive control logic can be organised to construct a programmable machine.\nBoolean algebra; combinatorial logic functions; principles of semiconductor devices and logic gates; adders subtractors and multipliers; bistable storage devices; S-R flip-flop; D-type flip-flop; latch versus edge triggering; J-K flip-flops; registers; shift registers; multiplexers and decoders; counters; finite state machine design; static and dynamic RAM; register transfer descriptions; ALU design and CPU design.\nPractical Laboratory work: Design of combinatorial and sequential circuits using modern VLSI design tools."},{"name":"CO140-Logic","description":"To introduce the language and semantics of propositional and first order predicate logic, and natural deduction. To apply concepts of first order logic to program specification."},{"name":"CO145-Mathematical Methods","description":"The course aims to make students confident in basic mathematical techniques for later year courses in Computing."},{"name":"CO120.2-Programming II","description":"Aims of the course: The aims of this module are: To give students a good understanding of basic concepts of object-oriented program design; introduce them to the fundamental principles of abstraction, modularity and reusability; and illustrate object diagrams as a basic object-oriented design and modelling technique.\nTo teach and enable students to develop object-oriented programming skills within the Java language; to enable students to develop object-oriented Java program solutions to small application problems.\nTo help students gain a good understanding of, and ability to use, abstract data types; familiarise students with common abstract data types and associated operations.\nTo teach various design and implementation solutions for abstract data types; illustrate the practical effects of the different implementation choices; and illustrate their practical use in developing Java programs for real application problems."},{"name":"CO161-Laboratory 1","description":"To support by practical work material covered in the first year lecture courses."},{"name":"CO120.1-Programming I","description":"Academic aims\nThis is the students' first programming course. It aims to introduce some of the fundamentals of programming for beginners using a strongly-typed functional programming language (Haskell) that most students will have little or no experience of. The emphasis is on writing succinct, beautiful code, without being bogged down in the syntax and semantics of a conventional procedural or object-oriented language. The course is taught using a problem-solving approach with students being encouraged to use the various language features to solve well-specified problems independently and explore some fundamental algorithms and data structures in computer science."},{"name":"CO142-Discrete Mathematics","description":"To introduce concepts and proof techniques of basic set theory. To introduce certain classes of relations and graphs. To introduce algorithm analysis."},{"name":"CO113-Architecture","description":"Aims of the Course\nThe aim of the course is to develop a fundamental understanding of the organisation and operation of a desktop computer system. The emphasis of the course is on understanding how high-level language programs are represented and executed at an architectural-level. The course also provides an introduction to the organisation and operation of the operating system software that controls the execution of programs and that manages the resources of a computer."},{"name":"CO130-Databases I","description":"To introduce database systems with particular reference to the relational model, including design, query languages and update transactions. To introduce entity-relationship modelling and translation to the relational model.\nIntroduction to databases; data modelling, database management, data dictionary, query formulation and evaluation.\nRelational databases: design, functional dependencies, keys and normal forms.\nRelational database languages: relational algebra. Views integrity and security.\nTransaction management and recovery: transaction atomicity, database log, deferred and immediate database modifications, checkpoints. Concurrency: including serialisability, locking, two phase locking protocol, deadlock. Entity-relationship models.\nThe course will be supported by laboratory sessions using the relational database system, INGRES, and the language SQL."},{"name":"CO141-Reasoning about Programs","description":"(i) To gain familiarity with use of pre and post conditions and loop invariants for showing correctness.\n(ii) To learn some standard algorithms and be able to reason about their correctness.\n(iii) To understand the principle of induction and apply it to reasoning about Haskell programs."},{"name":"CO163-Computing Topics","description":"The aim of this course is to introduce new students to some state of the art ideas in Computing. It provides an opportunity for self directed learning in small groups. Each topic will be introduced by a short lecture. Students are then encouraged to use their own initiative in finding reference material to expand their knowledge in one of the areas introduced by the lectures. Each group's findings are presented in a web article."},{"name":"CO164-Ethics in Computing 1","description":"Aims:\nTo introduce students to the organisational, ethical and legal contexts in which professional computing practitioners work."},{"name":"CO165-Presentation Skills","description":"Support the students on developing their communication and presentation skills"},{},{"name":"CO701-Programming Competition Training"},{"name":"CO191-Advanced Programming"},{},{"name":"CO220-Software Engineering - Design","description":"220 - Software Engineering Design"},{"name":"CO221-Compilers","description":"To develop an understanding of how a compiler for a high-level programming language works, how programming language design is influenced by compiler structure, and how computer architecture is influenced by the needs of compiled programs. The course provides the specific technical skills needed for constructing parsers, interpreters and translators as well as introducing topics in code optimisation and semantic analysis."},{"name":"CO223-Concurrency","description":"This course aims to introduce students to the use of abstract models for exploring and analysing concurrent systems. The models used are appropriate for explaining concurrency concepts and for exploring and analysing possible solutions which satisfy safety and progress properties. Concurrent programming is introduced as the means for implementing the model solutions using program primitives provided in Java."},{"name":"CO240-Models of Computation","description":"The course intends to make sure that all students will have a stronger foundation in the more theoretical side of Computer Science, thus better preparing them for the courses that will follow in the fourth year.\nThe course will focus on teaching students the fundamental skills involved in dealing with abstract systems and constructing proofs, through both teaching and exercises."},{"name":"CO245-Statistics","description":"The aim of this course is to equip students to make basic statistical analyses of data, and to enable them to critically assess and interpret others' analyses. Detailed handouts were given during the course, as well as extensive problem sheets."},{"name":"CO272-Team Skills Development","description":"This one day workshop aims to help develop the teamwork skills of our students through discussion of group work theory and practical group work exercises."},{"name":"CO275-C++ Introduction"},{"name":"CO261-Laboratory 2","description":"To support by practical work material covered in the second year lecture courses."},{"name":"CO202-Software Engineering - Algorithms","description":"Expand students' thinking about algorithms and algorithmic design paradigms\nExpose students to several new classes of computational problems and concrete algorithmic solutions\nGive students a sense for general (or commonly useful) approaches to algorithmic thinking"},{"name":"CO211-Operating Systems","description":"Learning Outcomes\nBy the end of the course students will be able to describe the basic principles used in the design of modern operating systems. In particular, they will:\n- be able to distinguish different styles of operating system design.\n- understand device and I/O management functions in operating systems\nas part of a uniform device abstraction.\n- have an understanding of disk organisation and file system\nstructure.\n- be able to give the rationale for virtual memory abstractions in\noperating systems.\n- understand the main principles and techniques used to implement\nprocesses and threads as well as the different algorithms for\nprocess scheduling.\n- understand the main mechanisms used for inter-process communication.\n- understand the main problems related to concurrency and the\ndifferent synchronization mechanisms available.\n- have the ability to evaluate security risks in operating systems and\nunderstand the role operating systems can and should play in\nestablishing security."},{"name":"CO212-Networks and Communications","description":"Syllabus\nIntroduction and basic concepts: Applications of computer communications and types of data, Channels, bit rate and throughput, Network topologies, LANs, MANs and WANs, broadcast and point-to-point, Synchronous and asynchronous communication. Connection oriented and connectionless communication\nTheoretical capacity of channels: Shannon's law and the Nyquist relationship, Multiplexing, Queuing theory\nComputer communication system architectures:\nThe OSI Reference Model: overview of the seven layer model. The TCP/IP Model: Comparison with the OSI Model, overview of TCP/IP protocols.\nThe physical layer:\nTransmission media. Properties of signals and signal degradation. Digital and analogue transmission, conversions between formats.\nError detection and correction Forward error control: Hamming code. Reverse error control: parity, block sum check, cyclic redundancy check.\nData compression\nThe data link layer\nError control: Idle RQ and continuous RQ. Flow control\nThe medium access control sub-layer:\nSlotted transmission, carrier sensing, token passing, distributed queues, IEEE MAC model and addresses, Ethernet: 10Mbps to 1Gbps. Token Ring. DQDB\nThe network layer:\nSwitching: packet switched and circuit switched. Routing and Internetworking. Repeaters, bridges and routers flood routing, adaptive routing: link distance and backwards learning, Internet protocols (IPv4, IPv6) and ARP. ATM, The public telephone network: POTS and ISDN\nThe transport layer:\nUDP and TCP. Quality of service\nThe session layer\nThe presentation layer:\nTransport syntax: ASN.1 and ISO8825, Security: confidential and authenticated data, public key and private key cryptography, digital signatures, PGP, key escrow, firewalls.\nThe application layer:\nOSI model protocols, DNS and URLs and FTP, HTTP, SMTP\nFuture directions:\nMultimedia and the RTP"},{"name":"CO276-Introduction to Prolog"},{"name":"CO203-Human-Centred Design","description":"Introduce 2nd year undergraduates to HCD principles and practices, and their exploitation in the design of complex interactive systems in consumer, business to business and public sector environments."},{},{},{"name":"CO210-Computer Architecture","description":"To build on the foundation laid by courses on Computer Systems and Hardware; to show the relationship between hardware and software; to focus on the concepts that provide the basis for current computers.\nIntroduction: overview; performance. Instructions: formats, representations, interface with software.\nArithmetic: number representation; hardware for arithmetic operations; Arithmetic Logic Unit.\nDatapath and control unit: single-clock and multiple-clock implementations; microprogramming; exception handling.\nMemory hierarchy: caches, virtual memory.\nPipelining: pipelined datapaths, data and branch hazards, exceptions.\nAdvanced topics: hardware compilation, parallel architectures, special-purpose processors."},{"name":"CO231-Introduction to Artificial Intelligence","description":"To familiarise with fundamental concepts and methods in Artificial Intelligence."},{"name":"CO233-Computational Techniques","description":"To improve the analytic skills to the level required for engineering and financial applications."},{},{"name":"CO302-Software Engineering Practice","description":"302 - Software Engineering Practice\nThis course is about the development of software products. It covers state-of-the-art techniques used in industrial software development to ensure that teams produce software co-operatively,reliably and on schedule. The course covers technical practices as well as project management techniques. The course is closely integrated with students’ Group Project, with the aim that many of the practices covered in the course can be applied to the Group Project.\nThemes\nAgile Development - we look at the development practices common to agile development, the current industry best practice for developing software products.\nQuality Assurance - we cover various techniques for assuring the quality of the software produced,in terms of reliability, user satisfaction and performance.\nUser Focus - we look at techniques for focussing on the user’s needs and iterating through versions of the product to deliver maximum value to users and customers.\nPlatforms - we discuss a couple of common deployment platforms, looking both at development targetting mobile devices, and the use of the cloud as a platform for software services.\nSpeakers\nIn addition to the lecturing staff, we have invited a number of guest speakers from industry to come\nand share their experiences on various topics during this course."},{"name":"CO362-3rd Year Group Projects","description":"To provide practical experience in the application of software engineering techniques in the design and\nimplementation of large programs."},{"name":"CO301-Individual Project BEng","description":"The individual project provides the opportunity for the student to demonstrate independence and originality, to plan and organise a large project over a long period, and to put into practice some of the techniques that have been taught throughout the course. It is worth about a quarter of the final year marks.\nThe idea for the individual project may be a proposal from a member of staff or the student's own, or perhaps a combination of the two."},{"name":"CO356-Project Presentations Skills","description":"This course aims to improve both written and oral communication skills.\nPresentation: spoken presentation of technical material to both technical and non-technical audiences; writing technical documents; production of written material suitable for a managerial audience."},{"name":"CO350-Management and Business for Computing Engineers","description":"AIMS\nTo provide mechanical engineers with an understanding of the structures, processes and financial underpinning of business organisations, and the economic and social environment in which business organisations operate."},{"name":"CO312-Advanced Databases"},{"name":"CO316-Computer Vision","description":"By the end of this course Students will be able to explain the concepts behind computer based recognition and the extraction of features from raster images. Students will also be able to illustrate some successful applications of vision systems and will be able to identify the vision systems limitations."},{"name":"CO320-Dynamical Systems and Deep Learning","description":"In the course of the past decade Deep Learning has developed into a major paradigm in Machine Learning. It is currently at the basis of state of art technologies for pattern recognition in many different areas of application. This course aims to introduce Deep Belief Nets which provide one of the main tools in Deep Learning. In order to make the subject as accessible as possible, Deep Belief Nets are formulated using the language of Dynamical Systems/ This allows us to consider all the required ingredients, such as Markov processes, deterministic and stochastic Hopfield Networks, Restricted Boltzmann Machines, simply as different forms of the overarching concept of dynamical system. Other applications of dynamical systems specifically in Kaufman Boolean networks for modelling gene mutation and Darwinian evolution would also be studied."},{"name":"CO337-Simulation and Modelling","description":"This course provides an introduction to system modelling using both computer simulation and mathematical techniques. A range of case studies are examined, both in the lectures and tutorial exercises. The application areas considered are wide-ranging, although the emphasis is on the analysis of computer and communication systems using a variety of modelling paradigms such as simulation and queueing theory. The course is self-contained, both in terms of notes and supporting software."},{"name":"CO338-Pervasive Computing","description":"Course Aim"},{"name":"CO343-Operations Research","description":"The purpose of this course is to study the basic tools for quantitative methods for decision making. The emphasis is on solution methods and strategies."},{"name":"CO349-Information and Codes","description":"The course aims in providing the student with an advanced introduction to information and coding theory. This will familiarise the students with concepts which are essential in the context of - in particular - computer security (e.g. differential privacy, side channel attacks, etc.). It also aims to establish a pathway to more advanced ideas in, for example, cryptography."},{"name":"CO382-Type Systems for Programming Languages","description":"The course sets of with the presentation of the Lambda Calculus, on which most functional languages are based. We will introduce the Curry Type Assignment System for this calculus, for which we show that types are respected by reduction, and there exists a notion of principality on types, i.e. all types for a program can be constructed from the 'principal' type.\nWe will show how to extend the language and the system of types in order to deal with Polymorphism. To this end, Combinator Systems are introduced as a slight extension of LC. In order to study how to deal with Recursion, the language of CS is extended to allow for recursive definitions, and we will discuss ways of typing this extension. We will then look at Milner's basic ML system, and show that, in this calculus, a solution is present for all the issues discussed separately before.\nA disadvantage of ML is that it is, syntactically, very distant from actual programming languages, and it is not easy to see that all properties shown for ML translate to the 'real' languages. In particular, definitions of functions by 'cases' (Pattern Matching) are not present in ML. In order to come to a formal notion of types that relates more closely to actual programming languages, we introduce Term Rewriting Systems, which are much closer to actual\nprograms, and show that we can obtain much of the desired properties.\nWe will look at abstract data types and recursive types, and compare and confront the various approached that exist.\nTo conclude, we will have a brief visit to Haskell's type system; we will see that all issues discussed before return here; we will look at type aspects of how Haskell deals with errors, and I/O, and discuss classes and monads.\nThe aim of this course is to lay out in detail the design of type assignment systems for programming languages and focus on the importance of a sound theoretical framework, in order to be able to reason about the properties of a typed program. Students will study and compare a variety of systems and languages.\nLambda Calculus: terms, abstraction, application, reduction, normal form, normalisation, head normal form, head normalisation. The Curry type assignment System.\nTypes, type assignment rules, type substitution, unification, subject reduction. The Principal Type for Curry's System.\nRecursion and Polymorphism: the need for a recursor, how to type recursion.\nMilner's let, the basic ML system, the principal type property for the ML system.\nChurch's typed lambda calculus: type checking versus type inference.\nThe Polymorphic Lambda calculus. Strong normalisation for the polymorphic Lambda Calculus.\nPatterns: term rewriting systems, weak reduction, normal forms, strong normalisation. Dealing with patterns,\nrecursion, subject expansion and reduction.\nHaskell: data types, classes, errors, monads, I/O."},{"name":"CO395-Machine Learning"},{"name":"CO303-Systems Verification","description":"The course is an introduction to the area of formal methods for system specification and verification. Particular prominence is given to logic-based formalisms and techniques, notably model checking. Symbolic model checking via ordered-binary decision diagrams is covered in some detail and so are alternative techniques including bounded model checking and abstraction."},{"name":"CO304-Logic-Based Learning","description":"Logic-based learning is a particular area of Machine Learning that aims at learning rule-based knowledge, called hypotheses, from observations (positive and negative), using existing background knowledge and integrity constraints. Learned hypotheses should be able to explain positive observations, classify them from negative observations, and because of their generalization, accurately predict unseen observations. A key characteristic of logic-based learning is that logic is used as the underlying unifying representation language for observations, background knowledge and hypotheses. Various approaches have been developed in AI since the 1980 and recent advances have seen also an increased application to real world problems in domains such as bioinformatics, privacy and security and software engineering in general. In application domains where observations are noisy and concepts to be learned can be fuzzy, probabilistic inference can be combined with logic-based learning. The integration of these two different worlds has recently inspired new research directions and broadened the applicability of logic-based learning. This course aims to provide an in-depth presentation of the current state-of-the-art of logic-based learning, starting from its key foundation concepts and principles and moving to most recent advances with a particular emphasis on successful applications, available systems, and description of way in which probabilistic inference and parameter learning can be integrated with logic-based inference and logic-based learning."},{"name":"CO317-Graphics","description":"This course covers the fundamental principles of computer graphics and their use in prominent applications. The lectures include:\nDevice independent graphics: Raster and vector devices, world coordinates, the normalisation transformation, output primitives, input primitives. Polygon rendering: 3D data base representation, projection onto a viewing surface, transformation of graphical scenes, homogenous co-ordinates, affine transformations for animation."},{"name":"CO318-Custom Computing","description":"Contents\nOverview: motivations; features and examples of custom computers;\nsummary of development methods and tools.\nDesign: parametrised description of leaf components and composite\nstructures; resource and performance characterisation; high-level design tools.\nOptimisation: techniques for improving design efficiency such as pipelining, serialisation, transposition and their combinations.\nRealisation: bit-level designs, data refinement, FPGA-based implementations.\nSystem-on-chip: architectures, technology trade-offs, design and optimisation methods.\nExamples will be selected from a number of application areas, including digital signal processing, computer arithmetic and non-numerical operations."},{"name":"CO322-Communicating Computer Science in Schools"},{"name":"CO331-Network and Web Security","description":"To cover network and web security broadly from the network to the application layer. The emphasis of the course is on the underlying principles and techniques, with examples of how they are applied in practice."},{"name":"CO332-Advanced Computer Architecture","description":"This a third-level course, that aims to develop a thorough understanding of high-performance and energy-efficient computer architecture, as a basis for informed software performance engineering and as a foundation for advanced work in computer architecture, compiler design, operating systems and parallel processing.\nTopics include:\n* Pipelined CPU architecture. Instruction set design and pipeline structure. Dynamic scheduling using scoreboarding and Tomasulo's algorithm; register renaming. Software instruction scheduling and software pipelining. Superscalar and long-instruction-word architectures (VLIW, EPIC and Itanium). Branch prediction and speculative execution.\nSimultaneous multithreading ('hyperthreading'), and vector instruction sets (such as SSE and AVX).\n* Caches: associativity, allocation and replacement policies, sub-block placement. Multilevel caches, multilevel inclusion. Cache performance issues. Uniprocessor cache coherency issues: self-modifying code, peripherals, address translation.\n* Dependence in loop-based programs; dependence analysis, and iteration-space transformations - to enable automatic parallelisation, vectorisation (eg for SSE), and for memory hierarchy optimisations such as tiling.\n* Implementations of shared memory: the cache coherency problem. Update vs invalidation. The bus-based 'snooping' protocol design space.\nScalable shared memory using directory-based cache coherency. How shared memory supports programmability; OpenMP and MPI.\n* Graphics processors and 'manycore' architectures: SIMT ('single instruction multiple thread), and the CUDA and OpenCL programming models. Decoupling, latency tolerance, throughput-intensive memory system architecture.\nFurther details are available from the course web site, http://www.doc.ic.ac.uk/~phjk/AdvancedCompArchitecture.html"},{"name":"CO333-Robotics","description":"At the end of the course students will be familiar with the key concepts related to the building and programming of small mobile robots. They will understand the different kinds of locomotion and sensor systems that can be used, and the principles behind the programming of simple reactive behaviours. They will have been introduced to advanced techniques in probabilistic filtering, simultaneous localisation and mapping, and motion planning. They will have a thorough grounding in practical aspects of mobile robotics such as calibration and dealing with real motors and sensors."},{"name":"CO341-Introduction to Bioinformatics","description":"Course Overview and Goals:\nVast amounts of biological network data have recently been generated due to advances in experimental biology. These data sets are increasingly beings studied to obtain systems-level understanding of biological structures and processes. Various mathematical and computational tools are being used and developed to analyze and model these data aiming to achieve a better description and understanding of biological processes, disease, and contribute to the time and cost effectiveness of biological experimentation.\nThis course will give an overview of the existing types of biological network data, point to sources of errors and biases in the data, and introduce the current methods, models and literature on graph theoretic modeling and discrete algorithmic analyses applied to these data. The course will also present an overview of the works of several major network biology labs around the world (e.g., U. Alon, M. Vidal, M. Tyers, M. Stumpf, J. Doyle, A.-L. Barabasi etc).\nTopics Outline:\nThe course will cover the following topics:\na) Types of biological networks: metabolic, signaling, protein-protein interaction, etc.\nb) Major databases storing biological network data (e.g. MINT, DIP, HPRD, GRID, MIPS, KEGG).\nc) Sources of noise and biases in various types of the biological network data (e.g., biotechnological biases and limitations, effects of sampling).\nd) Computational challenges in network analysis: introduction to basic graph theoretic and computational complexity concepts such as subgraph isomorphism and NP-completeness.\ne) Properties of large networks: global (e.g., degree distribution, clustering coefficient, average diameter) and local (e.g., network motifs and graphlets).\nf) Network models: various types of random graphs (e.g., Erdos-Renyi, small-world, scale-free, hierarchical, geometric) and network growth models (e.g., preferential attachment).\ng) Network motifs: techniques for their detection (exhaustive and heuristic network search algorithms) and biological function (e.g., feed-forward loops in transcriptional regulation networks).\nh) Interplay of network topology and function (e.g., “lethality” and “centrality,” “synthetic lethality” and network “redundancy,” graph theoretic pathway models).\ni) From models to heuristic algorithms (e.g., exploiting network model properties for “optimal” walks through a network, or detection of small network substructures).\nj) Graph alignment heuristics (e.g., PathBLAST, IsoRank, GRAAL).\nk) Network evolution (e.g. gene duplication and divergence in biological network growth models).\nl) Clustering problems in biological networks (e.g., detection of protein complexes).\nm) Software tools and libraries for network analysis (e.g, LEDA, Cytoscape, Pajek)."},{"name":"CO351-External Course"},{"name":"BS0808-Finance & Financial Management","description":"The aim of this module is to develop certain accounting related skills, by explaining the techniques of financial accounting and management accounting, and examining their relevance to the broader issues of financial decision-making and management control in organisations. The module gives students a basic insight into the way that business performance is measured, and how business decisions can be structured and analysed."},{"name":"bs0815-Business Economics","description":"Economics provides us with a useful set of tools for analysing the world and aiding decision-making by businesses and governments. This module aims to give students an overview of many of these tools and of the insights that can be obtained with them, concentrating on those most relevant to businesses. This means that most of the lectures are on microeconomic topics, looking at the actions of firms and of individuals, but the module concludes with some coverage of macroeconomic problems and policies, looking at the economy as a whole. Students who complete this module should be able to read the business and economics pages of a quality paper and assess the arguments they contain."},{"name":"BS0821-Project Management","description":"The course provides students with an understanding of project management and its central role in the modern business organisation. It presents methods that are used to:"},{},{},{"name":"M5SC-Scientific Computation","description":"Computer programming in an important tool for any mathematician. The aim of this course is to develop proficiency in a scientific programming language and to solve mathematical problems using computation. The objectives are that by the end of the course all students should be familiar with the essential elements of the C programming language, and be able to undertake substantial programming tasks in C, examples of which are given below."},{},{"name":"M2S2-Statistical Modelling I","description":"Traditional concepts of statistical inference, including maximum likelihood, hypothesis testing and interval estimation are developed and then applied to the linear model which arises in many practical situations."},{"name":"M3SC-Scientific Computation","description":"Computer programming in an important tool for any mathematician. The aim of this course is to develop proficiency in a scientific programming language and to solve mathematical problems using computation. The objectives are that by the end of the course all students should be familiar with the essential elements of the C programming language, and be able to undertake substantial programming tasks in C, examples of which are given below."},{}]},{"courses":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"name":"BS0806-Entrepreneurship Business Plan Competition","description":"Entrepreneurship is the process of envisaging and exploiting a new commercial opportunity. An entrepreneur must understand the competitive landscape, estimate demand for their goods or services, and assess risks and returns. A business case summarizes this understanding. It is the crucial document that allows an entrepreneur to marshal the resources they will need to secure a successful outcome for their new venture."},{},{},{},{},{},{},{},{},{"name":"CO464-Industrial Placement - Presentation and Report","description":"To develop verbal and written communication skills required in the practice of software engineering. To integrate industrial placement with academic studies."},{"name":"CO401-Individual Project MEng","description":"The individual project provides the opportunity for the student to demonstrate independence and originality, to plan and organise a large project over a long period, and to put into practice some of the techniques that have been taught throughout the course. It is worth about a quarter of the final year marks.\nThe idea for the individual project may be a proposal from a member of staff or the student's own, or perhaps a combination of the two."},{"name":"CO404h-Separation Logic: Local Reasoning about Programs"},{"name":"CO405H-Computing in Space with OpenSPL"},{"name":"CO406h-Concurrent Processes"},{"name":"CO407h-Medical Image Computing","description":"The course covers the fundamental concepts and methodologies of medical image computing and image analysis and relates those to clinical applications in diagnosis, therapy and intervention. The aim is to provide an overview of the different areas, such as image processing, registration and segmentation, with an emphasis on understanding the theoretical and practical aspects of various methods. The necessary skills will be taught that enable students to work and conduct research in medical image computing."},{"name":"CO408h-Privacy Enhancing Techniques"},{"name":"CO421-Computational Neurodynamics","description":"Overview\nComputational neurodynamics is the use of computer models to study the dynamics of large networks of interacting neurons. The rationale behind the field, which lies at the theoretical end of computational neuroscience, is that the language of dynamical systems is the right one to express the underlying principles of nervous system operation. The course has two parts. In Part One, the student will learn how to model single neurons mathematically, how to simulate them computationally, and how to construct models of large networks of such neurons with a variety of topologies. In Part Two, the student will learn how to characterise the resulting behaviour using various measures, and will acquire an understanding of the phenomena that are revealed as a result.\nSyllabus\nPart One: Modelling Methods\no Neuron models\n* Integrate-and-fire\n* Leaky integrate-and-fire\n* Izhikevich\n* FitzHugh-Nagumo\n* Hodgkin-Huxley\no Numerical simulation\n* Euler method\n* Runge-Kutta method\no Complex networks\n* Small-world networks\n* Efficiency\n* Modular networks\n* Hierarchical small-world networks\n* Hub nodes\n* Connective cores\nPart Two: Measures and Properties\noDynamical complexity\n* Neural complexity\n* Causal density\n* Transfer entropy\n* Information integration (phi)\no Synchronisation\n* Oscillator networks (Kuramoto model)\n* Synchronisation measures\n* Entrainment\n* Quenching\no Reverberation\no Attractor networks\no Metastability and chaos\n* Metastability in oscillator networks\n. Noise\n. Variable natural frequency\n. Phase lag (chimera states)\n* Metastability in neural networks\n* Chaotic itinerancy\no Criticality\no Residual Topics\n* Spike Timing-Dependent Plasticity (STDP)\n* Embodiment and cognition"},{},{"name":"CO433H-Advanced Estimation in Robotics"},{"name":"CO438-Complexity","description":"To describe the complexity classes associated with computational problems. To develop the ability to fit a particular problem into a class of related problems, and so to appreciate the efficiency attainable by algorithms to solve the particular problem."},{"name":"CO440- Software Reliability","description":"Course website: www.doc.ic.ac.uk/~afd/teaching/SoftwareReliability/"},{"name":"CO471-Advanced Issues in Object Oriented Programming","description":"Objectives\nTo discuss issues around the design and implementation of object oriented languages, the rationale and explore alternatives. To use formal calculi as an unambiguous notation, and as a way to establish soundness."},{"name":"CO491-Knowledge Representation","description":"* to present the theoretical foundations for the main logic-based formalisms used for knowledge representation and reasoning in AI, with particular attention to non-monotonic logics and consequence relations, and the computational basis of logic programming;\n* to show how these problems and techniques arise in the treatment of general rules and exceptions, temporal reasoning, and reasoning about action;\n* to provide an overview of current research trends;\n* to develop an awareness of the range of logics besides classical propositional and predicate logic, and some of the main techniques used in their construction."},{"name":"CO499h-Modal Logic"},{},{"name":"CO409-Cryptography"},{"name":"CO410h-Scalable Distributed Systems Design","description":"The course will provide an overview of the challenges when designing and engineering scalable distributed\napplications in data centre environments. It will cover fundamental design principles for scalable systems,\ninvestigate concepts and techniques that make up such system, with a focus on distributed storage, coordination\nand computation mechanisms. The course will require the reading of research papers on the topics listed below."},{"name":"CO412H-Large Scale Data Management"},{"name":"CO415H-Body Sensor Networks","description":"Recent advances in biosensors, wireless network and embedded systems have facilitated rapid development of a wide range of wearable sensors for pervasive monitoring, with applications ranging from health, wellbeing, sports and entertainment. This course introduces the concept of Body Sensor Networks (BSN) under the general principle of Internet of Things. It covers the underlining theories and hardware/software technologies, as well as hands-on system development with strong industrial contribution. It provides an ideal platform for preparing the students to enter into this rapidly developing area of research and commercial development."},{"name":"CO417-Advanced Computer Graphics","description":"To introduce the students to modern techniques in realistic computer graphics and image synthesis, particularly image-based techniques for photorealism."},{"name":"CO422-Computational Finance","description":"After this course, the students will:\n- understand the basic concepts of quantitative finance and financial engineering;\n- be aware of the major decision, hedging, and pricing problems in finance, know how to formulate these problems as mathematical models, and understand the computational techniques to solve the arising models."},{"name":"CO429-Parallel Algorithms","description":"Introduction and motivation: key concepts, performance metrics, scalability and overheads.\nClassification of algorithms, architectures and applications: searching, divide and conquer, data parallel. Static and dynamic, message passing and shared memory, systolic.\nSorting and searching algorithms: mergesort, quicksort and bitonic sort, implementation on different architectures. Parallel depth-first and breadth-first search techniques.\nMatrix algorithms: striping and partitioning, matrix multiplication, linear equations, eigenvalues, dense and sparse techniques, finite element and conjugate gradient methods.\nOptimisation: graph problems, shortest path and spanning trees. Dynamic programming, knapsack problems, scheduling. element methods.\nSynthesis of parallel algorithms: algebraic methods, pipelines, homomorphisms."},{"name":"CO475-Software Engineering for Industry","description":"This course is about working on large, existing, software systems. It focuses on tools, techniques, practices and principles that software engineers use on a daily basis to successfully build, modify, maintain and grow the large software systems that form so much of the infrastructure of trade, commerce, communication and entertainment in the modern world."},{"name":"CO477-Computing for Optimal Decisions","description":"To develop a deeper understanding of optimal decision making models, algorithms and applications to\nfinance. To provide an insight for algorithm design and formulation of decision models."},{"name":"CO493-Intelligent Data Analysis and Probabilistic Inference","description":"The course is concerned with probabilistic methods for modelling data and making inferences from it. The first part introduces Bayesian inference and networks and includes probability propagation and inference in singly connected networks, generating networks from data, and calculating the network accuracy. The course then goes on to consider highly dependent data and special techniques for exact and approximate inference in these cases. The next topics to be covered include data modelling using distributions and mixture models. We will then look at Gaussian latent variable models for dimensionality reduction (e.g., PCA and FA) and classification (e.g., LDA). The last part of the course is concerned with approximate inference techniques where we cover various sampling techniques and variational inference."},{"name":"CO495-Advanced Statistical Machine Learning and Pattern Recognition"},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]},{"courses":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"name":"bs0820-Managing Innovation","description":"Innovation management is one of the most challenging and exciting areas of managerial practice. In many industries, the ability to innovate is critical to building and sustaining competitive advantage. It provides the means to allow organizations to grow and prosper. Innovation is about more than generating ideas; it also about implementing these ideas and capturing value from them. Although innovation is inherently complex and uncertain, there are a range of tools and practices that can help organisations be more successful at the development of new products, processes, and services."},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]},{"courses":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]},{"courses":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]},{"courses":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]},{"courses":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]},{"courses":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]}]}